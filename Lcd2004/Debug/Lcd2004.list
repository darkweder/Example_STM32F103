
Lcd2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001304  08001304  00011304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001348  08001348  00011348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800134c  0800134c  0001134c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  2000000c  0800135c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000084  0800135c  00020084  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ce0e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b97  00000000  00000000  0002ce43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cad  00000000  00000000  0002e9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000528  00000000  00000000  00032688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  00032bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003cdd  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002291  00000000  00000000  0003719d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003942e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e78  00000000  00000000  000394ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080012ec 	.word	0x080012ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080012ec 	.word	0x080012ec

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ffc0 	bl	8001130 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000478:	6802      	ldr	r2, [r0, #0]
 800047a:	6953      	ldr	r3, [r2, #20]
 800047c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000480:	d00d      	beq.n	800049e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000482:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000486:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000488:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800048a:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800048c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800048e:	2300      	movs	r3, #0
 8000490:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000492:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000496:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800049a:	2001      	movs	r0, #1
 800049c:	4770      	bx	lr
  }
  return HAL_OK;
 800049e:	4618      	mov	r0, r3
}
 80004a0:	4770      	bx	lr

080004a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4617      	mov	r7, r2
 80004aa:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004ac:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004b0:	b28e      	uxth	r6, r1
 80004b2:	6825      	ldr	r5, [r4, #0]
 80004b4:	f1b8 0f01 	cmp.w	r8, #1
 80004b8:	bf0c      	ite	eq
 80004ba:	696b      	ldreq	r3, [r5, #20]
 80004bc:	69ab      	ldrne	r3, [r5, #24]
 80004be:	ea36 0303 	bics.w	r3, r6, r3
 80004c2:	bf14      	ite	ne
 80004c4:	2001      	movne	r0, #1
 80004c6:	2000      	moveq	r0, #0
 80004c8:	b908      	cbnz	r0, 80004ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004ce:	696b      	ldr	r3, [r5, #20]
 80004d0:	055a      	lsls	r2, r3, #21
 80004d2:	d512      	bpl.n	80004fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004d4:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004d6:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004dc:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004de:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004e2:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004e4:	2304      	movs	r3, #4
 80004e6:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80004e8:	2300      	movs	r3, #0
      return HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80004ec:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80004ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80004f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80004fa:	1c7b      	adds	r3, r7, #1
 80004fc:	d0d9      	beq.n	80004b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80004fe:	b94f      	cbnz	r7, 8000514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000500:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000502:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000504:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000506:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800050a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800050e:	2003      	movs	r0, #3
 8000510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000514:	f7ff fe5c 	bl	80001d0 <HAL_GetTick>
 8000518:	eba0 0009 	sub.w	r0, r0, r9
 800051c:	4287      	cmp	r7, r0
 800051e:	d2c8      	bcs.n	80004b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000520:	e7ee      	b.n	8000500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000522 <I2C_WaitOnFlagUntilTimeout>:
{
 8000522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000526:	4604      	mov	r4, r0
 8000528:	4690      	mov	r8, r2
 800052a:	461f      	mov	r7, r3
 800052c:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800052e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000532:	b28d      	uxth	r5, r1
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	f1b9 0f01 	cmp.w	r9, #1
 800053a:	bf0c      	ite	eq
 800053c:	695b      	ldreq	r3, [r3, #20]
 800053e:	699b      	ldrne	r3, [r3, #24]
 8000540:	ea35 0303 	bics.w	r3, r5, r3
 8000544:	bf0c      	ite	eq
 8000546:	2301      	moveq	r3, #1
 8000548:	2300      	movne	r3, #0
 800054a:	4543      	cmp	r3, r8
 800054c:	d002      	beq.n	8000554 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800054e:	2000      	movs	r0, #0
}
 8000550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000554:	1c7b      	adds	r3, r7, #1
 8000556:	d0ed      	beq.n	8000534 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000558:	b95f      	cbnz	r7, 8000572 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800055a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800055c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800055e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000560:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000564:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000568:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800056a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000572:	f7ff fe2d 	bl	80001d0 <HAL_GetTick>
 8000576:	1b80      	subs	r0, r0, r6
 8000578:	4287      	cmp	r7, r0
 800057a:	d2db      	bcs.n	8000534 <I2C_WaitOnFlagUntilTimeout+0x12>
 800057c:	e7ed      	b.n	800055a <I2C_WaitOnFlagUntilTimeout+0x38>

0800057e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800057e:	b570      	push	{r4, r5, r6, lr}
 8000580:	4604      	mov	r4, r0
 8000582:	460d      	mov	r5, r1
 8000584:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	d501      	bpl.n	8000592 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800058e:	2000      	movs	r0, #0
 8000590:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000592:	4620      	mov	r0, r4
 8000594:	f7ff ff70 	bl	8000478 <I2C_IsAcknowledgeFailed>
 8000598:	b9a8      	cbnz	r0, 80005c6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800059a:	1c6a      	adds	r2, r5, #1
 800059c:	d0f3      	beq.n	8000586 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800059e:	b965      	cbnz	r5, 80005ba <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005a2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005aa:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005ac:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005ae:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005b8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005ba:	f7ff fe09 	bl	80001d0 <HAL_GetTick>
 80005be:	1b80      	subs	r0, r0, r6
 80005c0:	4285      	cmp	r5, r0
 80005c2:	d2e0      	bcs.n	8000586 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005c4:	e7ec      	b.n	80005a0 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005c6:	2001      	movs	r0, #1
}
 80005c8:	bd70      	pop	{r4, r5, r6, pc}

080005ca <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80005ca:	b570      	push	{r4, r5, r6, lr}
 80005cc:	4604      	mov	r4, r0
 80005ce:	460d      	mov	r5, r1
 80005d0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	075b      	lsls	r3, r3, #29
 80005d8:	d501      	bpl.n	80005de <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80005da:	2000      	movs	r0, #0
 80005dc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005de:	4620      	mov	r0, r4
 80005e0:	f7ff ff4a 	bl	8000478 <I2C_IsAcknowledgeFailed>
 80005e4:	b9a8      	cbnz	r0, 8000612 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005e6:	1c6a      	adds	r2, r5, #1
 80005e8:	d0f3      	beq.n	80005d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005ea:	b965      	cbnz	r5, 8000606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005ee:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005f0:	f043 0320 	orr.w	r3, r3, #32
 80005f4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005f6:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005f8:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000600:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000604:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000606:	f7ff fde3 	bl	80001d0 <HAL_GetTick>
 800060a:	1b80      	subs	r0, r0, r6
 800060c:	4285      	cmp	r5, r0
 800060e:	d2e0      	bcs.n	80005d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000610:	e7ec      	b.n	80005ec <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
}
 8000614:	bd70      	pop	{r4, r5, r6, pc}
	...

08000618 <HAL_I2C_Init>:
{
 8000618:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800061a:	4604      	mov	r4, r0
 800061c:	b908      	cbnz	r0, 8000622 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800061e:	2001      	movs	r0, #1
 8000620:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000622:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000626:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800062a:	b91b      	cbnz	r3, 8000634 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800062c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000630:	f000 fda0 	bl	8001174 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000634:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000636:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800063c:	6813      	ldr	r3, [r2, #0]
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000644:	f000 fbb8 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <HAL_I2C_Init+0xf0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d830      	bhi.n	80006b2 <HAL_I2C_Init+0x9a>
 8000650:	4a2e      	ldr	r2, [pc, #184]	; (800070c <HAL_I2C_Init+0xf4>)
 8000652:	4290      	cmp	r0, r2
 8000654:	d9e3      	bls.n	800061e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000656:	4a2e      	ldr	r2, [pc, #184]	; (8000710 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000658:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800065a:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800065e:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000660:	3201      	adds	r2, #1
 8000662:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <HAL_I2C_Init+0xf0>)
 8000666:	3801      	subs	r0, #1
 8000668:	4293      	cmp	r3, r2
 800066a:	d832      	bhi.n	80006d2 <HAL_I2C_Init+0xba>
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000672:	1c43      	adds	r3, r0, #1
 8000674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000678:	2b04      	cmp	r3, #4
 800067a:	bf38      	it	cc
 800067c:	2304      	movcc	r3, #4
 800067e:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000680:	6a22      	ldr	r2, [r4, #32]
 8000682:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000684:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000686:	4313      	orrs	r3, r2
 8000688:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800068a:	68e2      	ldr	r2, [r4, #12]
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	4313      	orrs	r3, r2
 8000690:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000692:	69a2      	ldr	r2, [r4, #24]
 8000694:	6963      	ldr	r3, [r4, #20]
 8000696:	4313      	orrs	r3, r2
 8000698:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800069a:	680b      	ldr	r3, [r1, #0]
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80006a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006a4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80006a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80006aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80006ac:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80006b0:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_I2C_Init+0xfc>)
 80006b4:	4290      	cmp	r0, r2
 80006b6:	d9b2      	bls.n	800061e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80006b8:	4d15      	ldr	r5, [pc, #84]	; (8000710 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80006be:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80006c2:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006c4:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80006c6:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006c8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80006cc:	fbb2 f2f5 	udiv	r2, r2, r5
 80006d0:	e7c6      	b.n	8000660 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80006d2:	68a2      	ldr	r2, [r4, #8]
 80006d4:	b952      	cbnz	r2, 80006ec <HAL_I2C_Init+0xd4>
 80006d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80006da:	fbb0 f0f3 	udiv	r0, r0, r3
 80006de:	1c43      	adds	r3, r0, #1
 80006e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e4:	b16b      	cbz	r3, 8000702 <HAL_I2C_Init+0xea>
 80006e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ea:	e7c8      	b.n	800067e <HAL_I2C_Init+0x66>
 80006ec:	2219      	movs	r2, #25
 80006ee:	4353      	muls	r3, r2
 80006f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80006f4:	1c43      	adds	r3, r0, #1
 80006f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006fa:	b113      	cbz	r3, 8000702 <HAL_I2C_Init+0xea>
 80006fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000700:	e7bd      	b.n	800067e <HAL_I2C_Init+0x66>
 8000702:	2301      	movs	r3, #1
 8000704:	e7bb      	b.n	800067e <HAL_I2C_Init+0x66>
 8000706:	bf00      	nop
 8000708:	000186a0 	.word	0x000186a0
 800070c:	001e847f 	.word	0x001e847f
 8000710:	000f4240 	.word	0x000f4240
 8000714:	003d08ff 	.word	0x003d08ff

08000718 <HAL_I2C_Master_Transmit>:
{
 8000718:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800071c:	4604      	mov	r4, r0
 800071e:	461f      	mov	r7, r3
 8000720:	460d      	mov	r5, r1
 8000722:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000724:	f7ff fd54 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000728:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800072c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800072e:	2b20      	cmp	r3, #32
 8000730:	d004      	beq.n	800073c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000732:	2502      	movs	r5, #2
}
 8000734:	4628      	mov	r0, r5
 8000736:	b004      	add	sp, #16
 8000738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800073c:	9000      	str	r0, [sp, #0]
 800073e:	2319      	movs	r3, #25
 8000740:	2201      	movs	r2, #1
 8000742:	495d      	ldr	r1, [pc, #372]	; (80008b8 <HAL_I2C_Master_Transmit+0x1a0>)
 8000744:	4620      	mov	r0, r4
 8000746:	f7ff feec 	bl	8000522 <I2C_WaitOnFlagUntilTimeout>
 800074a:	2800      	cmp	r0, #0
 800074c:	d1f1      	bne.n	8000732 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800074e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000752:	2b01      	cmp	r3, #1
 8000754:	d0ed      	beq.n	8000732 <HAL_I2C_Master_Transmit+0x1a>
 8000756:	2301      	movs	r3, #1
 8000758:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000762:	bf5e      	ittt	pl
 8000764:	681a      	ldrpl	r2, [r3, #0]
 8000766:	f042 0201 	orrpl.w	r2, r2, #1
 800076a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000772:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000774:	2221      	movs	r2, #33	; 0x21
 8000776:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800077a:	2210      	movs	r2, #16
 800077c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000780:	2200      	movs	r2, #0
 8000782:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000784:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000788:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800078a:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800078c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800078e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000792:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000796:	2a04      	cmp	r2, #4
 8000798:	d004      	beq.n	80007a4 <HAL_I2C_Master_Transmit+0x8c>
 800079a:	2a01      	cmp	r2, #1
 800079c:	d002      	beq.n	80007a4 <HAL_I2C_Master_Transmit+0x8c>
 800079e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80007a2:	d104      	bne.n	80007ae <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e002      	b.n	80007b4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80007ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80007b0:	2a12      	cmp	r2, #18
 80007b2:	d0f7      	beq.n	80007a4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80007b4:	9600      	str	r6, [sp, #0]
 80007b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007b8:	2200      	movs	r2, #0
 80007ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007be:	4620      	mov	r0, r4
 80007c0:	f7ff feaf 	bl	8000522 <I2C_WaitOnFlagUntilTimeout>
 80007c4:	bb28      	cbnz	r0, 8000812 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007c6:	6923      	ldr	r3, [r4, #16]
 80007c8:	6822      	ldr	r2, [r4, #0]
 80007ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007ce:	d112      	bne.n	80007f6 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80007d0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80007d4:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80007d6:	4633      	mov	r3, r6
 80007d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007da:	4938      	ldr	r1, [pc, #224]	; (80008bc <HAL_I2C_Master_Transmit+0x1a4>)
 80007dc:	4620      	mov	r0, r4
 80007de:	f7ff fe60 	bl	80004a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80007e2:	4605      	mov	r5, r0
 80007e4:	b9a0      	cbnz	r0, 8000810 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	9003      	str	r0, [sp, #12]
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	9203      	str	r2, [sp, #12]
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	9303      	str	r3, [sp, #12]
 80007f2:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80007f4:	e050      	b.n	8000898 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80007f6:	11eb      	asrs	r3, r5, #7
 80007f8:	f003 0306 	and.w	r3, r3, #6
 80007fc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000800:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000802:	492f      	ldr	r1, [pc, #188]	; (80008c0 <HAL_I2C_Master_Transmit+0x1a8>)
 8000804:	4633      	mov	r3, r6
 8000806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fe4a 	bl	80004a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800080e:	b148      	cbz	r0, 8000824 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000810:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000814:	2b04      	cmp	r3, #4
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	d107      	bne.n	800082c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800081c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000820:	2501      	movs	r5, #1
 8000822:	e787      	b.n	8000734 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	b2ed      	uxtb	r5, r5
 8000828:	611d      	str	r5, [r3, #16]
 800082a:	e7d4      	b.n	80007d6 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800082c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000830:	2503      	movs	r5, #3
 8000832:	e77f      	b.n	8000734 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000834:	4632      	mov	r2, r6
 8000836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff fea0 	bl	800057e <I2C_WaitOnTXEFlagUntilTimeout>
 800083e:	b140      	cbz	r0, 8000852 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000842:	2b04      	cmp	r3, #4
 8000844:	d1f4      	bne.n	8000830 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000846:	6822      	ldr	r2, [r4, #0]
 8000848:	6813      	ldr	r3, [r2, #0]
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	e7e6      	b.n	8000820 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000852:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000854:	6820      	ldr	r0, [r4, #0]
 8000856:	1c4b      	adds	r3, r1, #1
 8000858:	6263      	str	r3, [r4, #36]	; 0x24
 800085a:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 800085c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800085e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000862:	3b01      	subs	r3, #1
 8000864:	b29b      	uxth	r3, r3
 8000866:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000868:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800086a:	1e53      	subs	r3, r2, #1
 800086c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800086e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000870:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000872:	d50a      	bpl.n	800088a <HAL_I2C_Master_Transmit+0x172>
 8000874:	b14b      	cbz	r3, 800088a <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000876:	1c8b      	adds	r3, r1, #2
 8000878:	6263      	str	r3, [r4, #36]	; 0x24
 800087a:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 800087c:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800087e:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000882:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000884:	3b01      	subs	r3, #1
 8000886:	b29b      	uxth	r3, r3
 8000888:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800088a:	4632      	mov	r2, r6
 800088c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800088e:	4620      	mov	r0, r4
 8000890:	f7ff fe9b 	bl	80005ca <I2C_WaitOnBTFFlagUntilTimeout>
 8000894:	2800      	cmp	r0, #0
 8000896:	d1d3      	bne.n	8000840 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8000898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1ca      	bne.n	8000834 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800089e:	6821      	ldr	r1, [r4, #0]
 80008a0:	680a      	ldr	r2, [r1, #0]
 80008a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008a6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008a8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80008aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80008b6:	e73d      	b.n	8000734 <HAL_I2C_Master_Transmit+0x1c>
 80008b8:	00100002 	.word	0x00100002
 80008bc:	00010002 	.word	0x00010002
 80008c0:	00010008 	.word	0x00010008

080008c4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c4:	6803      	ldr	r3, [r0, #0]
{
 80008c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ca:	07db      	lsls	r3, r3, #31
{
 80008cc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ce:	d410      	bmi.n	80008f2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	079f      	lsls	r7, r3, #30
 80008d4:	d45e      	bmi.n	8000994 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	0719      	lsls	r1, r3, #28
 80008da:	f100 8095 	bmi.w	8000a08 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	075a      	lsls	r2, r3, #29
 80008e2:	f100 80bf 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008e6:	69ea      	ldr	r2, [r5, #28]
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 812d 	bne.w	8000b48 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80008ee:	2000      	movs	r0, #0
 80008f0:	e014      	b.n	800091c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008f2:	4c90      	ldr	r4, [pc, #576]	; (8000b34 <HAL_RCC_OscConfig+0x270>)
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	f003 030c 	and.w	r3, r3, #12
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d007      	beq.n	800090e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008fe:	6863      	ldr	r3, [r4, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b08      	cmp	r3, #8
 8000906:	d10c      	bne.n	8000922 <HAL_RCC_OscConfig+0x5e>
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	03de      	lsls	r6, r3, #15
 800090c:	d509      	bpl.n	8000922 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	039c      	lsls	r4, r3, #14
 8000912:	d5dd      	bpl.n	80008d0 <HAL_RCC_OscConfig+0xc>
 8000914:	686b      	ldr	r3, [r5, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1da      	bne.n	80008d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
}
 800091c:	b002      	add	sp, #8
 800091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000922:	686b      	ldr	r3, [r5, #4]
 8000924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000928:	d110      	bne.n	800094c <HAL_RCC_OscConfig+0x88>
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000930:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000932:	f7ff fc4d 	bl	80001d0 <HAL_GetTick>
 8000936:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	0398      	lsls	r0, r3, #14
 800093c:	d4c8      	bmi.n	80008d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800093e:	f7ff fc47 	bl	80001d0 <HAL_GetTick>
 8000942:	1b80      	subs	r0, r0, r6
 8000944:	2864      	cmp	r0, #100	; 0x64
 8000946:	d9f7      	bls.n	8000938 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000948:	2003      	movs	r0, #3
 800094a:	e7e7      	b.n	800091c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094c:	b99b      	cbnz	r3, 8000976 <HAL_RCC_OscConfig+0xb2>
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800095e:	f7ff fc37 	bl	80001d0 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	0399      	lsls	r1, r3, #14
 8000968:	d5b2      	bpl.n	80008d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096a:	f7ff fc31 	bl	80001d0 <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	2864      	cmp	r0, #100	; 0x64
 8000972:	d9f7      	bls.n	8000964 <HAL_RCC_OscConfig+0xa0>
 8000974:	e7e8      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	d103      	bne.n	8000986 <HAL_RCC_OscConfig+0xc2>
 800097e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000982:	6023      	str	r3, [r4, #0]
 8000984:	e7d1      	b.n	800092a <HAL_RCC_OscConfig+0x66>
 8000986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098a:	6023      	str	r3, [r4, #0]
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000992:	e7cd      	b.n	8000930 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000994:	4c67      	ldr	r4, [pc, #412]	; (8000b34 <HAL_RCC_OscConfig+0x270>)
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	f013 0f0c 	tst.w	r3, #12
 800099c:	d007      	beq.n	80009ae <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800099e:	6863      	ldr	r3, [r4, #4]
 80009a0:	f003 030c 	and.w	r3, r3, #12
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d110      	bne.n	80009ca <HAL_RCC_OscConfig+0x106>
 80009a8:	6863      	ldr	r3, [r4, #4]
 80009aa:	03da      	lsls	r2, r3, #15
 80009ac:	d40d      	bmi.n	80009ca <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	079b      	lsls	r3, r3, #30
 80009b2:	d502      	bpl.n	80009ba <HAL_RCC_OscConfig+0xf6>
 80009b4:	692b      	ldr	r3, [r5, #16]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d1af      	bne.n	800091a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	696a      	ldr	r2, [r5, #20]
 80009be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009c6:	6023      	str	r3, [r4, #0]
 80009c8:	e785      	b.n	80008d6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ca:	692a      	ldr	r2, [r5, #16]
 80009cc:	4b5a      	ldr	r3, [pc, #360]	; (8000b38 <HAL_RCC_OscConfig+0x274>)
 80009ce:	b16a      	cbz	r2, 80009ec <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d4:	f7ff fbfc 	bl	80001d0 <HAL_GetTick>
 80009d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	079f      	lsls	r7, r3, #30
 80009de:	d4ec      	bmi.n	80009ba <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e0:	f7ff fbf6 	bl	80001d0 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f7      	bls.n	80009da <HAL_RCC_OscConfig+0x116>
 80009ea:	e7ad      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80009ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ee:	f7ff fbef 	bl	80001d0 <HAL_GetTick>
 80009f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	0798      	lsls	r0, r3, #30
 80009f8:	f57f af6d 	bpl.w	80008d6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fc:	f7ff fbe8 	bl	80001d0 <HAL_GetTick>
 8000a00:	1b80      	subs	r0, r0, r6
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d9f6      	bls.n	80009f4 <HAL_RCC_OscConfig+0x130>
 8000a06:	e79f      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a08:	69aa      	ldr	r2, [r5, #24]
 8000a0a:	4c4a      	ldr	r4, [pc, #296]	; (8000b34 <HAL_RCC_OscConfig+0x270>)
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <HAL_RCC_OscConfig+0x278>)
 8000a0e:	b1da      	cbz	r2, 8000a48 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a14:	f7ff fbdc 	bl	80001d0 <HAL_GetTick>
 8000a18:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a1c:	079b      	lsls	r3, r3, #30
 8000a1e:	d50d      	bpl.n	8000a3c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a24:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <HAL_RCC_OscConfig+0x27c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a2c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a2e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a30:	9b01      	ldr	r3, [sp, #4]
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	9201      	str	r2, [sp, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f9      	bne.n	8000a2e <HAL_RCC_OscConfig+0x16a>
 8000a3a:	e750      	b.n	80008de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fbc8 	bl	80001d0 <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9e9      	bls.n	8000a1a <HAL_RCC_OscConfig+0x156>
 8000a46:	e77f      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a4a:	f7ff fbc1 	bl	80001d0 <HAL_GetTick>
 8000a4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a52:	079f      	lsls	r7, r3, #30
 8000a54:	f57f af43 	bpl.w	80008de <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a58:	f7ff fbba 	bl	80001d0 <HAL_GetTick>
 8000a5c:	1b80      	subs	r0, r0, r6
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0x18c>
 8000a62:	e771      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a64:	4c33      	ldr	r4, [pc, #204]	; (8000b34 <HAL_RCC_OscConfig+0x270>)
 8000a66:	69e3      	ldr	r3, [r4, #28]
 8000a68:	00d8      	lsls	r0, r3, #3
 8000a6a:	d424      	bmi.n	8000ab6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	69e3      	ldr	r3, [r4, #28]
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61e3      	str	r3, [r4, #28]
 8000a76:	69e3      	ldr	r3, [r4, #28]
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a80:	4e30      	ldr	r6, [pc, #192]	; (8000b44 <HAL_RCC_OscConfig+0x280>)
 8000a82:	6833      	ldr	r3, [r6, #0]
 8000a84:	05d9      	lsls	r1, r3, #23
 8000a86:	d518      	bpl.n	8000aba <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a88:	68eb      	ldr	r3, [r5, #12]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d126      	bne.n	8000adc <HAL_RCC_OscConfig+0x218>
 8000a8e:	6a23      	ldr	r3, [r4, #32]
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a96:	f7ff fb9b 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa0:	6a23      	ldr	r3, [r4, #32]
 8000aa2:	079b      	lsls	r3, r3, #30
 8000aa4:	d53f      	bpl.n	8000b26 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	f43f af1d 	beq.w	80008e6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aac:	69e3      	ldr	r3, [r4, #28]
 8000aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	61e3      	str	r3, [r4, #28]
 8000ab4:	e717      	b.n	80008e6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ab6:	2700      	movs	r7, #0
 8000ab8:	e7e2      	b.n	8000a80 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aba:	6833      	ldr	r3, [r6, #0]
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fb85 	bl	80001d0 <HAL_GetTick>
 8000ac6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac8:	6833      	ldr	r3, [r6, #0]
 8000aca:	05da      	lsls	r2, r3, #23
 8000acc:	d4dc      	bmi.n	8000a88 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ace:	f7ff fb7f 	bl	80001d0 <HAL_GetTick>
 8000ad2:	eba0 0008 	sub.w	r0, r0, r8
 8000ad6:	2864      	cmp	r0, #100	; 0x64
 8000ad8:	d9f6      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x204>
 8000ada:	e735      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000adc:	b9ab      	cbnz	r3, 8000b0a <HAL_RCC_OscConfig+0x246>
 8000ade:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6223      	str	r3, [r4, #32]
 8000aea:	6a23      	ldr	r3, [r4, #32]
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000af2:	f7ff fb6d 	bl	80001d0 <HAL_GetTick>
 8000af6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af8:	6a23      	ldr	r3, [r4, #32]
 8000afa:	0798      	lsls	r0, r3, #30
 8000afc:	d5d3      	bpl.n	8000aa6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fb67 	bl	80001d0 <HAL_GetTick>
 8000b02:	1b80      	subs	r0, r0, r6
 8000b04:	4540      	cmp	r0, r8
 8000b06:	d9f7      	bls.n	8000af8 <HAL_RCC_OscConfig+0x234>
 8000b08:	e71e      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	6a23      	ldr	r3, [r4, #32]
 8000b0e:	d103      	bne.n	8000b18 <HAL_RCC_OscConfig+0x254>
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6223      	str	r3, [r4, #32]
 8000b16:	e7ba      	b.n	8000a8e <HAL_RCC_OscConfig+0x1ca>
 8000b18:	f023 0301 	bic.w	r3, r3, #1
 8000b1c:	6223      	str	r3, [r4, #32]
 8000b1e:	6a23      	ldr	r3, [r4, #32]
 8000b20:	f023 0304 	bic.w	r3, r3, #4
 8000b24:	e7b6      	b.n	8000a94 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fb53 	bl	80001d0 <HAL_GetTick>
 8000b2a:	eba0 0008 	sub.w	r0, r0, r8
 8000b2e:	42b0      	cmp	r0, r6
 8000b30:	d9b6      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x1dc>
 8000b32:	e709      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	42420000 	.word	0x42420000
 8000b3c:	42420480 	.word	0x42420480
 8000b40:	20000008 	.word	0x20000008
 8000b44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b48:	4c22      	ldr	r4, [pc, #136]	; (8000bd4 <HAL_RCC_OscConfig+0x310>)
 8000b4a:	6863      	ldr	r3, [r4, #4]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b08      	cmp	r3, #8
 8000b52:	f43f aee2 	beq.w	800091a <HAL_RCC_OscConfig+0x56>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4e1f      	ldr	r6, [pc, #124]	; (8000bd8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5e:	d12b      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000b60:	f7ff fb36 	bl	80001d0 <HAL_GetTick>
 8000b64:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	0199      	lsls	r1, r3, #6
 8000b6a:	d41f      	bmi.n	8000bac <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b6c:	6a2b      	ldr	r3, [r5, #32]
 8000b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b72:	d105      	bne.n	8000b80 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b74:	6862      	ldr	r2, [r4, #4]
 8000b76:	68a9      	ldr	r1, [r5, #8]
 8000b78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b80:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b82:	6862      	ldr	r2, [r4, #4]
 8000b84:	430b      	orrs	r3, r1
 8000b86:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b8e:	2301      	movs	r3, #1
 8000b90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b92:	f7ff fb1d 	bl	80001d0 <HAL_GetTick>
 8000b96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	019a      	lsls	r2, r3, #6
 8000b9c:	f53f aea7 	bmi.w	80008ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fb16 	bl	80001d0 <HAL_GetTick>
 8000ba4:	1b40      	subs	r0, r0, r5
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9f6      	bls.n	8000b98 <HAL_RCC_OscConfig+0x2d4>
 8000baa:	e6cd      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bac:	f7ff fb10 	bl	80001d0 <HAL_GetTick>
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9d7      	bls.n	8000b66 <HAL_RCC_OscConfig+0x2a2>
 8000bb6:	e6c7      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fb0a 	bl	80001d0 <HAL_GetTick>
 8000bbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	f57f ae94 	bpl.w	80008ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc6:	f7ff fb03 	bl	80001d0 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d9f6      	bls.n	8000bbe <HAL_RCC_OscConfig+0x2fa>
 8000bd0:	e6ba      	b.n	8000948 <HAL_RCC_OscConfig+0x84>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	42420060 	.word	0x42420060

08000bdc <HAL_RCC_GetSysClockFreq>:
{
 8000bdc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000be0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000be2:	ac02      	add	r4, sp, #8
 8000be4:	f103 0510 	add.w	r5, r3, #16
 8000be8:	4622      	mov	r2, r4
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	6859      	ldr	r1, [r3, #4]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	c203      	stmia	r2!, {r0, r1}
 8000bf2:	42ab      	cmp	r3, r5
 8000bf4:	4614      	mov	r4, r2
 8000bf6:	d1f7      	bne.n	8000be8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f88d 3004 	strb.w	r3, [sp, #4]
 8000bfe:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c00:	4911      	ldr	r1, [pc, #68]	; (8000c48 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c02:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c06:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c08:	f003 020c 	and.w	r2, r3, #12
 8000c0c:	2a08      	cmp	r2, #8
 8000c0e:	d117      	bne.n	8000c40 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c10:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c14:	a806      	add	r0, sp, #24
 8000c16:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c18:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c1a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c1e:	d50c      	bpl.n	8000c3a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c20:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c22:	480a      	ldr	r0, [pc, #40]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c24:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c28:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c2a:	aa06      	add	r2, sp, #24
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c32:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c36:	b007      	add	sp, #28
 8000c38:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c3c:	4350      	muls	r0, r2
 8000c3e:	e7fa      	b.n	8000c36 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c42:	e7f8      	b.n	8000c36 <HAL_RCC_GetSysClockFreq+0x5a>
 8000c44:	08001304 	.word	0x08001304
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	007a1200 	.word	0x007a1200
 8000c50:	003d0900 	.word	0x003d0900

08000c54 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c54:	4a54      	ldr	r2, [pc, #336]	; (8000da8 <HAL_RCC_ClockConfig+0x154>)
{
 8000c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c5a:	6813      	ldr	r3, [r2, #0]
{
 8000c5c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	428b      	cmp	r3, r1
{
 8000c64:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c66:	d32a      	bcc.n	8000cbe <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c68:	6829      	ldr	r1, [r5, #0]
 8000c6a:	078c      	lsls	r4, r1, #30
 8000c6c:	d434      	bmi.n	8000cd8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c6e:	07ca      	lsls	r2, r1, #31
 8000c70:	d447      	bmi.n	8000d02 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <HAL_RCC_ClockConfig+0x154>)
 8000c74:	6813      	ldr	r3, [r2, #0]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	f0c0 8082 	bcc.w	8000d84 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c80:	682a      	ldr	r2, [r5, #0]
 8000c82:	4c4a      	ldr	r4, [pc, #296]	; (8000dac <HAL_RCC_ClockConfig+0x158>)
 8000c84:	f012 0f04 	tst.w	r2, #4
 8000c88:	f040 8087 	bne.w	8000d9a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c8c:	0713      	lsls	r3, r2, #28
 8000c8e:	d506      	bpl.n	8000c9e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c90:	6863      	ldr	r3, [r4, #4]
 8000c92:	692a      	ldr	r2, [r5, #16]
 8000c94:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c9c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c9e:	f7ff ff9d 	bl	8000bdc <HAL_RCC_GetSysClockFreq>
 8000ca2:	6863      	ldr	r3, [r4, #4]
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <HAL_RCC_ClockConfig+0x15c>)
 8000ca6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	40d8      	lsrs	r0, r3
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <HAL_RCC_ClockConfig+0x160>)
 8000cb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fa4a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000cb8:	2000      	movs	r0, #0
}
 8000cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d0ca      	beq.n	8000c68 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cda:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cde:	bf1e      	ittt	ne
 8000ce0:	685a      	ldrne	r2, [r3, #4]
 8000ce2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000ce6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ce8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cea:	bf42      	ittt	mi
 8000cec:	685a      	ldrmi	r2, [r3, #4]
 8000cee:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000cf2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	68a8      	ldr	r0, [r5, #8]
 8000cf8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cfc:	4302      	orrs	r2, r0
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	e7b5      	b.n	8000c6e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	686a      	ldr	r2, [r5, #4]
 8000d04:	4c29      	ldr	r4, [pc, #164]	; (8000dac <HAL_RCC_ClockConfig+0x158>)
 8000d06:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d08:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0a:	d11c      	bne.n	8000d46 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	d0df      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d12:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d18:	f023 0303 	bic.w	r3, r3, #3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d20:	f7ff fa56 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d24:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d26:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d114      	bne.n	8000d56 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d2c:	6863      	ldr	r3, [r4, #4]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d09d      	beq.n	8000c72 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d36:	f7ff fa4b 	bl	80001d0 <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d9f5      	bls.n	8000d2c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d46:	2a02      	cmp	r2, #2
 8000d48:	d102      	bne.n	8000d50 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d4e:	e7df      	b.n	8000d10 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d50:	f013 0f02 	tst.w	r3, #2
 8000d54:	e7dc      	b.n	8000d10 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d10f      	bne.n	8000d7a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d086      	beq.n	8000c72 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d64:	f7ff fa34 	bl	80001d0 <HAL_GetTick>
 8000d68:	1bc0      	subs	r0, r0, r7
 8000d6a:	4540      	cmp	r0, r8
 8000d6c:	d9f5      	bls.n	8000d5a <HAL_RCC_ClockConfig+0x106>
 8000d6e:	e7e7      	b.n	8000d40 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d70:	f7ff fa2e 	bl	80001d0 <HAL_GetTick>
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	4540      	cmp	r0, r8
 8000d78:	d8e2      	bhi.n	8000d40 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d7a:	6863      	ldr	r3, [r4, #4]
 8000d7c:	f013 0f0c 	tst.w	r3, #12
 8000d80:	d1f6      	bne.n	8000d70 <HAL_RCC_ClockConfig+0x11c>
 8000d82:	e776      	b.n	8000c72 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d84:	6813      	ldr	r3, [r2, #0]
 8000d86:	f023 0307 	bic.w	r3, r3, #7
 8000d8a:	4333      	orrs	r3, r6
 8000d8c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d19c      	bne.n	8000cd2 <HAL_RCC_ClockConfig+0x7e>
 8000d98:	e772      	b.n	8000c80 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d9a:	6863      	ldr	r3, [r4, #4]
 8000d9c:	68e9      	ldr	r1, [r5, #12]
 8000d9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6063      	str	r3, [r4, #4]
 8000da6:	e771      	b.n	8000c8c <HAL_RCC_ClockConfig+0x38>
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	0800132f 	.word	0x0800132f
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dc6:	6810      	ldr	r0, [r2, #0]
}    
 8000dc8:	40d8      	lsrs	r0, r3
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	0800133f 	.word	0x0800133f
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <delay_us>:
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

void delay_us(uint32_t us)
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <delay_us+0x1c>)
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <delay_us+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	fbb3 f3f2 	udiv	r3, r3, r2
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000de2:	2200      	movs	r2, #0
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000de4:	4358      	muls	r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <delay_us+0x24>)
 8000de8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4290      	cmp	r0, r2
 8000dee:	d8fc      	bhi.n	8000dea <delay_us+0x12>
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	000f4240 	.word	0x000f4240
 8000dfc:	e0001000 	.word	0xe0001000

08000e00 <LCD_WriteByteI2CLCD>:

void LCD_WriteByteI2CLCD(uint8_t bt)
{
 8000e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDR, &bt, 1, 1000);
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000e06:	aa04      	add	r2, sp, #16
 8000e08:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDR, &bt, 1, 1000);
 8000e0c:	217e      	movs	r1, #126	; 0x7e
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <LCD_WriteByteI2CLCD+0x20>)
 8000e12:	2301      	movs	r3, #1
 8000e14:	f7ff fc80 	bl	8000718 <HAL_I2C_Master_Transmit>
}
 8000e18:	b005      	add	sp, #20
 8000e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e1e:	bf00      	nop
 8000e20:	20000030 	.word	0x20000030

08000e24 <sendhalfbyte>:

void sendhalfbyte(uint8_t c)
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4605      	mov	r5, r0
	c <<= 4;
	E_high(); // установка линии Е в 1
 8000e28:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <sendhalfbyte+0x3c>)
 8000e2a:	7820      	ldrb	r0, [r4, #0]
 8000e2c:	f040 0004 	orr.w	r0, r0, #4
 8000e30:	7020      	strb	r0, [r4, #0]
 8000e32:	f7ff ffe5 	bl	8000e00 <LCD_WriteByteI2CLCD>
	delay_us(50);
 8000e36:	2032      	movs	r0, #50	; 0x32
 8000e38:	f7ff ffce 	bl	8000dd8 <delay_us>
	LCD_WriteByteI2CLCD(control | c);
 8000e3c:	7820      	ldrb	r0, [r4, #0]
 8000e3e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 8000e42:	b2c0      	uxtb	r0, r0
 8000e44:	f7ff ffdc 	bl	8000e00 <LCD_WriteByteI2CLCD>
	E_low(); // установка линии Е в 0
 8000e48:	7820      	ldrb	r0, [r4, #0]
 8000e4a:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8000e4e:	7020      	strb	r0, [r4, #0]
 8000e50:	f7ff ffd6 	bl	8000e00 <LCD_WriteByteI2CLCD>
	delay_us(50);
}
 8000e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_us(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f7ff bfbd 	b.w	8000dd8 <delay_us>
 8000e5e:	bf00      	nop
 8000e60:	20000028 	.word	0x20000028

08000e64 <sendbyte>:

void sendbyte(uint8_t c, uint8_t RS)
{
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <sendbyte+0x2c>)
 8000e68:	4604      	mov	r4, r0
	if(RS == 0) RS_low();
 8000e6a:	7818      	ldrb	r0, [r3, #0]
 8000e6c:	b961      	cbnz	r1, 8000e88 <sendbyte+0x24>
 8000e6e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	else RS_high();
 8000e72:	7018      	strb	r0, [r3, #0]
 8000e74:	f7ff ffc4 	bl	8000e00 <LCD_WriteByteI2CLCD>
	uint8_t hc = 0;
	hc = c >> 4;
	sendhalfbyte(hc);
 8000e78:	0920      	lsrs	r0, r4, #4
 8000e7a:	f7ff ffd3 	bl	8000e24 <sendhalfbyte>
	sendhalfbyte(c);
 8000e7e:	4620      	mov	r0, r4
}
 8000e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sendhalfbyte(c);
 8000e84:	f7ff bfce 	b.w	8000e24 <sendhalfbyte>
	else RS_high();
 8000e88:	f040 0001 	orr.w	r0, r0, #1
 8000e8c:	e7f1      	b.n	8000e72 <sendbyte+0xe>
 8000e8e:	bf00      	nop
 8000e90:	20000028 	.word	0x20000028

08000e94 <LCD_Clear>:

void LCD_Clear(void)
{
 8000e94:	b508      	push	{r3, lr}
	sendbyte(0x01, 0);
 8000e96:	2001      	movs	r0, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f7ff ffe3 	bl	8000e64 <sendbyte>
	HAL_Delay(2);
}
 8000e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(2);
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff b99a 	b.w	80001dc <HAL_Delay>

08000ea8 <LCD_SendChar>:

void LCD_SendChar(char ch)
{
	sendbyte(ch, 1);
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	f7ff bfdb 	b.w	8000e64 <sendbyte>

08000eae <LCD_String>:
}

void LCD_String(char* st)
{
 8000eae:	b538      	push	{r3, r4, r5, lr}
 8000eb0:	4605      	mov	r5, r0
	uint8_t i = 0;
	while(st[i] != 0)
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	b2e3      	uxtb	r3, r4
 8000eb6:	5ce8      	ldrb	r0, [r5, r3]
 8000eb8:	3401      	adds	r4, #1
 8000eba:	b900      	cbnz	r0, 8000ebe <LCD_String+0x10>
	{
		sendbyte(st[i], 1);
		i++;
	}
}
 8000ebc:	bd38      	pop	{r3, r4, r5, pc}
		sendbyte(st[i], 1);
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f7ff ffd0 	bl	8000e64 <sendbyte>
 8000ec4:	e7f6      	b.n	8000eb4 <LCD_String+0x6>

08000ec6 <LCD_SetPos>:

void LCD_SetPos(uint8_t x, uint8_t y)
{
 8000ec6:	b508      	push	{r3, lr}
	switch(y)
 8000ec8:	2903      	cmp	r1, #3
 8000eca:	d817      	bhi.n	8000efc <LCD_SetPos+0x36>
 8000ecc:	e8df f001 	tbb	[pc, r1]
 8000ed0:	14120c02 	.word	0x14120c02
	{
		case 0:
			sendbyte(x|0x80, 0);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		case 2:
			sendbyte((0x14+x)|0x80, 0);
			HAL_Delay(1);
			break;
		case 3:
			sendbyte((0x54+x)|0x80, 0);
 8000eda:	f7ff ffc3 	bl	8000e64 <sendbyte>
			HAL_Delay(1);
			break;
	}
}
 8000ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_Delay(1);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff b97a 	b.w	80001dc <HAL_Delay>
			sendbyte((0x40+x)|0x80, 0);
 8000ee8:	3040      	adds	r0, #64	; 0x40
			sendbyte((0x54+x)|0x80, 0);
 8000eea:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000eee:	2100      	movs	r1, #0
 8000ef0:	b2c0      	uxtb	r0, r0
 8000ef2:	e7f2      	b.n	8000eda <LCD_SetPos+0x14>
			sendbyte((0x14+x)|0x80, 0);
 8000ef4:	3014      	adds	r0, #20
 8000ef6:	e7f8      	b.n	8000eea <LCD_SetPos+0x24>
			sendbyte((0x54+x)|0x80, 0);
 8000ef8:	3054      	adds	r0, #84	; 0x54
 8000efa:	e7f6      	b.n	8000eea <LCD_SetPos+0x24>
 8000efc:	bd08      	pop	{r3, pc}
	...

08000f00 <LCD_ini>:

void LCD_ini(void)
{
 8000f00:	b510      	push	{r4, lr}
	HAL_Delay(15);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff f96a 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff ff8b 	bl	8000e24 <sendhalfbyte>
	HAL_Delay(4);
 8000f0e:	2004      	movs	r0, #4
 8000f10:	f7ff f964 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f7ff ff85 	bl	8000e24 <sendhalfbyte>
	HAL_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff f95e 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f7ff ff7f 	bl	8000e24 <sendhalfbyte>
	HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff f958 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x02);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f7ff ff79 	bl	8000e24 <sendhalfbyte>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff f952 	bl	80001dc <HAL_Delay>
	sendbyte(0x28, 0);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2028      	movs	r0, #40	; 0x28
 8000f3c:	f7ff ff92 	bl	8000e64 <sendbyte>
	HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff f94b 	bl	80001dc <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 8000f46:	2100      	movs	r1, #0
 8000f48:	200c      	movs	r0, #12
 8000f4a:	f7ff ff8b 	bl	8000e64 <sendbyte>
	HAL_Delay(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff f944 	bl	80001dc <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 8000f54:	2100      	movs	r1, #0
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff ff84 	bl	8000e64 <sendbyte>
	HAL_Delay(2);
 8000f5c:	2002      	movs	r0, #2
	sendbyte(0x06,0);//пишем влево
	HAL_Delay(1);
	led_on();//подсветка
 8000f5e:	4c0d      	ldr	r4, [pc, #52]	; (8000f94 <LCD_ini+0x94>)
	HAL_Delay(2);
 8000f60:	f7ff f93c 	bl	80001dc <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 8000f64:	2100      	movs	r1, #0
 8000f66:	2006      	movs	r0, #6
 8000f68:	f7ff ff7c 	bl	8000e64 <sendbyte>
	HAL_Delay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff f935 	bl	80001dc <HAL_Delay>
	led_on();//подсветка
 8000f72:	7820      	ldrb	r0, [r4, #0]
 8000f74:	f040 0008 	orr.w	r0, r0, #8
 8000f78:	7020      	strb	r0, [r4, #0]
 8000f7a:	f7ff ff41 	bl	8000e00 <LCD_WriteByteI2CLCD>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff f92c 	bl	80001dc <HAL_Delay>
	RW_low(); // запись в дисплей
 8000f84:	7820      	ldrb	r0, [r4, #0]
 8000f86:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8000f8a:	7020      	strb	r0, [r4, #0]
}
 8000f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RW_low(); // запись в дисплей
 8000f90:	f7ff bf36 	b.w	8000e00 <LCD_WriteByteI2CLCD>
 8000f94:	20000028 	.word	0x20000028

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b510      	push	{r4, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9c:	2228      	movs	r2, #40	; 0x28
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	a806      	add	r0, sp, #24
 8000fa2:	f000 f993 	bl	80012cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa6:	2214      	movs	r2, #20
 8000fa8:	2100      	movs	r1, #0
 8000faa:	a801      	add	r0, sp, #4
 8000fac:	f000 f98e 	bl	80012cc <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f7ff fc7b 	bl	80008c4 <HAL_RCC_OscConfig>
 8000fce:	b100      	cbz	r0, 8000fd2 <SystemClock_Config+0x3a>
 8000fd0:	e7fe      	b.n	8000fd0 <SystemClock_Config+0x38>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	4621      	mov	r1, r4
 8000fe0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	f7ff fe35 	bl	8000c54 <HAL_RCC_ClockConfig>
 8000fea:	b100      	cbz	r0, 8000fee <SystemClock_Config+0x56>
 8000fec:	e7fe      	b.n	8000fec <SystemClock_Config+0x54>
  {
    Error_Handler();
  }
}
 8000fee:	b010      	add	sp, #64	; 0x40
 8000ff0:	bd10      	pop	{r4, pc}
	...

08000ff4 <main>:
{
 8000ff4:	b500      	push	{lr}
 8000ff6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000ff8:	f7ff f8cc 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000ffc:	f7ff ffcc 	bl	8000f98 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <main+0x120>)
  hi2c1.Instance = I2C1;
 8001002:	4845      	ldr	r0, [pc, #276]	; (8001118 <main+0x124>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 8001006:	4c45      	ldr	r4, [pc, #276]	; (800111c <main+0x128>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	f042 0220 	orr.w	r2, r2, #32
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	699a      	ldr	r2, [r3, #24]
 8001010:	f002 0220 	and.w	r2, r2, #32
 8001014:	9201      	str	r2, [sp, #4]
 8001016:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	f042 0204 	orr.w	r2, r2, #4
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	699a      	ldr	r2, [r3, #24]
 8001022:	f002 0204 	and.w	r2, r2, #4
 8001026:	9202      	str	r2, [sp, #8]
 8001028:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	699a      	ldr	r2, [r3, #24]
 800102c:	f042 0208 	orr.w	r2, r2, #8
 8001030:	619a      	str	r2, [r3, #24]
 8001032:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	9303      	str	r3, [sp, #12]
 800103e:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <main+0x12c>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001042:	6102      	str	r2, [r0, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8001044:	e880 0018 	stmia.w	r0, {r3, r4}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001048:	2300      	movs	r3, #0
 800104a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001050:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001052:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001056:	f7ff fadf 	bl	8000618 <HAL_I2C_Init>
 800105a:	4604      	mov	r4, r0
 800105c:	b100      	cbz	r0, 8001060 <main+0x6c>
 800105e:	e7fe      	b.n	800105e <main+0x6a>
  char str[16] = {0,};
 8001060:	2210      	movs	r2, #16
 8001062:	4601      	mov	r1, r0
 8001064:	eb0d 0002 	add.w	r0, sp, r2
 8001068:	f000 f930 	bl	80012cc <memset>
  LCD_ini();
 800106c:	f7ff ff48 	bl	8000f00 <LCD_ini>
  snprintf(str, 10, "Stm32F103");
 8001070:	492c      	ldr	r1, [pc, #176]	; (8001124 <main+0x130>)
 8001072:	a804      	add	r0, sp, #16
 8001074:	f000 f932 	bl	80012dc <strcpy>
  LCD_String(str);
 8001078:	a804      	add	r0, sp, #16
 800107a:	f7ff ff18 	bl	8000eae <LCD_String>
  HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f7ff f8ab 	bl	80001dc <HAL_Delay>
  LCD_Clear();
 8001086:	f7ff ff05 	bl	8000e94 <LCD_Clear>
  LCD_SetPos(4, 0); // с четвертого символа в первой строке
 800108a:	4621      	mov	r1, r4
 800108c:	2004      	movs	r0, #4
 800108e:	f7ff ff1a 	bl	8000ec6 <LCD_SetPos>
  LCD_SendChar('s');
 8001092:	2073      	movs	r0, #115	; 0x73
 8001094:	f7ff ff08 	bl	8000ea8 <LCD_SendChar>
  LCD_SetPos(8, 1); // с восьмого символа во второй строке
 8001098:	2101      	movs	r1, #1
 800109a:	2008      	movs	r0, #8
 800109c:	f7ff ff13 	bl	8000ec6 <LCD_SetPos>
  LCD_SendChar('t');
 80010a0:	2074      	movs	r0, #116	; 0x74
 80010a2:	f7ff ff01 	bl	8000ea8 <LCD_SendChar>
  LCD_SetPos(12, 2);
 80010a6:	2102      	movs	r1, #2
 80010a8:	200c      	movs	r0, #12
 80010aa:	f7ff ff0c 	bl	8000ec6 <LCD_SetPos>
  LCD_SendChar('m');
 80010ae:	206d      	movs	r0, #109	; 0x6d
 80010b0:	f7ff fefa 	bl	8000ea8 <LCD_SendChar>
  LCD_SetPos(16, 3);
 80010b4:	2103      	movs	r1, #3
 80010b6:	2010      	movs	r0, #16
 80010b8:	f7ff ff05 	bl	8000ec6 <LCD_SetPos>
  LCD_SendChar('3');
 80010bc:	2033      	movs	r0, #51	; 0x33
 80010be:	f7ff fef3 	bl	8000ea8 <LCD_SendChar>
  LCD_SendChar('2');
 80010c2:	2032      	movs	r0, #50	; 0x32
 80010c4:	f7ff fef0 	bl	8000ea8 <LCD_SendChar>
  HAL_Delay(1000);
 80010c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010cc:	f7ff f886 	bl	80001dc <HAL_Delay>
	  snprintf(str, 6, "Kisia");
 80010d0:	4d15      	ldr	r5, [pc, #84]	; (8001128 <main+0x134>)
	  snprintf(str, 11, "I love you");
 80010d2:	4c16      	ldr	r4, [pc, #88]	; (800112c <main+0x138>)
	  LCD_Clear();
 80010d4:	f7ff fede 	bl	8000e94 <LCD_Clear>
	  snprintf(str, 6, "Kisia");
 80010d8:	4629      	mov	r1, r5
 80010da:	a804      	add	r0, sp, #16
 80010dc:	f000 f8fe 	bl	80012dc <strcpy>
	  LCD_String(str);
 80010e0:	a804      	add	r0, sp, #16
 80010e2:	f7ff fee4 	bl	8000eae <LCD_String>
	  HAL_Delay(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f7ff f877 	bl	80001dc <HAL_Delay>
	  LCD_Clear();
 80010ee:	f7ff fed1 	bl	8000e94 <LCD_Clear>
	  LCD_SetPos(0, 1);
 80010f2:	2101      	movs	r1, #1
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fee6 	bl	8000ec6 <LCD_SetPos>
	  snprintf(str, 11, "I love you");
 80010fa:	4621      	mov	r1, r4
 80010fc:	a804      	add	r0, sp, #16
 80010fe:	f000 f8ed 	bl	80012dc <strcpy>
	  LCD_String(str);
 8001102:	a804      	add	r0, sp, #16
 8001104:	f7ff fed3 	bl	8000eae <LCD_String>
	  HAL_Delay(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800110c:	f7ff f866 	bl	80001dc <HAL_Delay>
 8001110:	e7e0      	b.n	80010d4 <main+0xe0>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	20000030 	.word	0x20000030
 800111c:	000186a0 	.word	0x000186a0
 8001120:	40005400 	.word	0x40005400
 8001124:	08001314 	.word	0x08001314
 8001128:	0800131e 	.word	0x0800131e
 800112c:	08001324 	.word	0x08001324

08001130 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_MspInit+0x3c>)
{
 8001132:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	f002 0201 	and.w	r2, r2, #1
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	69da      	ldr	r2, [r3, #28]
 8001148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114c:	61da      	str	r2, [r3, #28]
 800114e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	6853      	ldr	r3, [r2, #4]
 800115c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	b002      	add	sp, #8
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000

08001174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001174:	b510      	push	{r4, lr}
 8001176:	4604      	mov	r4, r0
 8001178:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	2210      	movs	r2, #16
 800117c:	2100      	movs	r1, #0
 800117e:	a802      	add	r0, sp, #8
 8001180:	f000 f8a4 	bl	80012cc <memset>
  if(hi2c->Instance==I2C1)
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_I2C_MspInit+0x58>)
 8001188:	429a      	cmp	r2, r3
 800118a:	d11c      	bne.n	80011c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4c10      	ldr	r4, [pc, #64]	; (80011d0 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	61a3      	str	r3, [r4, #24]
 800119a:	69a3      	ldr	r3, [r4, #24]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a4:	23c0      	movs	r3, #192	; 0xc0
 80011a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f7ff f882 	bl	80002b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b4:	69e3      	ldr	r3, [r4, #28]
 80011b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ba:	61e3      	str	r3, [r4, #28]
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c6:	b006      	add	sp, #24
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <NMI_Handler>:
 80011d8:	4770      	bx	lr

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	e7fe      	b.n	80011da <HardFault_Handler>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	e7fe      	b.n	80011de <BusFault_Handler>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler>

080011e2 <SVC_Handler>:
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f7fe bfe6 	b.w	80001b8 <HAL_IncTick>

080011ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <SystemInit+0x40>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	f042 0201 	orr.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011f6:	6859      	ldr	r1, [r3, #4]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <SystemInit+0x44>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001204:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001208:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001210:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001218:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800121a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800121e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <SystemInit+0x48>)
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	f8ff0000 	.word	0xf8ff0000
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800123a:	e003      	b.n	8001244 <LoopCopyDataInit>

0800123c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800123e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001242:	3104      	adds	r1, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800124c:	d3f6      	bcc.n	800123c <CopyDataInit>
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001250:	e002      	b.n	8001258 <LoopFillZerobss>

08001252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001254:	f842 3b04 	str.w	r3, [r2], #4

08001258 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800125c:	d3f9      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125e:	f7ff ffc5 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f000 f80f 	bl	8001284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001266:	f7ff fec5 	bl	8000ff4 <main>
  bx lr
 800126a:	4770      	bx	lr
  ldr r3, =_sidata
 800126c:	08001350 	.word	0x08001350
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001274:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001278:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800127c:	20000084 	.word	0x20000084

08001280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_2_IRQHandler>
	...

08001284 <__libc_init_array>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	2500      	movs	r5, #0
 8001288:	4e0c      	ldr	r6, [pc, #48]	; (80012bc <__libc_init_array+0x38>)
 800128a:	4c0d      	ldr	r4, [pc, #52]	; (80012c0 <__libc_init_array+0x3c>)
 800128c:	1ba4      	subs	r4, r4, r6
 800128e:	10a4      	asrs	r4, r4, #2
 8001290:	42a5      	cmp	r5, r4
 8001292:	d109      	bne.n	80012a8 <__libc_init_array+0x24>
 8001294:	f000 f82a 	bl	80012ec <_init>
 8001298:	2500      	movs	r5, #0
 800129a:	4e0a      	ldr	r6, [pc, #40]	; (80012c4 <__libc_init_array+0x40>)
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <__libc_init_array+0x44>)
 800129e:	1ba4      	subs	r4, r4, r6
 80012a0:	10a4      	asrs	r4, r4, #2
 80012a2:	42a5      	cmp	r5, r4
 80012a4:	d105      	bne.n	80012b2 <__libc_init_array+0x2e>
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
 80012a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ac:	4798      	blx	r3
 80012ae:	3501      	adds	r5, #1
 80012b0:	e7ee      	b.n	8001290 <__libc_init_array+0xc>
 80012b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012b6:	4798      	blx	r3
 80012b8:	3501      	adds	r5, #1
 80012ba:	e7f2      	b.n	80012a2 <__libc_init_array+0x1e>
 80012bc:	08001348 	.word	0x08001348
 80012c0:	08001348 	.word	0x08001348
 80012c4:	08001348 	.word	0x08001348
 80012c8:	0800134c 	.word	0x0800134c

080012cc <memset>:
 80012cc:	4603      	mov	r3, r0
 80012ce:	4402      	add	r2, r0
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d100      	bne.n	80012d6 <memset+0xa>
 80012d4:	4770      	bx	lr
 80012d6:	f803 1b01 	strb.w	r1, [r3], #1
 80012da:	e7f9      	b.n	80012d0 <memset+0x4>

080012dc <strcpy>:
 80012dc:	4603      	mov	r3, r0
 80012de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012e2:	f803 2b01 	strb.w	r2, [r3], #1
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d1f9      	bne.n	80012de <strcpy+0x2>
 80012ea:	4770      	bx	lr

080012ec <_init>:
 80012ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ee:	bf00      	nop
 80012f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012f2:	bc08      	pop	{r3}
 80012f4:	469e      	mov	lr, r3
 80012f6:	4770      	bx	lr

080012f8 <_fini>:
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	bf00      	nop
 80012fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fe:	bc08      	pop	{r3}
 8001300:	469e      	mov	lr, r3
 8001302:	4770      	bx	lr
