
Debug_ITM_SWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000215c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  20000070  080023c4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000124  080023c4  00020124  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000103ee  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000214d  00000000  00000000  00030487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ae3  00000000  00000000  000325d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000800  00000000  00000000  000380b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa0  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000451c  00000000  00000000  00039358  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003299  00000000  00000000  0003d874  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040b0d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f20  00000000  00000000  00040b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00042aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  00042b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002250 	.word	0x08002250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002250 	.word	0x08002250

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ffae 	bl	800110c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000009c 	.word	0x2000009c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d6:	4616      	mov	r6, r2
 80002d8:	4b65      	ldr	r3, [pc, #404]	; (8000470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b0>
 80002de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d17f      	bne.n	80003f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f4:	684d      	ldr	r5, [r1, #4]
 80002f6:	2d12      	cmp	r5, #18
 80002f8:	f000 80af 	beq.w	800045a <HAL_GPIO_Init+0x18a>
 80002fc:	f200 8088 	bhi.w	8000410 <HAL_GPIO_Init+0x140>
 8000300:	2d02      	cmp	r5, #2
 8000302:	f000 80a7 	beq.w	8000454 <HAL_GPIO_Init+0x184>
 8000306:	d87c      	bhi.n	8000402 <HAL_GPIO_Init+0x132>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 808e 	beq.w	800042a <HAL_GPIO_Init+0x15a>
 800030e:	2d01      	cmp	r5, #1
 8000310:	f000 809e 	beq.w	8000450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	bf93      	iteet	ls
 800031c:	4682      	movls	sl, r0
 800031e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000322:	3d08      	subhi	r5, #8
 8000324:	f8d0 b000 	ldrls.w	fp, [r0]
 8000328:	bf92      	itee	ls
 800032a:	00b5      	lslls	r5, r6, #2
 800032c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	fa09 f805 	lsl.w	r8, r9, r5
 8000336:	ea2b 0808 	bic.w	r8, fp, r8
 800033a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033e:	bf88      	it	hi
 8000340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000344:	ea48 0505 	orr.w	r5, r8, r5
 8000348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000354:	d04e      	beq.n	80003f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4d47      	ldr	r5, [pc, #284]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 8000358:	4f46      	ldr	r7, [pc, #280]	; (8000474 <HAL_GPIO_Init+0x1a4>)
 800035a:	69ad      	ldr	r5, [r5, #24]
 800035c:	f026 0803 	bic.w	r8, r6, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	61bd      	str	r5, [r7, #24]
 8000366:	69bd      	ldr	r5, [r7, #24]
 8000368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800036c:	f005 0501 	and.w	r5, r5, #1
 8000370:	9501      	str	r5, [sp, #4]
 8000372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800038c:	4d3a      	ldr	r5, [pc, #232]	; (8000478 <HAL_GPIO_Init+0x1a8>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d068      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d066      	beq.n	8000468 <HAL_GPIO_Init+0x198>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d064      	beq.n	800046c <HAL_GPIO_Init+0x19c>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f4:	3601      	adds	r6, #1
 80003f6:	2e10      	cmp	r6, #16
 80003f8:	f47f af73 	bne.w	80002e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003fc:	b003      	add	sp, #12
 80003fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000402:	2d03      	cmp	r5, #3
 8000404:	d022      	beq.n	800044c <HAL_GPIO_Init+0x17c>
 8000406:	2d11      	cmp	r5, #17
 8000408:	d184      	bne.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040a:	68ca      	ldr	r2, [r1, #12]
 800040c:	3204      	adds	r2, #4
          break;
 800040e:	e781      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000410:	4f1a      	ldr	r7, [pc, #104]	; (800047c <HAL_GPIO_Init+0x1ac>)
 8000412:	42bd      	cmp	r5, r7
 8000414:	d009      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000416:	d812      	bhi.n	800043e <HAL_GPIO_Init+0x16e>
 8000418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000488 <HAL_GPIO_Init+0x1b8>
 800041c:	454d      	cmp	r5, r9
 800041e:	d004      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000424:	454d      	cmp	r5, r9
 8000426:	f47f af75 	bne.w	8000314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	688a      	ldr	r2, [r1, #8]
 800042c:	b1c2      	cbz	r2, 8000460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000430:	bf0c      	ite	eq
 8000432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043a:	2208      	movs	r2, #8
 800043c:	e76a      	b.n	8000314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043e:	4575      	cmp	r5, lr
 8000440:	d0f3      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000442:	4565      	cmp	r5, ip
 8000444:	d0f1      	beq.n	800042a <HAL_GPIO_Init+0x15a>
 8000446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800048c <HAL_GPIO_Init+0x1bc>
 800044a:	e7eb      	b.n	8000424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800044c:	2200      	movs	r2, #0
 800044e:	e761      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
          break;
 8000452:	e75f      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000454:	68ca      	ldr	r2, [r1, #12]
 8000456:	3208      	adds	r2, #8
          break;
 8000458:	e75c      	b.n	8000314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800045a:	68ca      	ldr	r2, [r1, #12]
 800045c:	320c      	adds	r2, #12
          break;
 800045e:	e759      	b.n	8000314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000460:	2204      	movs	r2, #4
 8000462:	e757      	b.n	8000314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000464:	2500      	movs	r5, #0
 8000466:	e7a2      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000468:	2501      	movs	r5, #1
 800046a:	e7a0      	b.n	80003ae <HAL_GPIO_Init+0xde>
 800046c:	2502      	movs	r5, #2
 800046e:	e79e      	b.n	80003ae <HAL_GPIO_Init+0xde>
 8000470:	40010400 	.word	0x40010400
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10210000 	.word	0x10210000
 8000480:	10310000 	.word	0x10310000
 8000484:	10320000 	.word	0x10320000
 8000488:	10110000 	.word	0x10110000
 800048c:	10220000 	.word	0x10220000

08000490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000490:	b10a      	cbz	r2, 8000496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000492:	6101      	str	r1, [r0, #16]
 8000494:	4770      	bx	lr
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	e7fb      	b.n	8000492 <HAL_GPIO_WritePin+0x2>

0800049a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800049a:	68c3      	ldr	r3, [r0, #12]
 800049c:	4059      	eors	r1, r3
 800049e:	60c1      	str	r1, [r0, #12]
 80004a0:	4770      	bx	lr
	...

080004a4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a4:	6803      	ldr	r3, [r0, #0]
{
 80004a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004aa:	07db      	lsls	r3, r3, #31
{
 80004ac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ae:	d410      	bmi.n	80004d2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b0:	682b      	ldr	r3, [r5, #0]
 80004b2:	079f      	lsls	r7, r3, #30
 80004b4:	d45e      	bmi.n	8000574 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b6:	682b      	ldr	r3, [r5, #0]
 80004b8:	0719      	lsls	r1, r3, #28
 80004ba:	f100 8095 	bmi.w	80005e8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004be:	682b      	ldr	r3, [r5, #0]
 80004c0:	075a      	lsls	r2, r3, #29
 80004c2:	f100 80bf 	bmi.w	8000644 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c6:	69ea      	ldr	r2, [r5, #28]
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	f040 812d 	bne.w	8000728 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ce:	2000      	movs	r0, #0
 80004d0:	e014      	b.n	80004fc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004d2:	4c90      	ldr	r4, [pc, #576]	; (8000714 <HAL_RCC_OscConfig+0x270>)
 80004d4:	6863      	ldr	r3, [r4, #4]
 80004d6:	f003 030c 	and.w	r3, r3, #12
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d007      	beq.n	80004ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d10c      	bne.n	8000502 <HAL_RCC_OscConfig+0x5e>
 80004e8:	6863      	ldr	r3, [r4, #4]
 80004ea:	03de      	lsls	r6, r3, #15
 80004ec:	d509      	bpl.n	8000502 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	039c      	lsls	r4, r3, #14
 80004f2:	d5dd      	bpl.n	80004b0 <HAL_RCC_OscConfig+0xc>
 80004f4:	686b      	ldr	r3, [r5, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1da      	bne.n	80004b0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
}
 80004fc:	b002      	add	sp, #8
 80004fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000502:	686b      	ldr	r3, [r5, #4]
 8000504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000508:	d110      	bne.n	800052c <HAL_RCC_OscConfig+0x88>
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000510:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000512:	f7ff fe5d 	bl	80001d0 <HAL_GetTick>
 8000516:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000518:	6823      	ldr	r3, [r4, #0]
 800051a:	0398      	lsls	r0, r3, #14
 800051c:	d4c8      	bmi.n	80004b0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	1b80      	subs	r0, r0, r6
 8000524:	2864      	cmp	r0, #100	; 0x64
 8000526:	d9f7      	bls.n	8000518 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000528:	2003      	movs	r0, #3
 800052a:	e7e7      	b.n	80004fc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052c:	b99b      	cbnz	r3, 8000556 <HAL_RCC_OscConfig+0xb2>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6023      	str	r3, [r4, #0]
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800053e:	f7ff fe47 	bl	80001d0 <HAL_GetTick>
 8000542:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	0399      	lsls	r1, r3, #14
 8000548:	d5b2      	bpl.n	80004b0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800054a:	f7ff fe41 	bl	80001d0 <HAL_GetTick>
 800054e:	1b80      	subs	r0, r0, r6
 8000550:	2864      	cmp	r0, #100	; 0x64
 8000552:	d9f7      	bls.n	8000544 <HAL_RCC_OscConfig+0xa0>
 8000554:	e7e8      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	d103      	bne.n	8000566 <HAL_RCC_OscConfig+0xc2>
 800055e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	e7d1      	b.n	800050a <HAL_RCC_OscConfig+0x66>
 8000566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056a:	6023      	str	r3, [r4, #0]
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000572:	e7cd      	b.n	8000510 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000574:	4c67      	ldr	r4, [pc, #412]	; (8000714 <HAL_RCC_OscConfig+0x270>)
 8000576:	6863      	ldr	r3, [r4, #4]
 8000578:	f013 0f0c 	tst.w	r3, #12
 800057c:	d007      	beq.n	800058e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800057e:	6863      	ldr	r3, [r4, #4]
 8000580:	f003 030c 	and.w	r3, r3, #12
 8000584:	2b08      	cmp	r3, #8
 8000586:	d110      	bne.n	80005aa <HAL_RCC_OscConfig+0x106>
 8000588:	6863      	ldr	r3, [r4, #4]
 800058a:	03da      	lsls	r2, r3, #15
 800058c:	d40d      	bmi.n	80005aa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	079b      	lsls	r3, r3, #30
 8000592:	d502      	bpl.n	800059a <HAL_RCC_OscConfig+0xf6>
 8000594:	692b      	ldr	r3, [r5, #16]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d1af      	bne.n	80004fa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	696a      	ldr	r2, [r5, #20]
 800059e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005a6:	6023      	str	r3, [r4, #0]
 80005a8:	e785      	b.n	80004b6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005aa:	692a      	ldr	r2, [r5, #16]
 80005ac:	4b5a      	ldr	r3, [pc, #360]	; (8000718 <HAL_RCC_OscConfig+0x274>)
 80005ae:	b16a      	cbz	r2, 80005cc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b4:	f7ff fe0c 	bl	80001d0 <HAL_GetTick>
 80005b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	079f      	lsls	r7, r3, #30
 80005be:	d4ec      	bmi.n	800059a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c0:	f7ff fe06 	bl	80001d0 <HAL_GetTick>
 80005c4:	1b80      	subs	r0, r0, r6
 80005c6:	2802      	cmp	r0, #2
 80005c8:	d9f7      	bls.n	80005ba <HAL_RCC_OscConfig+0x116>
 80005ca:	e7ad      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ce:	f7ff fdff 	bl	80001d0 <HAL_GetTick>
 80005d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	0798      	lsls	r0, r3, #30
 80005d8:	f57f af6d 	bpl.w	80004b6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	2802      	cmp	r0, #2
 80005e4:	d9f6      	bls.n	80005d4 <HAL_RCC_OscConfig+0x130>
 80005e6:	e79f      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e8:	69aa      	ldr	r2, [r5, #24]
 80005ea:	4c4a      	ldr	r4, [pc, #296]	; (8000714 <HAL_RCC_OscConfig+0x270>)
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <HAL_RCC_OscConfig+0x278>)
 80005ee:	b1da      	cbz	r2, 8000628 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f4:	f7ff fdec 	bl	80001d0 <HAL_GetTick>
 80005f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	d50d      	bpl.n	800061c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000600:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000604:	4b46      	ldr	r3, [pc, #280]	; (8000720 <HAL_RCC_OscConfig+0x27c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	fbb3 f3f2 	udiv	r3, r3, r2
 800060c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800060e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	9201      	str	r2, [sp, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f9      	bne.n	800060e <HAL_RCC_OscConfig+0x16a>
 800061a:	e750      	b.n	80004be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800061c:	f7ff fdd8 	bl	80001d0 <HAL_GetTick>
 8000620:	1b80      	subs	r0, r0, r6
 8000622:	2802      	cmp	r0, #2
 8000624:	d9e9      	bls.n	80005fa <HAL_RCC_OscConfig+0x156>
 8000626:	e77f      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000628:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800062a:	f7ff fdd1 	bl	80001d0 <HAL_GetTick>
 800062e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000632:	079f      	lsls	r7, r3, #30
 8000634:	f57f af43 	bpl.w	80004be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000638:	f7ff fdca 	bl	80001d0 <HAL_GetTick>
 800063c:	1b80      	subs	r0, r0, r6
 800063e:	2802      	cmp	r0, #2
 8000640:	d9f6      	bls.n	8000630 <HAL_RCC_OscConfig+0x18c>
 8000642:	e771      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000644:	4c33      	ldr	r4, [pc, #204]	; (8000714 <HAL_RCC_OscConfig+0x270>)
 8000646:	69e3      	ldr	r3, [r4, #28]
 8000648:	00d8      	lsls	r0, r3, #3
 800064a:	d424      	bmi.n	8000696 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800064c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61e3      	str	r3, [r4, #28]
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000660:	4e30      	ldr	r6, [pc, #192]	; (8000724 <HAL_RCC_OscConfig+0x280>)
 8000662:	6833      	ldr	r3, [r6, #0]
 8000664:	05d9      	lsls	r1, r3, #23
 8000666:	d518      	bpl.n	800069a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000668:	68eb      	ldr	r3, [r5, #12]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d126      	bne.n	80006bc <HAL_RCC_OscConfig+0x218>
 800066e:	6a23      	ldr	r3, [r4, #32]
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000676:	f7ff fdab 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800067a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800067e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000680:	6a23      	ldr	r3, [r4, #32]
 8000682:	079b      	lsls	r3, r3, #30
 8000684:	d53f      	bpl.n	8000706 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000686:	2f00      	cmp	r7, #0
 8000688:	f43f af1d 	beq.w	80004c6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800068c:	69e3      	ldr	r3, [r4, #28]
 800068e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000692:	61e3      	str	r3, [r4, #28]
 8000694:	e717      	b.n	80004c6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000696:	2700      	movs	r7, #0
 8000698:	e7e2      	b.n	8000660 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800069a:	6833      	ldr	r3, [r6, #0]
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006a2:	f7ff fd95 	bl	80001d0 <HAL_GetTick>
 80006a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a8:	6833      	ldr	r3, [r6, #0]
 80006aa:	05da      	lsls	r2, r3, #23
 80006ac:	d4dc      	bmi.n	8000668 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006ae:	f7ff fd8f 	bl	80001d0 <HAL_GetTick>
 80006b2:	eba0 0008 	sub.w	r0, r0, r8
 80006b6:	2864      	cmp	r0, #100	; 0x64
 80006b8:	d9f6      	bls.n	80006a8 <HAL_RCC_OscConfig+0x204>
 80006ba:	e735      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006bc:	b9ab      	cbnz	r3, 80006ea <HAL_RCC_OscConfig+0x246>
 80006be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	6223      	str	r3, [r4, #32]
 80006ca:	6a23      	ldr	r3, [r4, #32]
 80006cc:	f023 0304 	bic.w	r3, r3, #4
 80006d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006d2:	f7ff fd7d 	bl	80001d0 <HAL_GetTick>
 80006d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d8:	6a23      	ldr	r3, [r4, #32]
 80006da:	0798      	lsls	r0, r3, #30
 80006dc:	d5d3      	bpl.n	8000686 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006de:	f7ff fd77 	bl	80001d0 <HAL_GetTick>
 80006e2:	1b80      	subs	r0, r0, r6
 80006e4:	4540      	cmp	r0, r8
 80006e6:	d9f7      	bls.n	80006d8 <HAL_RCC_OscConfig+0x234>
 80006e8:	e71e      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	6a23      	ldr	r3, [r4, #32]
 80006ee:	d103      	bne.n	80006f8 <HAL_RCC_OscConfig+0x254>
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6223      	str	r3, [r4, #32]
 80006f6:	e7ba      	b.n	800066e <HAL_RCC_OscConfig+0x1ca>
 80006f8:	f023 0301 	bic.w	r3, r3, #1
 80006fc:	6223      	str	r3, [r4, #32]
 80006fe:	6a23      	ldr	r3, [r4, #32]
 8000700:	f023 0304 	bic.w	r3, r3, #4
 8000704:	e7b6      	b.n	8000674 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000706:	f7ff fd63 	bl	80001d0 <HAL_GetTick>
 800070a:	eba0 0008 	sub.w	r0, r0, r8
 800070e:	42b0      	cmp	r0, r6
 8000710:	d9b6      	bls.n	8000680 <HAL_RCC_OscConfig+0x1dc>
 8000712:	e709      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
 8000714:	40021000 	.word	0x40021000
 8000718:	42420000 	.word	0x42420000
 800071c:	42420480 	.word	0x42420480
 8000720:	20000008 	.word	0x20000008
 8000724:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000728:	4c22      	ldr	r4, [pc, #136]	; (80007b4 <HAL_RCC_OscConfig+0x310>)
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	f003 030c 	and.w	r3, r3, #12
 8000730:	2b08      	cmp	r3, #8
 8000732:	f43f aee2 	beq.w	80004fa <HAL_RCC_OscConfig+0x56>
 8000736:	2300      	movs	r3, #0
 8000738:	4e1f      	ldr	r6, [pc, #124]	; (80007b8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800073c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073e:	d12b      	bne.n	8000798 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000740:	f7ff fd46 	bl	80001d0 <HAL_GetTick>
 8000744:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	0199      	lsls	r1, r3, #6
 800074a:	d41f      	bmi.n	800078c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800074c:	6a2b      	ldr	r3, [r5, #32]
 800074e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000752:	d105      	bne.n	8000760 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000754:	6862      	ldr	r2, [r4, #4]
 8000756:	68a9      	ldr	r1, [r5, #8]
 8000758:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800075c:	430a      	orrs	r2, r1
 800075e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000760:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000762:	6862      	ldr	r2, [r4, #4]
 8000764:	430b      	orrs	r3, r1
 8000766:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800076a:	4313      	orrs	r3, r2
 800076c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800076e:	2301      	movs	r3, #1
 8000770:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000772:	f7ff fd2d 	bl	80001d0 <HAL_GetTick>
 8000776:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	019a      	lsls	r2, r3, #6
 800077c:	f53f aea7 	bmi.w	80004ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000780:	f7ff fd26 	bl	80001d0 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	2802      	cmp	r0, #2
 8000788:	d9f6      	bls.n	8000778 <HAL_RCC_OscConfig+0x2d4>
 800078a:	e6cd      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800078c:	f7ff fd20 	bl	80001d0 <HAL_GetTick>
 8000790:	1bc0      	subs	r0, r0, r7
 8000792:	2802      	cmp	r0, #2
 8000794:	d9d7      	bls.n	8000746 <HAL_RCC_OscConfig+0x2a2>
 8000796:	e6c7      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000798:	f7ff fd1a 	bl	80001d0 <HAL_GetTick>
 800079c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	f57f ae94 	bpl.w	80004ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a6:	f7ff fd13 	bl	80001d0 <HAL_GetTick>
 80007aa:	1b40      	subs	r0, r0, r5
 80007ac:	2802      	cmp	r0, #2
 80007ae:	d9f6      	bls.n	800079e <HAL_RCC_OscConfig+0x2fa>
 80007b0:	e6ba      	b.n	8000528 <HAL_RCC_OscConfig+0x84>
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	42420060 	.word	0x42420060

080007bc <HAL_RCC_GetSysClockFreq>:
{
 80007bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007c2:	ac02      	add	r4, sp, #8
 80007c4:	f103 0510 	add.w	r5, r3, #16
 80007c8:	4622      	mov	r2, r4
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	6859      	ldr	r1, [r3, #4]
 80007ce:	3308      	adds	r3, #8
 80007d0:	c203      	stmia	r2!, {r0, r1}
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	4614      	mov	r4, r2
 80007d6:	d1f7      	bne.n	80007c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d8:	2301      	movs	r3, #1
 80007da:	f88d 3004 	strb.w	r3, [sp, #4]
 80007de:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007e0:	4911      	ldr	r1, [pc, #68]	; (8000828 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007e8:	f003 020c 	and.w	r2, r3, #12
 80007ec:	2a08      	cmp	r2, #8
 80007ee:	d117      	bne.n	8000820 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007f4:	a806      	add	r0, sp, #24
 80007f6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007fe:	d50c      	bpl.n	800081a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000800:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000804:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000808:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080a:	aa06      	add	r2, sp, #24
 800080c:	4413      	add	r3, r2
 800080e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000812:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000816:	b007      	add	sp, #28
 8000818:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_RCC_GetSysClockFreq+0x74>)
 800081c:	4350      	muls	r0, r2
 800081e:	e7fa      	b.n	8000816 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000822:	e7f8      	b.n	8000816 <HAL_RCC_GetSysClockFreq+0x5a>
 8000824:	08002268 	.word	0x08002268
 8000828:	40021000 	.word	0x40021000
 800082c:	007a1200 	.word	0x007a1200
 8000830:	003d0900 	.word	0x003d0900

08000834 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000834:	4a54      	ldr	r2, [pc, #336]	; (8000988 <HAL_RCC_ClockConfig+0x154>)
{
 8000836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083a:	6813      	ldr	r3, [r2, #0]
{
 800083c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	428b      	cmp	r3, r1
{
 8000844:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000846:	d32a      	bcc.n	800089e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000848:	6829      	ldr	r1, [r5, #0]
 800084a:	078c      	lsls	r4, r1, #30
 800084c:	d434      	bmi.n	80008b8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800084e:	07ca      	lsls	r2, r1, #31
 8000850:	d447      	bmi.n	80008e2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000852:	4a4d      	ldr	r2, [pc, #308]	; (8000988 <HAL_RCC_ClockConfig+0x154>)
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	429e      	cmp	r6, r3
 800085c:	f0c0 8082 	bcc.w	8000964 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000860:	682a      	ldr	r2, [r5, #0]
 8000862:	4c4a      	ldr	r4, [pc, #296]	; (800098c <HAL_RCC_ClockConfig+0x158>)
 8000864:	f012 0f04 	tst.w	r2, #4
 8000868:	f040 8087 	bne.w	800097a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800086c:	0713      	lsls	r3, r2, #28
 800086e:	d506      	bpl.n	800087e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000870:	6863      	ldr	r3, [r4, #4]
 8000872:	692a      	ldr	r2, [r5, #16]
 8000874:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000878:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800087c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800087e:	f7ff ff9d 	bl	80007bc <HAL_RCC_GetSysClockFreq>
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	4a42      	ldr	r2, [pc, #264]	; (8000990 <HAL_RCC_ClockConfig+0x15c>)
 8000886:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	40d8      	lsrs	r0, r3
 800088e:	4b41      	ldr	r3, [pc, #260]	; (8000994 <HAL_RCC_ClockConfig+0x160>)
 8000890:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fc5a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000898:	2000      	movs	r0, #0
}
 800089a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800089e:	6813      	ldr	r3, [r2, #0]
 80008a0:	f023 0307 	bic.w	r3, r3, #7
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d0ca      	beq.n	8000848 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008b2:	2001      	movs	r0, #1
 80008b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008be:	bf1e      	ittt	ne
 80008c0:	685a      	ldrne	r2, [r3, #4]
 80008c2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008c6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008ca:	bf42      	ittt	mi
 80008cc:	685a      	ldrmi	r2, [r3, #4]
 80008ce:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008d2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	68a8      	ldr	r0, [r5, #8]
 80008d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008dc:	4302      	orrs	r2, r0
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	e7b5      	b.n	800084e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	686a      	ldr	r2, [r5, #4]
 80008e4:	4c29      	ldr	r4, [pc, #164]	; (800098c <HAL_RCC_ClockConfig+0x158>)
 80008e6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	d11c      	bne.n	8000926 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f0:	d0df      	beq.n	80008b2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f8:	f023 0303 	bic.w	r3, r3, #3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000900:	f7ff fc66 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000904:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000906:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000908:	2b01      	cmp	r3, #1
 800090a:	d114      	bne.n	8000936 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800090c:	6863      	ldr	r3, [r4, #4]
 800090e:	f003 030c 	and.w	r3, r3, #12
 8000912:	2b04      	cmp	r3, #4
 8000914:	d09d      	beq.n	8000852 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000916:	f7ff fc5b 	bl	80001d0 <HAL_GetTick>
 800091a:	1bc0      	subs	r0, r0, r7
 800091c:	4540      	cmp	r0, r8
 800091e:	d9f5      	bls.n	800090c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000920:	2003      	movs	r0, #3
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000926:	2a02      	cmp	r2, #2
 8000928:	d102      	bne.n	8000930 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800092a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800092e:	e7df      	b.n	80008f0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000930:	f013 0f02 	tst.w	r3, #2
 8000934:	e7dc      	b.n	80008f0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000936:	2b02      	cmp	r3, #2
 8000938:	d10f      	bne.n	800095a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	f003 030c 	and.w	r3, r3, #12
 8000940:	2b08      	cmp	r3, #8
 8000942:	d086      	beq.n	8000852 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000944:	f7ff fc44 	bl	80001d0 <HAL_GetTick>
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	4540      	cmp	r0, r8
 800094c:	d9f5      	bls.n	800093a <HAL_RCC_ClockConfig+0x106>
 800094e:	e7e7      	b.n	8000920 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000950:	f7ff fc3e 	bl	80001d0 <HAL_GetTick>
 8000954:	1bc0      	subs	r0, r0, r7
 8000956:	4540      	cmp	r0, r8
 8000958:	d8e2      	bhi.n	8000920 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	f013 0f0c 	tst.w	r3, #12
 8000960:	d1f6      	bne.n	8000950 <HAL_RCC_ClockConfig+0x11c>
 8000962:	e776      	b.n	8000852 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000964:	6813      	ldr	r3, [r2, #0]
 8000966:	f023 0307 	bic.w	r3, r3, #7
 800096a:	4333      	orrs	r3, r6
 800096c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	429e      	cmp	r6, r3
 8000976:	d19c      	bne.n	80008b2 <HAL_RCC_ClockConfig+0x7e>
 8000978:	e772      	b.n	8000860 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800097a:	6863      	ldr	r3, [r4, #4]
 800097c:	68e9      	ldr	r1, [r5, #12]
 800097e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000982:	430b      	orrs	r3, r1
 8000984:	6063      	str	r3, [r4, #4]
 8000986:	e771      	b.n	800086c <HAL_RCC_ClockConfig+0x38>
 8000988:	40022000 	.word	0x40022000
 800098c:	40021000 	.word	0x40021000
 8000990:	0800229b 	.word	0x0800229b
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009a2:	5cd3      	ldrb	r3, [r2, r3]
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009a6:	6810      	ldr	r0, [r2, #0]
}    
 80009a8:	40d8      	lsrs	r0, r3
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	080022ab 	.word	0x080022ab
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009c6:	6810      	ldr	r0, [r2, #0]
} 
 80009c8:	40d8      	lsrs	r0, r3
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	080022ab 	.word	0x080022ab
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009d8:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80009da:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	f042 0201 	orr.w	r2, r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	4770      	bx	lr

080009ee <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80009ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80009f2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	f04f 0302 	mov.w	r3, #2
 80009fa:	d01c      	beq.n	8000a36 <HAL_TIM_ConfigClockSource+0x48>
 80009fc:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80009fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000a02:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a08:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a0a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a0e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000a14:	680a      	ldr	r2, [r1, #0]
 8000a16:	2a40      	cmp	r2, #64	; 0x40
 8000a18:	d079      	beq.n	8000b0e <HAL_TIM_ConfigClockSource+0x120>
 8000a1a:	d819      	bhi.n	8000a50 <HAL_TIM_ConfigClockSource+0x62>
 8000a1c:	2a10      	cmp	r2, #16
 8000a1e:	f000 8093 	beq.w	8000b48 <HAL_TIM_ConfigClockSource+0x15a>
 8000a22:	d80a      	bhi.n	8000a3a <HAL_TIM_ConfigClockSource+0x4c>
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	f000 8089 	beq.w	8000b3c <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000a30:	2300      	movs	r3, #0
 8000a32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a36:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a3a:	2a20      	cmp	r2, #32
 8000a3c:	f000 808a 	beq.w	8000b54 <HAL_TIM_ConfigClockSource+0x166>
 8000a40:	2a30      	cmp	r2, #48	; 0x30
 8000a42:	d1f2      	bne.n	8000a2a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a44:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a4a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a4e:	e036      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a50:	2a70      	cmp	r2, #112	; 0x70
 8000a52:	d036      	beq.n	8000ac2 <HAL_TIM_ConfigClockSource+0xd4>
 8000a54:	d81b      	bhi.n	8000a8e <HAL_TIM_ConfigClockSource+0xa0>
 8000a56:	2a50      	cmp	r2, #80	; 0x50
 8000a58:	d042      	beq.n	8000ae0 <HAL_TIM_ConfigClockSource+0xf2>
 8000a5a:	2a60      	cmp	r2, #96	; 0x60
 8000a5c:	d1e5      	bne.n	8000a2a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a5e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a60:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a62:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a66:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a68:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a6a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a6c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a6e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a76:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a7a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a7e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a80:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a88:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a8c:	e017      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a8e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a92:	d011      	beq.n	8000ab8 <HAL_TIM_ConfigClockSource+0xca>
 8000a94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a98:	d1c7      	bne.n	8000a2a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000a9a:	688a      	ldr	r2, [r1, #8]
 8000a9c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000a9e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aa0:	68c9      	ldr	r1, [r1, #12]
 8000aa2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000aa4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aa8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000aac:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000aae:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ab6:	e002      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	e7b3      	b.n	8000a2a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ac2:	688a      	ldr	r2, [r1, #8]
 8000ac4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ac6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ac8:	68c9      	ldr	r1, [r1, #12]
 8000aca:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000acc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ad0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ad4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000ad6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ad8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ada:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ade:	e7ee      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ae0:	684c      	ldr	r4, [r1, #4]
 8000ae2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ae4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ae6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ae8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000aec:	f025 0501 	bic.w	r5, r5, #1
 8000af0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000af2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000af4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000af6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000afa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b00:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b02:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b08:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b0c:	e7d7      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b0e:	684c      	ldr	r4, [r1, #4]
 8000b10:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b12:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b14:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b16:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b1a:	f025 0501 	bic.w	r5, r5, #1
 8000b1e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b20:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b22:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b24:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b28:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b2e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b30:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b36:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b3a:	e7c0      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b3c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b42:	f042 0207 	orr.w	r2, r2, #7
 8000b46:	e7ba      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b48:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b4e:	f042 0217 	orr.w	r2, r2, #23
 8000b52:	e7b4      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b54:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b5a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b5e:	e7ae      	b.n	8000abe <HAL_TIM_ConfigClockSource+0xd0>

08000b60 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b60:	4770      	bx	lr

08000b62 <HAL_TIM_IC_CaptureCallback>:
 8000b62:	4770      	bx	lr

08000b64 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b64:	4770      	bx	lr

08000b66 <HAL_TIM_TriggerCallback>:
 8000b66:	4770      	bx	lr

08000b68 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b68:	6803      	ldr	r3, [r0, #0]
{
 8000b6a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b6c:	691a      	ldr	r2, [r3, #16]
{
 8000b6e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b70:	0791      	lsls	r1, r2, #30
 8000b72:	d50e      	bpl.n	8000b92 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	0792      	lsls	r2, r2, #30
 8000b78:	d50b      	bpl.n	8000b92 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b7a:	f06f 0202 	mvn.w	r2, #2
 8000b7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b80:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b82:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b84:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b86:	079b      	lsls	r3, r3, #30
 8000b88:	d077      	beq.n	8000c7a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000b8a:	f7ff ffea 	bl	8000b62 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	691a      	ldr	r2, [r3, #16]
 8000b96:	0750      	lsls	r0, r2, #29
 8000b98:	d510      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	0751      	lsls	r1, r2, #29
 8000b9e:	d50d      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ba0:	f06f 0204 	mvn.w	r2, #4
 8000ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ba6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ba8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000baa:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bac:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000bb0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb2:	d068      	beq.n	8000c86 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bb4:	f7ff ffd5 	bl	8000b62 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	0712      	lsls	r2, r2, #28
 8000bc2:	d50f      	bpl.n	8000be4 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	0710      	lsls	r0, r2, #28
 8000bc8:	d50c      	bpl.n	8000be4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000bca:	f06f 0208 	mvn.w	r2, #8
 8000bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bd0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bd2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bd4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bd6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000bd8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bda:	d05a      	beq.n	8000c92 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bdc:	f7ff ffc1 	bl	8000b62 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000be0:	2300      	movs	r3, #0
 8000be2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	06d2      	lsls	r2, r2, #27
 8000bea:	d510      	bpl.n	8000c0e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	06d0      	lsls	r0, r2, #27
 8000bf0:	d50d      	bpl.n	8000c0e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bf2:	f06f 0210 	mvn.w	r2, #16
 8000bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bf8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bfa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000bfc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000bfe:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000c02:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c04:	d04b      	beq.n	8000c9e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c06:	f7ff ffac 	bl	8000b62 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	07d1      	lsls	r1, r2, #31
 8000c14:	d508      	bpl.n	8000c28 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	07d2      	lsls	r2, r2, #31
 8000c1a:	d505      	bpl.n	8000c28 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c1c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c22:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c24:	f000 f984 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	0610      	lsls	r0, r2, #24
 8000c2e:	d508      	bpl.n	8000c42 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	0611      	lsls	r1, r2, #24
 8000c34:	d505      	bpl.n	8000c42 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c36:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c3e:	f000 f8aa 	bl	8000d96 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	0652      	lsls	r2, r2, #25
 8000c48:	d508      	bpl.n	8000c5c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	0650      	lsls	r0, r2, #25
 8000c4e:	d505      	bpl.n	8000c5c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c58:	f7ff ff85 	bl	8000b66 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	691a      	ldr	r2, [r3, #16]
 8000c60:	0691      	lsls	r1, r2, #26
 8000c62:	d522      	bpl.n	8000caa <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	0692      	lsls	r2, r2, #26
 8000c68:	d51f      	bpl.n	8000caa <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c6a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c6e:	4620      	mov	r0, r4
}
 8000c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c74:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c76:	f000 b88d 	b.w	8000d94 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c7a:	f7ff ff71 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f7ff ff70 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c84:	e783      	b.n	8000b8e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c86:	f7ff ff6b 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ff6a 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c90:	e792      	b.n	8000bb8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c92:	f7ff ff65 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff64 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c9c:	e7a0      	b.n	8000be0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c9e:	f7ff ff5f 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff ff5e 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca8:	e7af      	b.n	8000c0a <HAL_TIM_IRQHandler+0xa2>
 8000caa:	bd10      	pop	{r4, pc}

08000cac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cac:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000cae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d00a      	beq.n	8000cca <TIM_Base_SetConfig+0x1e>
 8000cb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cb8:	d007      	beq.n	8000cca <TIM_Base_SetConfig+0x1e>
 8000cba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d003      	beq.n	8000cca <TIM_Base_SetConfig+0x1e>
 8000cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d115      	bne.n	8000cf6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000cca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cd0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <TIM_Base_SetConfig+0x6c>)
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	d00a      	beq.n	8000cee <TIM_Base_SetConfig+0x42>
 8000cd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cdc:	d007      	beq.n	8000cee <TIM_Base_SetConfig+0x42>
 8000cde:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d003      	beq.n	8000cee <TIM_Base_SetConfig+0x42>
 8000ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d103      	bne.n	8000cf6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cf4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cf6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cfc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000cfe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d00:	688b      	ldr	r3, [r1, #8]
 8000d02:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d04:	680b      	ldr	r3, [r1, #0]
 8000d06:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <TIM_Base_SetConfig+0x6c>)
 8000d0a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000d0c:	bf04      	itt	eq
 8000d0e:	690b      	ldreq	r3, [r1, #16]
 8000d10:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000d12:	2301      	movs	r3, #1
 8000d14:	6143      	str	r3, [r0, #20]
 8000d16:	4770      	bx	lr
 8000d18:	40012c00 	.word	0x40012c00

08000d1c <HAL_TIM_Base_Init>:
{
 8000d1c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d1e:	4604      	mov	r4, r0
 8000d20:	b1a0      	cbz	r0, 8000d4c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d2a:	b91b      	cbnz	r3, 8000d34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d30:	f000 fa0e 	bl	8001150 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d34:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d36:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d3c:	1d21      	adds	r1, r4, #4
 8000d3e:	f7ff ffb5 	bl	8000cac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d42:	2301      	movs	r3, #1
  return HAL_OK;
 8000d44:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d54:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	f04f 0302 	mov.w	r3, #2
 8000d5c:	d018      	beq.n	8000d90 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d62:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d64:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d66:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d68:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d6e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	4322      	orrs	r2, r4
 8000d74:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d7c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d90:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d92:	bd10      	pop	{r4, pc}

08000d94 <HAL_TIMEx_CommutationCallback>:
 8000d94:	4770      	bx	lr

08000d96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d96:	4770      	bx	lr

08000d98 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d9c:	6805      	ldr	r5, [r0, #0]
 8000d9e:	68c2      	ldr	r2, [r0, #12]
 8000da0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000da2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000da4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000da8:	4313      	orrs	r3, r2
 8000daa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000dae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000db4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000db8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dbc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dc2:	696b      	ldr	r3, [r5, #20]
 8000dc4:	6982      	ldr	r2, [r0, #24]
 8000dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000dce:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <UART_SetConfig+0x138>)
{
 8000dd0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000dd2:	429d      	cmp	r5, r3
 8000dd4:	f04f 0419 	mov.w	r4, #25
 8000dd8:	d146      	bne.n	8000e68 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000dda:	f7ff fded 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000dde:	fb04 f300 	mul.w	r3, r4, r0
 8000de2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000de6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000dea:	00b6      	lsls	r6, r6, #2
 8000dec:	fbb3 f3f6 	udiv	r3, r3, r6
 8000df0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000df4:	011e      	lsls	r6, r3, #4
 8000df6:	f7ff fddf 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000dfa:	4360      	muls	r0, r4
 8000dfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e06:	f7ff fdd7 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000e0a:	4360      	muls	r0, r4
 8000e0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e1a:	fb08 7313 	mls	r3, r8, r3, r7
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	3332      	adds	r3, #50	; 0x32
 8000e22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e26:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e2a:	f7ff fdc5 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
 8000e2e:	4360      	muls	r0, r4
 8000e30:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	fbb0 faf2 	udiv	sl, r0, r2
 8000e3a:	f7ff fdbd 	bl	80009b8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e3e:	4360      	muls	r0, r4
 8000e40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e4e:	fb08 a313 	mls	r3, r8, r3, sl
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	3332      	adds	r3, #50	; 0x32
 8000e56:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	433b      	orrs	r3, r7
 8000e60:	4433      	add	r3, r6
 8000e62:	60ab      	str	r3, [r5, #8]
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f7ff fd96 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000e6c:	fb04 f300 	mul.w	r3, r4, r0
 8000e70:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e74:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e78:	00b6      	lsls	r6, r6, #2
 8000e7a:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e82:	011e      	lsls	r6, r3, #4
 8000e84:	f7ff fd88 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000e88:	4360      	muls	r0, r4
 8000e8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e94:	f7ff fd80 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000e98:	4360      	muls	r0, r4
 8000e9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ea4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ea8:	fb08 7313 	mls	r3, r8, r3, r7
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	3332      	adds	r3, #50	; 0x32
 8000eb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000eb8:	f7ff fd6e 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000ebc:	4360      	muls	r0, r4
 8000ebe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	fbb0 faf2 	udiv	sl, r0, r2
 8000ec8:	f7ff fd66 	bl	8000998 <HAL_RCC_GetPCLK1Freq>
 8000ecc:	e7b7      	b.n	8000e3e <UART_SetConfig+0xa6>
 8000ece:	bf00      	nop
 8000ed0:	40013800 	.word	0x40013800

08000ed4 <HAL_UART_Init>:
{
 8000ed4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	b340      	cbz	r0, 8000f2c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000eda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ede:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee2:	b91b      	cbnz	r3, 8000eec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000ee4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ee8:	f000 f950 	bl	800118c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000eec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000eee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ef0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000ef4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ef6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000efc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000efe:	f7ff ff4b 	bl	8000d98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f02:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f04:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f14:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f1c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f1e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f20:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
}
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM1)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d104      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		HAL_GPIO_TogglePin(led13_GPIO_Port, led13_Pin);
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000f3e:	f7ff baac 	b.w	800049a <HAL_GPIO_TogglePin>
 8000f42:	4770      	bx	lr
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	40011000 	.word	0x40011000

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f50:	2228      	movs	r2, #40	; 0x28
 8000f52:	2100      	movs	r1, #0
 8000f54:	a806      	add	r0, sp, #24
 8000f56:	f000 f9d5 	bl	8001304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2214      	movs	r2, #20
 8000f5e:	a801      	add	r0, sp, #4
 8000f60:	f000 f9d0 	bl	8001304 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f76:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f7a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f7ff fa91 	bl	80004a4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f94:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f98:	f7ff fc4c 	bl	8000834 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f9c:	b010      	add	sp, #64	; 0x40
 8000f9e:	bd10      	pop	{r4, pc}

08000fa0 <main>:
{
 8000fa0:	b500      	push	{lr}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000fa4:	f7ff f8f6 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000fa8:	f7ff ffd0 	bl	8000f4c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2210      	movs	r2, #16
 8000fae:	2100      	movs	r1, #0
 8000fb0:	a806      	add	r0, sp, #24
 8000fb2:	f000 f9a7 	bl	8001304 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <main+0x114>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000fbe:	483e      	ldr	r0, [pc, #248]	; (80010b8 <main+0x118>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	f042 0210 	orr.w	r2, r2, #16
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : led13_Pin */
  GPIO_InitStruct.Pin = led13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	f002 0210 	and.w	r2, r2, #16
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8000fd4:	4d39      	ldr	r5, [pc, #228]	; (80010bc <main+0x11c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	699a      	ldr	r2, [r3, #24]
 8000fde:	f002 0220 	and.w	r2, r2, #32
 8000fe2:	9201      	str	r2, [sp, #4]
 8000fe4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	f042 0204 	orr.w	r2, r2, #4
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	699a      	ldr	r2, [r3, #24]
 8000ff0:	f002 0204 	and.w	r2, r2, #4
 8000ff4:	9202      	str	r2, [sp, #8]
 8000ff6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	f042 0208 	orr.w	r2, r2, #8
 8000ffe:	619a      	str	r2, [r3, #24]
 8001000:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	9303      	str	r3, [sp, #12]
 800100a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 800100c:	f7ff fa40 	bl	8000490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = led13_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2302      	movs	r3, #2
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 800101c:	a906      	add	r1, sp, #24
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <main+0x118>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8001024:	f7ff f954 	bl	80002d0 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8001028:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0x120>)
  huart1.Init.BaudRate = 115200;
 800102e:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <main+0x124>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001030:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001032:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001036:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800103a:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103c:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001042:	f7ff ff47 	bl	8000ed4 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	2210      	movs	r2, #16
 8001048:	4621      	mov	r1, r4
 800104a:	a806      	add	r0, sp, #24
 800104c:	f000 f95a 	bl	8001304 <memset>
  htim1.Init.Prescaler = 720;
 8001050:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8001054:	491c      	ldr	r1, [pc, #112]	; (80010c8 <main+0x128>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001056:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 720;
 8001058:	e885 000a 	stmia.w	r5, {r1, r3}
  htim1.Init.Period = 65000;
 800105c:	f64f 53e8 	movw	r3, #65000	; 0xfde8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65000;
 8001062:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001066:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	9404      	str	r4, [sp, #16]
 800106c:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	f7ff fe55 	bl	8000d1c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001076:	a906      	add	r1, sp, #24
 8001078:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107a:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107c:	f7ff fcb7 	bl	80009ee <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001080:	a904      	add	r1, sp, #16
 8001082:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	f7ff fe62 	bl	8000d50 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim1);
 800108c:	4628      	mov	r0, r5
 800108e:	f7ff fca3 	bl	80009d8 <HAL_TIM_Base_Start_IT>
  printf("Application start.\n");
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <main+0x12c>)
 8001094:	f000 f9b2 	bl	80013fc <puts>
	  printf("Hello World %d\n", isa++);
 8001098:	4c0d      	ldr	r4, [pc, #52]	; (80010d0 <main+0x130>)
 800109a:	4d0e      	ldr	r5, [pc, #56]	; (80010d4 <main+0x134>)
 800109c:	6821      	ldr	r1, [r4, #0]
 800109e:	4628      	mov	r0, r5
 80010a0:	1c4b      	adds	r3, r1, #1
 80010a2:	6023      	str	r3, [r4, #0]
 80010a4:	f000 f936 	bl	8001314 <iprintf>
	  HAL_Delay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ac:	f7ff f896 	bl	80001dc <HAL_Delay>
 80010b0:	e7f4      	b.n	800109c <main+0xfc>
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40011000 	.word	0x40011000
 80010bc:	200000e0 	.word	0x200000e0
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40012c00 	.word	0x40012c00
 80010cc:	08002278 	.word	0x08002278
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	0800228b 	.word	0x0800228b

080010d8 <_write>:
}

/* USER CODE BEGIN 4 */
////////////////////////////////////// вывод в uart //////////////////////////////////////////////
int _write(int32_t file, uint8_t *ptr, int32_t len) // instrumentation trace macrocell (ITM)
{
 80010d8:	b510      	push	{r4, lr}
	int i;
	for(i = 0; i < len; i++)
 80010da:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010dc:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80010e0:	4293      	cmp	r3, r2
 80010e2:	db01      	blt.n	80010e8 <_write+0x10>
		ITM_SendChar(*ptr++);

	return len;
}
 80010e4:	4610      	mov	r0, r2
 80010e6:	bd10      	pop	{r4, pc}
 80010e8:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80010ec:	07c0      	lsls	r0, r0, #31
 80010ee:	d503      	bpl.n	80010f8 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010f0:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f4:	07c0      	lsls	r0, r0, #31
 80010f6:	d402      	bmi.n	80010fe <_write+0x26>
	for(i = 0; i < len; i++)
 80010f8:	3301      	adds	r3, #1
 80010fa:	e7f1      	b.n	80010e0 <_write+0x8>
 80010fc:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	2800      	cmp	r0, #0
 8001102:	d0fb      	beq.n	80010fc <_write+0x24>
		ITM_SendChar(*ptr++);
 8001104:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001106:	7020      	strb	r0, [r4, #0]
 8001108:	e7f6      	b.n	80010f8 <_write+0x20>
	...

0800110c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_MspInit+0x3c>)
{
 800110e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001110:	699a      	ldr	r2, [r3, #24]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	619a      	str	r2, [r3, #24]
 8001118:	699a      	ldr	r2, [r3, #24]
 800111a:	f002 0201 	and.w	r2, r2, #1
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001128:	61da      	str	r2, [r3, #28]
 800112a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001136:	6853      	ldr	r3, [r2, #4]
 8001138:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800113c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001140:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	b002      	add	sp, #8
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_Base_MspInit+0x38>)
 8001154:	6802      	ldr	r2, [r0, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d112      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800115e:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001160:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001166:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116a:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800116c:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001176:	f7ff f855 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800117a:	2019      	movs	r0, #25
 800117c:	f7ff f886 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001180:	b003      	add	sp, #12
 8001182:	f85d fb04 	ldr.w	pc, [sp], #4
 8001186:	bf00      	nop
 8001188:	40012c00 	.word	0x40012c00

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b510      	push	{r4, lr}
 800118e:	4604      	mov	r4, r0
 8001190:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	2210      	movs	r2, #16
 8001194:	2100      	movs	r1, #0
 8001196:	a802      	add	r0, sp, #8
 8001198:	f000 f8b4 	bl	8001304 <memset>
  if(huart->Instance==USART1)
 800119c:	6822      	ldr	r2, [r4, #0]
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_UART_MspInit+0x70>)
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d128      	bne.n	80011f6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80011a8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011ba:	9200      	str	r2, [sp, #0]
 80011bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	f042 0204 	orr.w	r2, r2, #4
 80011c4:	619a      	str	r2, [r3, #24]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f7ff f877 	bl	80002d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	a902      	add	r1, sp, #8
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f7ff f86d 	bl	80002d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011f6:	b006      	add	sp, #24
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	bf00      	nop
 80011fc:	40013800 	.word	0x40013800
 8001200:	40010800 	.word	0x40010800

08001204 <NMI_Handler>:
 8001204:	4770      	bx	lr

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	e7fe      	b.n	800120a <BusFault_Handler>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler>

0800120e <SVC_Handler>:
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f7fe bfd0 	b.w	80001b8 <HAL_IncTick>

08001218 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001218:	4801      	ldr	r0, [pc, #4]	; (8001220 <TIM1_UP_IRQHandler+0x8>)
 800121a:	f7ff bca5 	b.w	8000b68 <HAL_TIM_IRQHandler>
 800121e:	bf00      	nop
 8001220:	200000e0 	.word	0x200000e0

08001224 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SystemInit+0x40>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <SystemInit+0x44>)
 8001232:	400a      	ands	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800123c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001240:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001248:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001250:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001252:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001256:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <SystemInit+0x48>)
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	f8ff0000 	.word	0xf8ff0000
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001270:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001272:	e003      	b.n	800127c <LoopCopyDataInit>

08001274 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001276:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001278:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800127a:	3104      	adds	r1, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800127c:	480a      	ldr	r0, [pc, #40]	; (80012a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001280:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001284:	d3f6      	bcc.n	8001274 <CopyDataInit>
  ldr r2, =_sbss
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001288:	e002      	b.n	8001290 <LoopFillZerobss>

0800128a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800128c:	f842 3b04 	str.w	r3, [r2], #4

08001290 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001294:	d3f9      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001296:	f7ff ffc5 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f000 f80f 	bl	80012bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800129e:	f7ff fe7f 	bl	8000fa0 <main>
  bx lr
 80012a2:	4770      	bx	lr
  ldr r3, =_sidata
 80012a4:	08002354 	.word	0x08002354
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012ac:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80012b0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80012b4:	20000124 	.word	0x20000124

080012b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC1_2_IRQHandler>
	...

080012bc <__libc_init_array>:
 80012bc:	b570      	push	{r4, r5, r6, lr}
 80012be:	2500      	movs	r5, #0
 80012c0:	4e0c      	ldr	r6, [pc, #48]	; (80012f4 <__libc_init_array+0x38>)
 80012c2:	4c0d      	ldr	r4, [pc, #52]	; (80012f8 <__libc_init_array+0x3c>)
 80012c4:	1ba4      	subs	r4, r4, r6
 80012c6:	10a4      	asrs	r4, r4, #2
 80012c8:	42a5      	cmp	r5, r4
 80012ca:	d109      	bne.n	80012e0 <__libc_init_array+0x24>
 80012cc:	f000 ffc0 	bl	8002250 <_init>
 80012d0:	2500      	movs	r5, #0
 80012d2:	4e0a      	ldr	r6, [pc, #40]	; (80012fc <__libc_init_array+0x40>)
 80012d4:	4c0a      	ldr	r4, [pc, #40]	; (8001300 <__libc_init_array+0x44>)
 80012d6:	1ba4      	subs	r4, r4, r6
 80012d8:	10a4      	asrs	r4, r4, #2
 80012da:	42a5      	cmp	r5, r4
 80012dc:	d105      	bne.n	80012ea <__libc_init_array+0x2e>
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e4:	4798      	blx	r3
 80012e6:	3501      	adds	r5, #1
 80012e8:	e7ee      	b.n	80012c8 <__libc_init_array+0xc>
 80012ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012ee:	4798      	blx	r3
 80012f0:	3501      	adds	r5, #1
 80012f2:	e7f2      	b.n	80012da <__libc_init_array+0x1e>
 80012f4:	0800234c 	.word	0x0800234c
 80012f8:	0800234c 	.word	0x0800234c
 80012fc:	0800234c 	.word	0x0800234c
 8001300:	08002350 	.word	0x08002350

08001304 <memset>:
 8001304:	4603      	mov	r3, r0
 8001306:	4402      	add	r2, r0
 8001308:	4293      	cmp	r3, r2
 800130a:	d100      	bne.n	800130e <memset+0xa>
 800130c:	4770      	bx	lr
 800130e:	f803 1b01 	strb.w	r1, [r3], #1
 8001312:	e7f9      	b.n	8001308 <memset+0x4>

08001314 <iprintf>:
 8001314:	b40f      	push	{r0, r1, r2, r3}
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <iprintf+0x2c>)
 8001318:	b513      	push	{r0, r1, r4, lr}
 800131a:	681c      	ldr	r4, [r3, #0]
 800131c:	b124      	cbz	r4, 8001328 <iprintf+0x14>
 800131e:	69a3      	ldr	r3, [r4, #24]
 8001320:	b913      	cbnz	r3, 8001328 <iprintf+0x14>
 8001322:	4620      	mov	r0, r4
 8001324:	f000 fa24 	bl	8001770 <__sinit>
 8001328:	ab05      	add	r3, sp, #20
 800132a:	9a04      	ldr	r2, [sp, #16]
 800132c:	68a1      	ldr	r1, [r4, #8]
 800132e:	4620      	mov	r0, r4
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f000 fbdd 	bl	8001af0 <_vfiprintf_r>
 8001336:	b002      	add	sp, #8
 8001338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800133c:	b004      	add	sp, #16
 800133e:	4770      	bx	lr
 8001340:	2000000c 	.word	0x2000000c

08001344 <_puts_r>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	460e      	mov	r6, r1
 8001348:	4605      	mov	r5, r0
 800134a:	b118      	cbz	r0, 8001354 <_puts_r+0x10>
 800134c:	6983      	ldr	r3, [r0, #24]
 800134e:	b90b      	cbnz	r3, 8001354 <_puts_r+0x10>
 8001350:	f000 fa0e 	bl	8001770 <__sinit>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	68ac      	ldr	r4, [r5, #8]
 8001358:	b913      	cbnz	r3, 8001360 <_puts_r+0x1c>
 800135a:	4628      	mov	r0, r5
 800135c:	f000 fa08 	bl	8001770 <__sinit>
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <_puts_r+0xac>)
 8001362:	429c      	cmp	r4, r3
 8001364:	d117      	bne.n	8001396 <_puts_r+0x52>
 8001366:	686c      	ldr	r4, [r5, #4]
 8001368:	89a3      	ldrh	r3, [r4, #12]
 800136a:	071b      	lsls	r3, r3, #28
 800136c:	d51d      	bpl.n	80013aa <_puts_r+0x66>
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	b1db      	cbz	r3, 80013aa <_puts_r+0x66>
 8001372:	3e01      	subs	r6, #1
 8001374:	68a3      	ldr	r3, [r4, #8]
 8001376:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800137a:	3b01      	subs	r3, #1
 800137c:	60a3      	str	r3, [r4, #8]
 800137e:	b9e9      	cbnz	r1, 80013bc <_puts_r+0x78>
 8001380:	2b00      	cmp	r3, #0
 8001382:	da2e      	bge.n	80013e2 <_puts_r+0x9e>
 8001384:	4622      	mov	r2, r4
 8001386:	210a      	movs	r1, #10
 8001388:	4628      	mov	r0, r5
 800138a:	f000 f83f 	bl	800140c <__swbuf_r>
 800138e:	3001      	adds	r0, #1
 8001390:	d011      	beq.n	80013b6 <_puts_r+0x72>
 8001392:	200a      	movs	r0, #10
 8001394:	bd70      	pop	{r4, r5, r6, pc}
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <_puts_r+0xb0>)
 8001398:	429c      	cmp	r4, r3
 800139a:	d101      	bne.n	80013a0 <_puts_r+0x5c>
 800139c:	68ac      	ldr	r4, [r5, #8]
 800139e:	e7e3      	b.n	8001368 <_puts_r+0x24>
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_puts_r+0xb4>)
 80013a2:	429c      	cmp	r4, r3
 80013a4:	bf08      	it	eq
 80013a6:	68ec      	ldreq	r4, [r5, #12]
 80013a8:	e7de      	b.n	8001368 <_puts_r+0x24>
 80013aa:	4621      	mov	r1, r4
 80013ac:	4628      	mov	r0, r5
 80013ae:	f000 f87f 	bl	80014b0 <__swsetup_r>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d0dd      	beq.n	8001372 <_puts_r+0x2e>
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da04      	bge.n	80013ca <_puts_r+0x86>
 80013c0:	69a2      	ldr	r2, [r4, #24]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	db06      	blt.n	80013d4 <_puts_r+0x90>
 80013c6:	290a      	cmp	r1, #10
 80013c8:	d004      	beq.n	80013d4 <_puts_r+0x90>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	6022      	str	r2, [r4, #0]
 80013d0:	7019      	strb	r1, [r3, #0]
 80013d2:	e7cf      	b.n	8001374 <_puts_r+0x30>
 80013d4:	4622      	mov	r2, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f000 f818 	bl	800140c <__swbuf_r>
 80013dc:	3001      	adds	r0, #1
 80013de:	d1c9      	bne.n	8001374 <_puts_r+0x30>
 80013e0:	e7e9      	b.n	80013b6 <_puts_r+0x72>
 80013e2:	200a      	movs	r0, #10
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	6022      	str	r2, [r4, #0]
 80013ea:	7018      	strb	r0, [r3, #0]
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	bf00      	nop
 80013f0:	080022d4 	.word	0x080022d4
 80013f4:	080022f4 	.word	0x080022f4
 80013f8:	080022b4 	.word	0x080022b4

080013fc <puts>:
 80013fc:	4b02      	ldr	r3, [pc, #8]	; (8001408 <puts+0xc>)
 80013fe:	4601      	mov	r1, r0
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f7ff bf9f 	b.w	8001344 <_puts_r>
 8001406:	bf00      	nop
 8001408:	2000000c 	.word	0x2000000c

0800140c <__swbuf_r>:
 800140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140e:	460e      	mov	r6, r1
 8001410:	4614      	mov	r4, r2
 8001412:	4605      	mov	r5, r0
 8001414:	b118      	cbz	r0, 800141e <__swbuf_r+0x12>
 8001416:	6983      	ldr	r3, [r0, #24]
 8001418:	b90b      	cbnz	r3, 800141e <__swbuf_r+0x12>
 800141a:	f000 f9a9 	bl	8001770 <__sinit>
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <__swbuf_r+0x98>)
 8001420:	429c      	cmp	r4, r3
 8001422:	d12a      	bne.n	800147a <__swbuf_r+0x6e>
 8001424:	686c      	ldr	r4, [r5, #4]
 8001426:	69a3      	ldr	r3, [r4, #24]
 8001428:	60a3      	str	r3, [r4, #8]
 800142a:	89a3      	ldrh	r3, [r4, #12]
 800142c:	071a      	lsls	r2, r3, #28
 800142e:	d52e      	bpl.n	800148e <__swbuf_r+0x82>
 8001430:	6923      	ldr	r3, [r4, #16]
 8001432:	b363      	cbz	r3, 800148e <__swbuf_r+0x82>
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	6820      	ldr	r0, [r4, #0]
 8001438:	b2f6      	uxtb	r6, r6
 800143a:	1ac0      	subs	r0, r0, r3
 800143c:	6963      	ldr	r3, [r4, #20]
 800143e:	4637      	mov	r7, r6
 8001440:	4298      	cmp	r0, r3
 8001442:	db04      	blt.n	800144e <__swbuf_r+0x42>
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f000 f928 	bl	800169c <_fflush_r>
 800144c:	bb28      	cbnz	r0, 800149a <__swbuf_r+0x8e>
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	3001      	adds	r0, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	60a3      	str	r3, [r4, #8]
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	6022      	str	r2, [r4, #0]
 800145c:	701e      	strb	r6, [r3, #0]
 800145e:	6963      	ldr	r3, [r4, #20]
 8001460:	4298      	cmp	r0, r3
 8001462:	d004      	beq.n	800146e <__swbuf_r+0x62>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	07db      	lsls	r3, r3, #31
 8001468:	d519      	bpl.n	800149e <__swbuf_r+0x92>
 800146a:	2e0a      	cmp	r6, #10
 800146c:	d117      	bne.n	800149e <__swbuf_r+0x92>
 800146e:	4621      	mov	r1, r4
 8001470:	4628      	mov	r0, r5
 8001472:	f000 f913 	bl	800169c <_fflush_r>
 8001476:	b190      	cbz	r0, 800149e <__swbuf_r+0x92>
 8001478:	e00f      	b.n	800149a <__swbuf_r+0x8e>
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <__swbuf_r+0x9c>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d101      	bne.n	8001484 <__swbuf_r+0x78>
 8001480:	68ac      	ldr	r4, [r5, #8]
 8001482:	e7d0      	b.n	8001426 <__swbuf_r+0x1a>
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <__swbuf_r+0xa0>)
 8001486:	429c      	cmp	r4, r3
 8001488:	bf08      	it	eq
 800148a:	68ec      	ldreq	r4, [r5, #12]
 800148c:	e7cb      	b.n	8001426 <__swbuf_r+0x1a>
 800148e:	4621      	mov	r1, r4
 8001490:	4628      	mov	r0, r5
 8001492:	f000 f80d 	bl	80014b0 <__swsetup_r>
 8001496:	2800      	cmp	r0, #0
 8001498:	d0cc      	beq.n	8001434 <__swbuf_r+0x28>
 800149a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800149e:	4638      	mov	r0, r7
 80014a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	080022d4 	.word	0x080022d4
 80014a8:	080022f4 	.word	0x080022f4
 80014ac:	080022b4 	.word	0x080022b4

080014b0 <__swsetup_r>:
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <__swsetup_r+0xcc>)
 80014b2:	b570      	push	{r4, r5, r6, lr}
 80014b4:	681d      	ldr	r5, [r3, #0]
 80014b6:	4606      	mov	r6, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	b125      	cbz	r5, 80014c6 <__swsetup_r+0x16>
 80014bc:	69ab      	ldr	r3, [r5, #24]
 80014be:	b913      	cbnz	r3, 80014c6 <__swsetup_r+0x16>
 80014c0:	4628      	mov	r0, r5
 80014c2:	f000 f955 	bl	8001770 <__sinit>
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <__swsetup_r+0xd0>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d10f      	bne.n	80014ec <__swsetup_r+0x3c>
 80014cc:	686c      	ldr	r4, [r5, #4]
 80014ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	0715      	lsls	r5, r2, #28
 80014d6:	d42c      	bmi.n	8001532 <__swsetup_r+0x82>
 80014d8:	06d0      	lsls	r0, r2, #27
 80014da:	d411      	bmi.n	8001500 <__swsetup_r+0x50>
 80014dc:	2209      	movs	r2, #9
 80014de:	6032      	str	r2, [r6, #0]
 80014e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <__swsetup_r+0xd4>)
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d101      	bne.n	80014f6 <__swsetup_r+0x46>
 80014f2:	68ac      	ldr	r4, [r5, #8]
 80014f4:	e7eb      	b.n	80014ce <__swsetup_r+0x1e>
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <__swsetup_r+0xd8>)
 80014f8:	429c      	cmp	r4, r3
 80014fa:	bf08      	it	eq
 80014fc:	68ec      	ldreq	r4, [r5, #12]
 80014fe:	e7e6      	b.n	80014ce <__swsetup_r+0x1e>
 8001500:	0751      	lsls	r1, r2, #29
 8001502:	d512      	bpl.n	800152a <__swsetup_r+0x7a>
 8001504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001506:	b141      	cbz	r1, 800151a <__swsetup_r+0x6a>
 8001508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800150c:	4299      	cmp	r1, r3
 800150e:	d002      	beq.n	8001516 <__swsetup_r+0x66>
 8001510:	4630      	mov	r0, r6
 8001512:	f000 fa1b 	bl	800194c <_free_r>
 8001516:	2300      	movs	r3, #0
 8001518:	6363      	str	r3, [r4, #52]	; 0x34
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001520:	81a3      	strh	r3, [r4, #12]
 8001522:	2300      	movs	r3, #0
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	81a3      	strh	r3, [r4, #12]
 8001532:	6923      	ldr	r3, [r4, #16]
 8001534:	b94b      	cbnz	r3, 800154a <__swsetup_r+0x9a>
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800153c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001540:	d003      	beq.n	800154a <__swsetup_r+0x9a>
 8001542:	4621      	mov	r1, r4
 8001544:	4630      	mov	r0, r6
 8001546:	f000 f9c1 	bl	80018cc <__smakebuf_r>
 800154a:	89a2      	ldrh	r2, [r4, #12]
 800154c:	f012 0301 	ands.w	r3, r2, #1
 8001550:	d00c      	beq.n	800156c <__swsetup_r+0xbc>
 8001552:	2300      	movs	r3, #0
 8001554:	60a3      	str	r3, [r4, #8]
 8001556:	6963      	ldr	r3, [r4, #20]
 8001558:	425b      	negs	r3, r3
 800155a:	61a3      	str	r3, [r4, #24]
 800155c:	6923      	ldr	r3, [r4, #16]
 800155e:	b953      	cbnz	r3, 8001576 <__swsetup_r+0xc6>
 8001560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001564:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001568:	d1ba      	bne.n	80014e0 <__swsetup_r+0x30>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	0792      	lsls	r2, r2, #30
 800156e:	bf58      	it	pl
 8001570:	6963      	ldrpl	r3, [r4, #20]
 8001572:	60a3      	str	r3, [r4, #8]
 8001574:	e7f2      	b.n	800155c <__swsetup_r+0xac>
 8001576:	2000      	movs	r0, #0
 8001578:	e7f7      	b.n	800156a <__swsetup_r+0xba>
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	080022d4 	.word	0x080022d4
 8001584:	080022f4 	.word	0x080022f4
 8001588:	080022b4 	.word	0x080022b4

0800158c <__sflush_r>:
 800158c:	898a      	ldrh	r2, [r1, #12]
 800158e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001592:	4605      	mov	r5, r0
 8001594:	0710      	lsls	r0, r2, #28
 8001596:	460c      	mov	r4, r1
 8001598:	d45a      	bmi.n	8001650 <__sflush_r+0xc4>
 800159a:	684b      	ldr	r3, [r1, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dc05      	bgt.n	80015ac <__sflush_r+0x20>
 80015a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dc02      	bgt.n	80015ac <__sflush_r+0x20>
 80015a6:	2000      	movs	r0, #0
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d0f9      	beq.n	80015a6 <__sflush_r+0x1a>
 80015b2:	2300      	movs	r3, #0
 80015b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015b8:	682f      	ldr	r7, [r5, #0]
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	d033      	beq.n	8001626 <__sflush_r+0x9a>
 80015be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	075a      	lsls	r2, r3, #29
 80015c4:	d505      	bpl.n	80015d2 <__sflush_r+0x46>
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015cc:	b10b      	cbz	r3, 80015d2 <__sflush_r+0x46>
 80015ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	2300      	movs	r3, #0
 80015d4:	4602      	mov	r2, r0
 80015d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015d8:	6a21      	ldr	r1, [r4, #32]
 80015da:	4628      	mov	r0, r5
 80015dc:	47b0      	blx	r6
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	d106      	bne.n	80015f2 <__sflush_r+0x66>
 80015e4:	6829      	ldr	r1, [r5, #0]
 80015e6:	291d      	cmp	r1, #29
 80015e8:	d84b      	bhi.n	8001682 <__sflush_r+0xf6>
 80015ea:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <__sflush_r+0x10c>)
 80015ec:	40ca      	lsrs	r2, r1
 80015ee:	07d6      	lsls	r6, r2, #31
 80015f0:	d547      	bpl.n	8001682 <__sflush_r+0xf6>
 80015f2:	2200      	movs	r2, #0
 80015f4:	6062      	str	r2, [r4, #4]
 80015f6:	6922      	ldr	r2, [r4, #16]
 80015f8:	04d9      	lsls	r1, r3, #19
 80015fa:	6022      	str	r2, [r4, #0]
 80015fc:	d504      	bpl.n	8001608 <__sflush_r+0x7c>
 80015fe:	1c42      	adds	r2, r0, #1
 8001600:	d101      	bne.n	8001606 <__sflush_r+0x7a>
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	b903      	cbnz	r3, 8001608 <__sflush_r+0x7c>
 8001606:	6560      	str	r0, [r4, #84]	; 0x54
 8001608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800160a:	602f      	str	r7, [r5, #0]
 800160c:	2900      	cmp	r1, #0
 800160e:	d0ca      	beq.n	80015a6 <__sflush_r+0x1a>
 8001610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001614:	4299      	cmp	r1, r3
 8001616:	d002      	beq.n	800161e <__sflush_r+0x92>
 8001618:	4628      	mov	r0, r5
 800161a:	f000 f997 	bl	800194c <_free_r>
 800161e:	2000      	movs	r0, #0
 8001620:	6360      	str	r0, [r4, #52]	; 0x34
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001626:	6a21      	ldr	r1, [r4, #32]
 8001628:	2301      	movs	r3, #1
 800162a:	4628      	mov	r0, r5
 800162c:	47b0      	blx	r6
 800162e:	1c41      	adds	r1, r0, #1
 8001630:	d1c6      	bne.n	80015c0 <__sflush_r+0x34>
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0c3      	beq.n	80015c0 <__sflush_r+0x34>
 8001638:	2b1d      	cmp	r3, #29
 800163a:	d001      	beq.n	8001640 <__sflush_r+0xb4>
 800163c:	2b16      	cmp	r3, #22
 800163e:	d101      	bne.n	8001644 <__sflush_r+0xb8>
 8001640:	602f      	str	r7, [r5, #0]
 8001642:	e7b0      	b.n	80015a6 <__sflush_r+0x1a>
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164a:	81a3      	strh	r3, [r4, #12]
 800164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001650:	690f      	ldr	r7, [r1, #16]
 8001652:	2f00      	cmp	r7, #0
 8001654:	d0a7      	beq.n	80015a6 <__sflush_r+0x1a>
 8001656:	0793      	lsls	r3, r2, #30
 8001658:	bf18      	it	ne
 800165a:	2300      	movne	r3, #0
 800165c:	680e      	ldr	r6, [r1, #0]
 800165e:	bf08      	it	eq
 8001660:	694b      	ldreq	r3, [r1, #20]
 8001662:	eba6 0807 	sub.w	r8, r6, r7
 8001666:	600f      	str	r7, [r1, #0]
 8001668:	608b      	str	r3, [r1, #8]
 800166a:	f1b8 0f00 	cmp.w	r8, #0
 800166e:	dd9a      	ble.n	80015a6 <__sflush_r+0x1a>
 8001670:	4643      	mov	r3, r8
 8001672:	463a      	mov	r2, r7
 8001674:	6a21      	ldr	r1, [r4, #32]
 8001676:	4628      	mov	r0, r5
 8001678:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800167a:	47b0      	blx	r6
 800167c:	2800      	cmp	r0, #0
 800167e:	dc07      	bgt.n	8001690 <__sflush_r+0x104>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	81a3      	strh	r3, [r4, #12]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001690:	4407      	add	r7, r0
 8001692:	eba8 0800 	sub.w	r8, r8, r0
 8001696:	e7e8      	b.n	800166a <__sflush_r+0xde>
 8001698:	20400001 	.word	0x20400001

0800169c <_fflush_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	690b      	ldr	r3, [r1, #16]
 80016a0:	4605      	mov	r5, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	b1db      	cbz	r3, 80016de <_fflush_r+0x42>
 80016a6:	b118      	cbz	r0, 80016b0 <_fflush_r+0x14>
 80016a8:	6983      	ldr	r3, [r0, #24]
 80016aa:	b90b      	cbnz	r3, 80016b0 <_fflush_r+0x14>
 80016ac:	f000 f860 	bl	8001770 <__sinit>
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <_fflush_r+0x48>)
 80016b2:	429c      	cmp	r4, r3
 80016b4:	d109      	bne.n	80016ca <_fflush_r+0x2e>
 80016b6:	686c      	ldr	r4, [r5, #4]
 80016b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016bc:	b17b      	cbz	r3, 80016de <_fflush_r+0x42>
 80016be:	4621      	mov	r1, r4
 80016c0:	4628      	mov	r0, r5
 80016c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c6:	f7ff bf61 	b.w	800158c <__sflush_r>
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_fflush_r+0x4c>)
 80016cc:	429c      	cmp	r4, r3
 80016ce:	d101      	bne.n	80016d4 <_fflush_r+0x38>
 80016d0:	68ac      	ldr	r4, [r5, #8]
 80016d2:	e7f1      	b.n	80016b8 <_fflush_r+0x1c>
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <_fflush_r+0x50>)
 80016d6:	429c      	cmp	r4, r3
 80016d8:	bf08      	it	eq
 80016da:	68ec      	ldreq	r4, [r5, #12]
 80016dc:	e7ec      	b.n	80016b8 <_fflush_r+0x1c>
 80016de:	2000      	movs	r0, #0
 80016e0:	bd38      	pop	{r3, r4, r5, pc}
 80016e2:	bf00      	nop
 80016e4:	080022d4 	.word	0x080022d4
 80016e8:	080022f4 	.word	0x080022f4
 80016ec:	080022b4 	.word	0x080022b4

080016f0 <_cleanup_r>:
 80016f0:	4901      	ldr	r1, [pc, #4]	; (80016f8 <_cleanup_r+0x8>)
 80016f2:	f000 b8a9 	b.w	8001848 <_fwalk_reent>
 80016f6:	bf00      	nop
 80016f8:	0800169d 	.word	0x0800169d

080016fc <std.isra.0>:
 80016fc:	2300      	movs	r3, #0
 80016fe:	b510      	push	{r4, lr}
 8001700:	4604      	mov	r4, r0
 8001702:	6003      	str	r3, [r0, #0]
 8001704:	6043      	str	r3, [r0, #4]
 8001706:	6083      	str	r3, [r0, #8]
 8001708:	8181      	strh	r1, [r0, #12]
 800170a:	6643      	str	r3, [r0, #100]	; 0x64
 800170c:	81c2      	strh	r2, [r0, #14]
 800170e:	6103      	str	r3, [r0, #16]
 8001710:	6143      	str	r3, [r0, #20]
 8001712:	6183      	str	r3, [r0, #24]
 8001714:	4619      	mov	r1, r3
 8001716:	2208      	movs	r2, #8
 8001718:	305c      	adds	r0, #92	; 0x5c
 800171a:	f7ff fdf3 	bl	8001304 <memset>
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <std.isra.0+0x38>)
 8001720:	6224      	str	r4, [r4, #32]
 8001722:	6263      	str	r3, [r4, #36]	; 0x24
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <std.isra.0+0x3c>)
 8001726:	62a3      	str	r3, [r4, #40]	; 0x28
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <std.isra.0+0x40>)
 800172a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <std.isra.0+0x44>)
 800172e:	6323      	str	r3, [r4, #48]	; 0x30
 8001730:	bd10      	pop	{r4, pc}
 8001732:	bf00      	nop
 8001734:	0800206d 	.word	0x0800206d
 8001738:	0800208f 	.word	0x0800208f
 800173c:	080020c7 	.word	0x080020c7
 8001740:	080020eb 	.word	0x080020eb

08001744 <__sfmoreglue>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	2568      	movs	r5, #104	; 0x68
 8001748:	1e4a      	subs	r2, r1, #1
 800174a:	4355      	muls	r5, r2
 800174c:	460e      	mov	r6, r1
 800174e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001752:	f000 f947 	bl	80019e4 <_malloc_r>
 8001756:	4604      	mov	r4, r0
 8001758:	b140      	cbz	r0, 800176c <__sfmoreglue+0x28>
 800175a:	2100      	movs	r1, #0
 800175c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001760:	300c      	adds	r0, #12
 8001762:	60a0      	str	r0, [r4, #8]
 8001764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001768:	f7ff fdcc 	bl	8001304 <memset>
 800176c:	4620      	mov	r0, r4
 800176e:	bd70      	pop	{r4, r5, r6, pc}

08001770 <__sinit>:
 8001770:	6983      	ldr	r3, [r0, #24]
 8001772:	b510      	push	{r4, lr}
 8001774:	4604      	mov	r4, r0
 8001776:	bb33      	cbnz	r3, 80017c6 <__sinit+0x56>
 8001778:	6483      	str	r3, [r0, #72]	; 0x48
 800177a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800177c:	6503      	str	r3, [r0, #80]	; 0x50
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <__sinit+0x58>)
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <__sinit+0x5c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6282      	str	r2, [r0, #40]	; 0x28
 8001786:	4298      	cmp	r0, r3
 8001788:	bf04      	itt	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	6183      	streq	r3, [r0, #24]
 800178e:	f000 f81f 	bl	80017d0 <__sfp>
 8001792:	6060      	str	r0, [r4, #4]
 8001794:	4620      	mov	r0, r4
 8001796:	f000 f81b 	bl	80017d0 <__sfp>
 800179a:	60a0      	str	r0, [r4, #8]
 800179c:	4620      	mov	r0, r4
 800179e:	f000 f817 	bl	80017d0 <__sfp>
 80017a2:	2200      	movs	r2, #0
 80017a4:	60e0      	str	r0, [r4, #12]
 80017a6:	2104      	movs	r1, #4
 80017a8:	6860      	ldr	r0, [r4, #4]
 80017aa:	f7ff ffa7 	bl	80016fc <std.isra.0>
 80017ae:	2201      	movs	r2, #1
 80017b0:	2109      	movs	r1, #9
 80017b2:	68a0      	ldr	r0, [r4, #8]
 80017b4:	f7ff ffa2 	bl	80016fc <std.isra.0>
 80017b8:	2202      	movs	r2, #2
 80017ba:	2112      	movs	r1, #18
 80017bc:	68e0      	ldr	r0, [r4, #12]
 80017be:	f7ff ff9d 	bl	80016fc <std.isra.0>
 80017c2:	2301      	movs	r3, #1
 80017c4:	61a3      	str	r3, [r4, #24]
 80017c6:	bd10      	pop	{r4, pc}
 80017c8:	08002314 	.word	0x08002314
 80017cc:	080016f1 	.word	0x080016f1

080017d0 <__sfp>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <__sfp+0x74>)
 80017d4:	4607      	mov	r7, r0
 80017d6:	681e      	ldr	r6, [r3, #0]
 80017d8:	69b3      	ldr	r3, [r6, #24]
 80017da:	b913      	cbnz	r3, 80017e2 <__sfp+0x12>
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff ffc7 	bl	8001770 <__sinit>
 80017e2:	3648      	adds	r6, #72	; 0x48
 80017e4:	68b4      	ldr	r4, [r6, #8]
 80017e6:	6873      	ldr	r3, [r6, #4]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	d503      	bpl.n	80017f4 <__sfp+0x24>
 80017ec:	6833      	ldr	r3, [r6, #0]
 80017ee:	b133      	cbz	r3, 80017fe <__sfp+0x2e>
 80017f0:	6836      	ldr	r6, [r6, #0]
 80017f2:	e7f7      	b.n	80017e4 <__sfp+0x14>
 80017f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017f8:	b16d      	cbz	r5, 8001816 <__sfp+0x46>
 80017fa:	3468      	adds	r4, #104	; 0x68
 80017fc:	e7f4      	b.n	80017e8 <__sfp+0x18>
 80017fe:	2104      	movs	r1, #4
 8001800:	4638      	mov	r0, r7
 8001802:	f7ff ff9f 	bl	8001744 <__sfmoreglue>
 8001806:	6030      	str	r0, [r6, #0]
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f1      	bne.n	80017f0 <__sfp+0x20>
 800180c:	230c      	movs	r3, #12
 800180e:	4604      	mov	r4, r0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4620      	mov	r0, r4
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	81e3      	strh	r3, [r4, #14]
 800181c:	2301      	movs	r3, #1
 800181e:	6665      	str	r5, [r4, #100]	; 0x64
 8001820:	81a3      	strh	r3, [r4, #12]
 8001822:	6025      	str	r5, [r4, #0]
 8001824:	60a5      	str	r5, [r4, #8]
 8001826:	6065      	str	r5, [r4, #4]
 8001828:	6125      	str	r5, [r4, #16]
 800182a:	6165      	str	r5, [r4, #20]
 800182c:	61a5      	str	r5, [r4, #24]
 800182e:	2208      	movs	r2, #8
 8001830:	4629      	mov	r1, r5
 8001832:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001836:	f7ff fd65 	bl	8001304 <memset>
 800183a:	6365      	str	r5, [r4, #52]	; 0x34
 800183c:	63a5      	str	r5, [r4, #56]	; 0x38
 800183e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001840:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001842:	e7e6      	b.n	8001812 <__sfp+0x42>
 8001844:	08002314 	.word	0x08002314

08001848 <_fwalk_reent>:
 8001848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800184c:	4680      	mov	r8, r0
 800184e:	4689      	mov	r9, r1
 8001850:	2600      	movs	r6, #0
 8001852:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001856:	b914      	cbnz	r4, 800185e <_fwalk_reent+0x16>
 8001858:	4630      	mov	r0, r6
 800185a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800185e:	68a5      	ldr	r5, [r4, #8]
 8001860:	6867      	ldr	r7, [r4, #4]
 8001862:	3f01      	subs	r7, #1
 8001864:	d501      	bpl.n	800186a <_fwalk_reent+0x22>
 8001866:	6824      	ldr	r4, [r4, #0]
 8001868:	e7f5      	b.n	8001856 <_fwalk_reent+0xe>
 800186a:	89ab      	ldrh	r3, [r5, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d907      	bls.n	8001880 <_fwalk_reent+0x38>
 8001870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001874:	3301      	adds	r3, #1
 8001876:	d003      	beq.n	8001880 <_fwalk_reent+0x38>
 8001878:	4629      	mov	r1, r5
 800187a:	4640      	mov	r0, r8
 800187c:	47c8      	blx	r9
 800187e:	4306      	orrs	r6, r0
 8001880:	3568      	adds	r5, #104	; 0x68
 8001882:	e7ee      	b.n	8001862 <_fwalk_reent+0x1a>

08001884 <__swhatbuf_r>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	460e      	mov	r6, r1
 8001888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800188c:	b090      	sub	sp, #64	; 0x40
 800188e:	2900      	cmp	r1, #0
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	da07      	bge.n	80018a6 <__swhatbuf_r+0x22>
 8001896:	2300      	movs	r3, #0
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	89b3      	ldrh	r3, [r6, #12]
 800189c:	061a      	lsls	r2, r3, #24
 800189e:	d410      	bmi.n	80018c2 <__swhatbuf_r+0x3e>
 80018a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a4:	e00e      	b.n	80018c4 <__swhatbuf_r+0x40>
 80018a6:	aa01      	add	r2, sp, #4
 80018a8:	f000 fc46 	bl	8002138 <_fstat_r>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	dbf2      	blt.n	8001896 <__swhatbuf_r+0x12>
 80018b0:	9a02      	ldr	r2, [sp, #8]
 80018b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80018b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80018ba:	425a      	negs	r2, r3
 80018bc:	415a      	adcs	r2, r3
 80018be:	602a      	str	r2, [r5, #0]
 80018c0:	e7ee      	b.n	80018a0 <__swhatbuf_r+0x1c>
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	2000      	movs	r0, #0
 80018c6:	6023      	str	r3, [r4, #0]
 80018c8:	b010      	add	sp, #64	; 0x40
 80018ca:	bd70      	pop	{r4, r5, r6, pc}

080018cc <__smakebuf_r>:
 80018cc:	898b      	ldrh	r3, [r1, #12]
 80018ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018d0:	079d      	lsls	r5, r3, #30
 80018d2:	4606      	mov	r6, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	d507      	bpl.n	80018e8 <__smakebuf_r+0x1c>
 80018d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018dc:	6023      	str	r3, [r4, #0]
 80018de:	6123      	str	r3, [r4, #16]
 80018e0:	2301      	movs	r3, #1
 80018e2:	6163      	str	r3, [r4, #20]
 80018e4:	b002      	add	sp, #8
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
 80018e8:	ab01      	add	r3, sp, #4
 80018ea:	466a      	mov	r2, sp
 80018ec:	f7ff ffca 	bl	8001884 <__swhatbuf_r>
 80018f0:	9900      	ldr	r1, [sp, #0]
 80018f2:	4605      	mov	r5, r0
 80018f4:	4630      	mov	r0, r6
 80018f6:	f000 f875 	bl	80019e4 <_malloc_r>
 80018fa:	b948      	cbnz	r0, 8001910 <__smakebuf_r+0x44>
 80018fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001900:	059a      	lsls	r2, r3, #22
 8001902:	d4ef      	bmi.n	80018e4 <__smakebuf_r+0x18>
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	81a3      	strh	r3, [r4, #12]
 800190e:	e7e3      	b.n	80018d8 <__smakebuf_r+0xc>
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <__smakebuf_r+0x7c>)
 8001912:	62b3      	str	r3, [r6, #40]	; 0x28
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	6020      	str	r0, [r4, #0]
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	81a3      	strh	r3, [r4, #12]
 800191e:	9b00      	ldr	r3, [sp, #0]
 8001920:	6120      	str	r0, [r4, #16]
 8001922:	6163      	str	r3, [r4, #20]
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	b15b      	cbz	r3, 8001940 <__smakebuf_r+0x74>
 8001928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800192c:	4630      	mov	r0, r6
 800192e:	f000 fc15 	bl	800215c <_isatty_r>
 8001932:	b128      	cbz	r0, 8001940 <__smakebuf_r+0x74>
 8001934:	89a3      	ldrh	r3, [r4, #12]
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	81a3      	strh	r3, [r4, #12]
 8001940:	89a3      	ldrh	r3, [r4, #12]
 8001942:	431d      	orrs	r5, r3
 8001944:	81a5      	strh	r5, [r4, #12]
 8001946:	e7cd      	b.n	80018e4 <__smakebuf_r+0x18>
 8001948:	080016f1 	.word	0x080016f1

0800194c <_free_r>:
 800194c:	b538      	push	{r3, r4, r5, lr}
 800194e:	4605      	mov	r5, r0
 8001950:	2900      	cmp	r1, #0
 8001952:	d043      	beq.n	80019dc <_free_r+0x90>
 8001954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001958:	1f0c      	subs	r4, r1, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	bfb8      	it	lt
 800195e:	18e4      	addlt	r4, r4, r3
 8001960:	f000 fc2c 	bl	80021bc <__malloc_lock>
 8001964:	4a1e      	ldr	r2, [pc, #120]	; (80019e0 <_free_r+0x94>)
 8001966:	6813      	ldr	r3, [r2, #0]
 8001968:	4610      	mov	r0, r2
 800196a:	b933      	cbnz	r3, 800197a <_free_r+0x2e>
 800196c:	6063      	str	r3, [r4, #4]
 800196e:	6014      	str	r4, [r2, #0]
 8001970:	4628      	mov	r0, r5
 8001972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001976:	f000 bc22 	b.w	80021be <__malloc_unlock>
 800197a:	42a3      	cmp	r3, r4
 800197c:	d90b      	bls.n	8001996 <_free_r+0x4a>
 800197e:	6821      	ldr	r1, [r4, #0]
 8001980:	1862      	adds	r2, r4, r1
 8001982:	4293      	cmp	r3, r2
 8001984:	bf01      	itttt	eq
 8001986:	681a      	ldreq	r2, [r3, #0]
 8001988:	685b      	ldreq	r3, [r3, #4]
 800198a:	1852      	addeq	r2, r2, r1
 800198c:	6022      	streq	r2, [r4, #0]
 800198e:	6063      	str	r3, [r4, #4]
 8001990:	6004      	str	r4, [r0, #0]
 8001992:	e7ed      	b.n	8001970 <_free_r+0x24>
 8001994:	4613      	mov	r3, r2
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	b10a      	cbz	r2, 800199e <_free_r+0x52>
 800199a:	42a2      	cmp	r2, r4
 800199c:	d9fa      	bls.n	8001994 <_free_r+0x48>
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	1858      	adds	r0, r3, r1
 80019a2:	42a0      	cmp	r0, r4
 80019a4:	d10b      	bne.n	80019be <_free_r+0x72>
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	4401      	add	r1, r0
 80019aa:	1858      	adds	r0, r3, r1
 80019ac:	4282      	cmp	r2, r0
 80019ae:	6019      	str	r1, [r3, #0]
 80019b0:	d1de      	bne.n	8001970 <_free_r+0x24>
 80019b2:	6810      	ldr	r0, [r2, #0]
 80019b4:	6852      	ldr	r2, [r2, #4]
 80019b6:	4401      	add	r1, r0
 80019b8:	6019      	str	r1, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	e7d8      	b.n	8001970 <_free_r+0x24>
 80019be:	d902      	bls.n	80019c6 <_free_r+0x7a>
 80019c0:	230c      	movs	r3, #12
 80019c2:	602b      	str	r3, [r5, #0]
 80019c4:	e7d4      	b.n	8001970 <_free_r+0x24>
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	1821      	adds	r1, r4, r0
 80019ca:	428a      	cmp	r2, r1
 80019cc:	bf01      	itttt	eq
 80019ce:	6811      	ldreq	r1, [r2, #0]
 80019d0:	6852      	ldreq	r2, [r2, #4]
 80019d2:	1809      	addeq	r1, r1, r0
 80019d4:	6021      	streq	r1, [r4, #0]
 80019d6:	6062      	str	r2, [r4, #4]
 80019d8:	605c      	str	r4, [r3, #4]
 80019da:	e7c9      	b.n	8001970 <_free_r+0x24>
 80019dc:	bd38      	pop	{r3, r4, r5, pc}
 80019de:	bf00      	nop
 80019e0:	20000090 	.word	0x20000090

080019e4 <_malloc_r>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	1ccd      	adds	r5, r1, #3
 80019e8:	f025 0503 	bic.w	r5, r5, #3
 80019ec:	3508      	adds	r5, #8
 80019ee:	2d0c      	cmp	r5, #12
 80019f0:	bf38      	it	cc
 80019f2:	250c      	movcc	r5, #12
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	4606      	mov	r6, r0
 80019f8:	db01      	blt.n	80019fe <_malloc_r+0x1a>
 80019fa:	42a9      	cmp	r1, r5
 80019fc:	d903      	bls.n	8001a06 <_malloc_r+0x22>
 80019fe:	230c      	movs	r3, #12
 8001a00:	6033      	str	r3, [r6, #0]
 8001a02:	2000      	movs	r0, #0
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
 8001a06:	f000 fbd9 	bl	80021bc <__malloc_lock>
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <_malloc_r+0xb4>)
 8001a0c:	6814      	ldr	r4, [r2, #0]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	b991      	cbnz	r1, 8001a38 <_malloc_r+0x54>
 8001a12:	4c22      	ldr	r4, [pc, #136]	; (8001a9c <_malloc_r+0xb8>)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	b91b      	cbnz	r3, 8001a20 <_malloc_r+0x3c>
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f000 fb17 	bl	800204c <_sbrk_r>
 8001a1e:	6020      	str	r0, [r4, #0]
 8001a20:	4629      	mov	r1, r5
 8001a22:	4630      	mov	r0, r6
 8001a24:	f000 fb12 	bl	800204c <_sbrk_r>
 8001a28:	1c43      	adds	r3, r0, #1
 8001a2a:	d126      	bne.n	8001a7a <_malloc_r+0x96>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	4630      	mov	r0, r6
 8001a30:	6033      	str	r3, [r6, #0]
 8001a32:	f000 fbc4 	bl	80021be <__malloc_unlock>
 8001a36:	e7e4      	b.n	8001a02 <_malloc_r+0x1e>
 8001a38:	680b      	ldr	r3, [r1, #0]
 8001a3a:	1b5b      	subs	r3, r3, r5
 8001a3c:	d41a      	bmi.n	8001a74 <_malloc_r+0x90>
 8001a3e:	2b0b      	cmp	r3, #11
 8001a40:	d90f      	bls.n	8001a62 <_malloc_r+0x7e>
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	18cc      	adds	r4, r1, r3
 8001a46:	50cd      	str	r5, [r1, r3]
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f000 fbb8 	bl	80021be <__malloc_unlock>
 8001a4e:	f104 000b 	add.w	r0, r4, #11
 8001a52:	1d23      	adds	r3, r4, #4
 8001a54:	f020 0007 	bic.w	r0, r0, #7
 8001a58:	1ac3      	subs	r3, r0, r3
 8001a5a:	d01b      	beq.n	8001a94 <_malloc_r+0xb0>
 8001a5c:	425a      	negs	r2, r3
 8001a5e:	50e2      	str	r2, [r4, r3]
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	428c      	cmp	r4, r1
 8001a64:	bf0b      	itete	eq
 8001a66:	6863      	ldreq	r3, [r4, #4]
 8001a68:	684b      	ldrne	r3, [r1, #4]
 8001a6a:	6013      	streq	r3, [r2, #0]
 8001a6c:	6063      	strne	r3, [r4, #4]
 8001a6e:	bf18      	it	ne
 8001a70:	460c      	movne	r4, r1
 8001a72:	e7e9      	b.n	8001a48 <_malloc_r+0x64>
 8001a74:	460c      	mov	r4, r1
 8001a76:	6849      	ldr	r1, [r1, #4]
 8001a78:	e7ca      	b.n	8001a10 <_malloc_r+0x2c>
 8001a7a:	1cc4      	adds	r4, r0, #3
 8001a7c:	f024 0403 	bic.w	r4, r4, #3
 8001a80:	42a0      	cmp	r0, r4
 8001a82:	d005      	beq.n	8001a90 <_malloc_r+0xac>
 8001a84:	1a21      	subs	r1, r4, r0
 8001a86:	4630      	mov	r0, r6
 8001a88:	f000 fae0 	bl	800204c <_sbrk_r>
 8001a8c:	3001      	adds	r0, #1
 8001a8e:	d0cd      	beq.n	8001a2c <_malloc_r+0x48>
 8001a90:	6025      	str	r5, [r4, #0]
 8001a92:	e7d9      	b.n	8001a48 <_malloc_r+0x64>
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	bf00      	nop
 8001a98:	20000090 	.word	0x20000090
 8001a9c:	20000094 	.word	0x20000094

08001aa0 <__sfputc_r>:
 8001aa0:	6893      	ldr	r3, [r2, #8]
 8001aa2:	b410      	push	{r4}
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	6093      	str	r3, [r2, #8]
 8001aaa:	da08      	bge.n	8001abe <__sfputc_r+0x1e>
 8001aac:	6994      	ldr	r4, [r2, #24]
 8001aae:	42a3      	cmp	r3, r4
 8001ab0:	db02      	blt.n	8001ab8 <__sfputc_r+0x18>
 8001ab2:	b2cb      	uxtb	r3, r1
 8001ab4:	2b0a      	cmp	r3, #10
 8001ab6:	d102      	bne.n	8001abe <__sfputc_r+0x1e>
 8001ab8:	bc10      	pop	{r4}
 8001aba:	f7ff bca7 	b.w	800140c <__swbuf_r>
 8001abe:	6813      	ldr	r3, [r2, #0]
 8001ac0:	1c58      	adds	r0, r3, #1
 8001ac2:	6010      	str	r0, [r2, #0]
 8001ac4:	7019      	strb	r1, [r3, #0]
 8001ac6:	b2c8      	uxtb	r0, r1
 8001ac8:	bc10      	pop	{r4}
 8001aca:	4770      	bx	lr

08001acc <__sfputs_r>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	4606      	mov	r6, r0
 8001ad0:	460f      	mov	r7, r1
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	18d5      	adds	r5, r2, r3
 8001ad6:	42ac      	cmp	r4, r5
 8001ad8:	d101      	bne.n	8001ade <__sfputs_r+0x12>
 8001ada:	2000      	movs	r0, #0
 8001adc:	e007      	b.n	8001aee <__sfputs_r+0x22>
 8001ade:	463a      	mov	r2, r7
 8001ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f7ff ffdb 	bl	8001aa0 <__sfputc_r>
 8001aea:	1c43      	adds	r3, r0, #1
 8001aec:	d1f3      	bne.n	8001ad6 <__sfputs_r+0xa>
 8001aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001af0 <_vfiprintf_r>:
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af4:	b09d      	sub	sp, #116	; 0x74
 8001af6:	460c      	mov	r4, r1
 8001af8:	4617      	mov	r7, r2
 8001afa:	9303      	str	r3, [sp, #12]
 8001afc:	4606      	mov	r6, r0
 8001afe:	b118      	cbz	r0, 8001b08 <_vfiprintf_r+0x18>
 8001b00:	6983      	ldr	r3, [r0, #24]
 8001b02:	b90b      	cbnz	r3, 8001b08 <_vfiprintf_r+0x18>
 8001b04:	f7ff fe34 	bl	8001770 <__sinit>
 8001b08:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <_vfiprintf_r+0x20c>)
 8001b0a:	429c      	cmp	r4, r3
 8001b0c:	d157      	bne.n	8001bbe <_vfiprintf_r+0xce>
 8001b0e:	6874      	ldr	r4, [r6, #4]
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	0718      	lsls	r0, r3, #28
 8001b14:	d55d      	bpl.n	8001bd2 <_vfiprintf_r+0xe2>
 8001b16:	6923      	ldr	r3, [r4, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05a      	beq.n	8001bd2 <_vfiprintf_r+0xe2>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b20:	2320      	movs	r3, #32
 8001b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b26:	2330      	movs	r3, #48	; 0x30
 8001b28:	f04f 0b01 	mov.w	fp, #1
 8001b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b30:	46b8      	mov	r8, r7
 8001b32:	4645      	mov	r5, r8
 8001b34:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d155      	bne.n	8001be8 <_vfiprintf_r+0xf8>
 8001b3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001b40:	d00b      	beq.n	8001b5a <_vfiprintf_r+0x6a>
 8001b42:	4653      	mov	r3, sl
 8001b44:	463a      	mov	r2, r7
 8001b46:	4621      	mov	r1, r4
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f7ff ffbf 	bl	8001acc <__sfputs_r>
 8001b4e:	3001      	adds	r0, #1
 8001b50:	f000 80c4 	beq.w	8001cdc <_vfiprintf_r+0x1ec>
 8001b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b56:	4453      	add	r3, sl
 8001b58:	9309      	str	r3, [sp, #36]	; 0x24
 8001b5a:	f898 3000 	ldrb.w	r3, [r8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80bc 	beq.w	8001cdc <_vfiprintf_r+0x1ec>
 8001b64:	2300      	movs	r3, #0
 8001b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b6a:	9304      	str	r3, [sp, #16]
 8001b6c:	9307      	str	r3, [sp, #28]
 8001b6e:	9205      	str	r2, [sp, #20]
 8001b70:	9306      	str	r3, [sp, #24]
 8001b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b76:	931a      	str	r3, [sp, #104]	; 0x68
 8001b78:	2205      	movs	r2, #5
 8001b7a:	7829      	ldrb	r1, [r5, #0]
 8001b7c:	4860      	ldr	r0, [pc, #384]	; (8001d00 <_vfiprintf_r+0x210>)
 8001b7e:	f000 fb0f 	bl	80021a0 <memchr>
 8001b82:	f105 0801 	add.w	r8, r5, #1
 8001b86:	9b04      	ldr	r3, [sp, #16]
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d131      	bne.n	8001bf0 <_vfiprintf_r+0x100>
 8001b8c:	06d9      	lsls	r1, r3, #27
 8001b8e:	bf44      	itt	mi
 8001b90:	2220      	movmi	r2, #32
 8001b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b96:	071a      	lsls	r2, r3, #28
 8001b98:	bf44      	itt	mi
 8001b9a:	222b      	movmi	r2, #43	; 0x2b
 8001b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ba0:	782a      	ldrb	r2, [r5, #0]
 8001ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8001ba4:	d02c      	beq.n	8001c00 <_vfiprintf_r+0x110>
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	200a      	movs	r0, #10
 8001baa:	9a07      	ldr	r2, [sp, #28]
 8001bac:	46a8      	mov	r8, r5
 8001bae:	f898 3000 	ldrb.w	r3, [r8]
 8001bb2:	3501      	adds	r5, #1
 8001bb4:	3b30      	subs	r3, #48	; 0x30
 8001bb6:	2b09      	cmp	r3, #9
 8001bb8:	d96d      	bls.n	8001c96 <_vfiprintf_r+0x1a6>
 8001bba:	b371      	cbz	r1, 8001c1a <_vfiprintf_r+0x12a>
 8001bbc:	e026      	b.n	8001c0c <_vfiprintf_r+0x11c>
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <_vfiprintf_r+0x214>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d101      	bne.n	8001bc8 <_vfiprintf_r+0xd8>
 8001bc4:	68b4      	ldr	r4, [r6, #8]
 8001bc6:	e7a3      	b.n	8001b10 <_vfiprintf_r+0x20>
 8001bc8:	4b4f      	ldr	r3, [pc, #316]	; (8001d08 <_vfiprintf_r+0x218>)
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	bf08      	it	eq
 8001bce:	68f4      	ldreq	r4, [r6, #12]
 8001bd0:	e79e      	b.n	8001b10 <_vfiprintf_r+0x20>
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f7ff fc6b 	bl	80014b0 <__swsetup_r>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d09e      	beq.n	8001b1c <_vfiprintf_r+0x2c>
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be2:	b01d      	add	sp, #116	; 0x74
 8001be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be8:	2b25      	cmp	r3, #37	; 0x25
 8001bea:	d0a7      	beq.n	8001b3c <_vfiprintf_r+0x4c>
 8001bec:	46a8      	mov	r8, r5
 8001bee:	e7a0      	b.n	8001b32 <_vfiprintf_r+0x42>
 8001bf0:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <_vfiprintf_r+0x210>)
 8001bf2:	4645      	mov	r5, r8
 8001bf4:	1a80      	subs	r0, r0, r2
 8001bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8001bfa:	4318      	orrs	r0, r3
 8001bfc:	9004      	str	r0, [sp, #16]
 8001bfe:	e7bb      	b.n	8001b78 <_vfiprintf_r+0x88>
 8001c00:	9a03      	ldr	r2, [sp, #12]
 8001c02:	1d11      	adds	r1, r2, #4
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	9103      	str	r1, [sp, #12]
 8001c08:	2a00      	cmp	r2, #0
 8001c0a:	db01      	blt.n	8001c10 <_vfiprintf_r+0x120>
 8001c0c:	9207      	str	r2, [sp, #28]
 8001c0e:	e004      	b.n	8001c1a <_vfiprintf_r+0x12a>
 8001c10:	4252      	negs	r2, r2
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	9207      	str	r2, [sp, #28]
 8001c18:	9304      	str	r3, [sp, #16]
 8001c1a:	f898 3000 	ldrb.w	r3, [r8]
 8001c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c20:	d110      	bne.n	8001c44 <_vfiprintf_r+0x154>
 8001c22:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001c26:	f108 0101 	add.w	r1, r8, #1
 8001c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2c:	d137      	bne.n	8001c9e <_vfiprintf_r+0x1ae>
 8001c2e:	9b03      	ldr	r3, [sp, #12]
 8001c30:	f108 0802 	add.w	r8, r8, #2
 8001c34:	1d1a      	adds	r2, r3, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	9203      	str	r2, [sp, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bfb8      	it	lt
 8001c3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001c42:	9305      	str	r3, [sp, #20]
 8001c44:	4d31      	ldr	r5, [pc, #196]	; (8001d0c <_vfiprintf_r+0x21c>)
 8001c46:	2203      	movs	r2, #3
 8001c48:	f898 1000 	ldrb.w	r1, [r8]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f000 faa7 	bl	80021a0 <memchr>
 8001c52:	b140      	cbz	r0, 8001c66 <_vfiprintf_r+0x176>
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	1b40      	subs	r0, r0, r5
 8001c58:	fa03 f000 	lsl.w	r0, r3, r0
 8001c5c:	9b04      	ldr	r3, [sp, #16]
 8001c5e:	f108 0801 	add.w	r8, r8, #1
 8001c62:	4303      	orrs	r3, r0
 8001c64:	9304      	str	r3, [sp, #16]
 8001c66:	f898 1000 	ldrb.w	r1, [r8]
 8001c6a:	2206      	movs	r2, #6
 8001c6c:	4828      	ldr	r0, [pc, #160]	; (8001d10 <_vfiprintf_r+0x220>)
 8001c6e:	f108 0701 	add.w	r7, r8, #1
 8001c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c76:	f000 fa93 	bl	80021a0 <memchr>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d034      	beq.n	8001ce8 <_vfiprintf_r+0x1f8>
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <_vfiprintf_r+0x224>)
 8001c80:	bb03      	cbnz	r3, 8001cc4 <_vfiprintf_r+0x1d4>
 8001c82:	9b03      	ldr	r3, [sp, #12]
 8001c84:	3307      	adds	r3, #7
 8001c86:	f023 0307 	bic.w	r3, r3, #7
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	9303      	str	r3, [sp, #12]
 8001c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c90:	444b      	add	r3, r9
 8001c92:	9309      	str	r3, [sp, #36]	; 0x24
 8001c94:	e74c      	b.n	8001b30 <_vfiprintf_r+0x40>
 8001c96:	fb00 3202 	mla	r2, r0, r2, r3
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	e786      	b.n	8001bac <_vfiprintf_r+0xbc>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	250a      	movs	r5, #10
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	9305      	str	r3, [sp, #20]
 8001ca6:	4688      	mov	r8, r1
 8001ca8:	f898 2000 	ldrb.w	r2, [r8]
 8001cac:	3101      	adds	r1, #1
 8001cae:	3a30      	subs	r2, #48	; 0x30
 8001cb0:	2a09      	cmp	r2, #9
 8001cb2:	d903      	bls.n	8001cbc <_vfiprintf_r+0x1cc>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0c5      	beq.n	8001c44 <_vfiprintf_r+0x154>
 8001cb8:	9005      	str	r0, [sp, #20]
 8001cba:	e7c3      	b.n	8001c44 <_vfiprintf_r+0x154>
 8001cbc:	fb05 2000 	mla	r0, r5, r0, r2
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e7f0      	b.n	8001ca6 <_vfiprintf_r+0x1b6>
 8001cc4:	ab03      	add	r3, sp, #12
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4622      	mov	r2, r4
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_vfiprintf_r+0x228>)
 8001ccc:	a904      	add	r1, sp, #16
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f3af 8000 	nop.w
 8001cd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001cd8:	4681      	mov	r9, r0
 8001cda:	d1d8      	bne.n	8001c8e <_vfiprintf_r+0x19e>
 8001cdc:	89a3      	ldrh	r3, [r4, #12]
 8001cde:	065b      	lsls	r3, r3, #25
 8001ce0:	f53f af7d 	bmi.w	8001bde <_vfiprintf_r+0xee>
 8001ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ce6:	e77c      	b.n	8001be2 <_vfiprintf_r+0xf2>
 8001ce8:	ab03      	add	r3, sp, #12
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4622      	mov	r2, r4
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <_vfiprintf_r+0x228>)
 8001cf0:	a904      	add	r1, sp, #16
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f000 f88a 	bl	8001e0c <_printf_i>
 8001cf8:	e7ec      	b.n	8001cd4 <_vfiprintf_r+0x1e4>
 8001cfa:	bf00      	nop
 8001cfc:	080022d4 	.word	0x080022d4
 8001d00:	08002318 	.word	0x08002318
 8001d04:	080022f4 	.word	0x080022f4
 8001d08:	080022b4 	.word	0x080022b4
 8001d0c:	0800231e 	.word	0x0800231e
 8001d10:	08002322 	.word	0x08002322
 8001d14:	00000000 	.word	0x00000000
 8001d18:	08001acd 	.word	0x08001acd

08001d1c <_printf_common>:
 8001d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d20:	4691      	mov	r9, r2
 8001d22:	461f      	mov	r7, r3
 8001d24:	688a      	ldr	r2, [r1, #8]
 8001d26:	690b      	ldr	r3, [r1, #16]
 8001d28:	4606      	mov	r6, r0
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	bfb8      	it	lt
 8001d2e:	4613      	movlt	r3, r2
 8001d30:	f8c9 3000 	str.w	r3, [r9]
 8001d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d38:	460c      	mov	r4, r1
 8001d3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d3e:	b112      	cbz	r2, 8001d46 <_printf_common+0x2a>
 8001d40:	3301      	adds	r3, #1
 8001d42:	f8c9 3000 	str.w	r3, [r9]
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	0699      	lsls	r1, r3, #26
 8001d4a:	bf42      	ittt	mi
 8001d4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d50:	3302      	addmi	r3, #2
 8001d52:	f8c9 3000 	strmi.w	r3, [r9]
 8001d56:	6825      	ldr	r5, [r4, #0]
 8001d58:	f015 0506 	ands.w	r5, r5, #6
 8001d5c:	d107      	bne.n	8001d6e <_printf_common+0x52>
 8001d5e:	f104 0a19 	add.w	sl, r4, #25
 8001d62:	68e3      	ldr	r3, [r4, #12]
 8001d64:	f8d9 2000 	ldr.w	r2, [r9]
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	429d      	cmp	r5, r3
 8001d6c:	db2a      	blt.n	8001dc4 <_printf_common+0xa8>
 8001d6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	3300      	adds	r3, #0
 8001d76:	bf18      	it	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	0692      	lsls	r2, r2, #26
 8001d7c:	d42f      	bmi.n	8001dde <_printf_common+0xc2>
 8001d7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d82:	4639      	mov	r1, r7
 8001d84:	4630      	mov	r0, r6
 8001d86:	47c0      	blx	r8
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d022      	beq.n	8001dd2 <_printf_common+0xb6>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	68e5      	ldr	r5, [r4, #12]
 8001d90:	f003 0306 	and.w	r3, r3, #6
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	bf18      	it	ne
 8001d98:	2500      	movne	r5, #0
 8001d9a:	f8d9 2000 	ldr.w	r2, [r9]
 8001d9e:	f04f 0900 	mov.w	r9, #0
 8001da2:	bf08      	it	eq
 8001da4:	1aad      	subeq	r5, r5, r2
 8001da6:	68a3      	ldr	r3, [r4, #8]
 8001da8:	6922      	ldr	r2, [r4, #16]
 8001daa:	bf08      	it	eq
 8001dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bfc4      	itt	gt
 8001db4:	1a9b      	subgt	r3, r3, r2
 8001db6:	18ed      	addgt	r5, r5, r3
 8001db8:	341a      	adds	r4, #26
 8001dba:	454d      	cmp	r5, r9
 8001dbc:	d11b      	bne.n	8001df6 <_printf_common+0xda>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4652      	mov	r2, sl
 8001dc8:	4639      	mov	r1, r7
 8001dca:	4630      	mov	r0, r6
 8001dcc:	47c0      	blx	r8
 8001dce:	3001      	adds	r0, #1
 8001dd0:	d103      	bne.n	8001dda <_printf_common+0xbe>
 8001dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dda:	3501      	adds	r5, #1
 8001ddc:	e7c1      	b.n	8001d62 <_printf_common+0x46>
 8001dde:	2030      	movs	r0, #48	; 0x30
 8001de0:	18e1      	adds	r1, r4, r3
 8001de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dec:	4422      	add	r2, r4
 8001dee:	3302      	adds	r3, #2
 8001df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001df4:	e7c3      	b.n	8001d7e <_printf_common+0x62>
 8001df6:	2301      	movs	r3, #1
 8001df8:	4622      	mov	r2, r4
 8001dfa:	4639      	mov	r1, r7
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	47c0      	blx	r8
 8001e00:	3001      	adds	r0, #1
 8001e02:	d0e6      	beq.n	8001dd2 <_printf_common+0xb6>
 8001e04:	f109 0901 	add.w	r9, r9, #1
 8001e08:	e7d7      	b.n	8001dba <_printf_common+0x9e>
	...

08001e0c <_printf_i>:
 8001e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e10:	4617      	mov	r7, r2
 8001e12:	7e0a      	ldrb	r2, [r1, #24]
 8001e14:	b085      	sub	sp, #20
 8001e16:	2a6e      	cmp	r2, #110	; 0x6e
 8001e18:	4698      	mov	r8, r3
 8001e1a:	4606      	mov	r6, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e20:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001e24:	f000 80bc 	beq.w	8001fa0 <_printf_i+0x194>
 8001e28:	d81a      	bhi.n	8001e60 <_printf_i+0x54>
 8001e2a:	2a63      	cmp	r2, #99	; 0x63
 8001e2c:	d02e      	beq.n	8001e8c <_printf_i+0x80>
 8001e2e:	d80a      	bhi.n	8001e46 <_printf_i+0x3a>
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	f000 80c8 	beq.w	8001fc6 <_printf_i+0x1ba>
 8001e36:	2a58      	cmp	r2, #88	; 0x58
 8001e38:	f000 808a 	beq.w	8001f50 <_printf_i+0x144>
 8001e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001e44:	e02a      	b.n	8001e9c <_printf_i+0x90>
 8001e46:	2a64      	cmp	r2, #100	; 0x64
 8001e48:	d001      	beq.n	8001e4e <_printf_i+0x42>
 8001e4a:	2a69      	cmp	r2, #105	; 0x69
 8001e4c:	d1f6      	bne.n	8001e3c <_printf_i+0x30>
 8001e4e:	6821      	ldr	r1, [r4, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e56:	d023      	beq.n	8001ea0 <_printf_i+0x94>
 8001e58:	1d11      	adds	r1, r2, #4
 8001e5a:	6019      	str	r1, [r3, #0]
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	e027      	b.n	8001eb0 <_printf_i+0xa4>
 8001e60:	2a73      	cmp	r2, #115	; 0x73
 8001e62:	f000 80b4 	beq.w	8001fce <_printf_i+0x1c2>
 8001e66:	d808      	bhi.n	8001e7a <_printf_i+0x6e>
 8001e68:	2a6f      	cmp	r2, #111	; 0x6f
 8001e6a:	d02a      	beq.n	8001ec2 <_printf_i+0xb6>
 8001e6c:	2a70      	cmp	r2, #112	; 0x70
 8001e6e:	d1e5      	bne.n	8001e3c <_printf_i+0x30>
 8001e70:	680a      	ldr	r2, [r1, #0]
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	600a      	str	r2, [r1, #0]
 8001e78:	e003      	b.n	8001e82 <_printf_i+0x76>
 8001e7a:	2a75      	cmp	r2, #117	; 0x75
 8001e7c:	d021      	beq.n	8001ec2 <_printf_i+0xb6>
 8001e7e:	2a78      	cmp	r2, #120	; 0x78
 8001e80:	d1dc      	bne.n	8001e3c <_printf_i+0x30>
 8001e82:	2278      	movs	r2, #120	; 0x78
 8001e84:	496f      	ldr	r1, [pc, #444]	; (8002044 <_printf_i+0x238>)
 8001e86:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e8a:	e064      	b.n	8001f56 <_printf_i+0x14a>
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001e92:	1d11      	adds	r1, r2, #4
 8001e94:	6019      	str	r1, [r3, #0]
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0a3      	b.n	8001fe8 <_printf_i+0x1dc>
 8001ea0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ea4:	f102 0104 	add.w	r1, r2, #4
 8001ea8:	6019      	str	r1, [r3, #0]
 8001eaa:	d0d7      	beq.n	8001e5c <_printf_i+0x50>
 8001eac:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da03      	bge.n	8001ebc <_printf_i+0xb0>
 8001eb4:	222d      	movs	r2, #45	; 0x2d
 8001eb6:	425b      	negs	r3, r3
 8001eb8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ebc:	4962      	ldr	r1, [pc, #392]	; (8002048 <_printf_i+0x23c>)
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	e017      	b.n	8001ef2 <_printf_i+0xe6>
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001eca:	d003      	beq.n	8001ed4 <_printf_i+0xc8>
 8001ecc:	1d08      	adds	r0, r1, #4
 8001ece:	6018      	str	r0, [r3, #0]
 8001ed0:	680b      	ldr	r3, [r1, #0]
 8001ed2:	e006      	b.n	8001ee2 <_printf_i+0xd6>
 8001ed4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ed8:	f101 0004 	add.w	r0, r1, #4
 8001edc:	6018      	str	r0, [r3, #0]
 8001ede:	d0f7      	beq.n	8001ed0 <_printf_i+0xc4>
 8001ee0:	880b      	ldrh	r3, [r1, #0]
 8001ee2:	2a6f      	cmp	r2, #111	; 0x6f
 8001ee4:	bf14      	ite	ne
 8001ee6:	220a      	movne	r2, #10
 8001ee8:	2208      	moveq	r2, #8
 8001eea:	4957      	ldr	r1, [pc, #348]	; (8002048 <_printf_i+0x23c>)
 8001eec:	2000      	movs	r0, #0
 8001eee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001ef2:	6865      	ldr	r5, [r4, #4]
 8001ef4:	2d00      	cmp	r5, #0
 8001ef6:	60a5      	str	r5, [r4, #8]
 8001ef8:	f2c0 809c 	blt.w	8002034 <_printf_i+0x228>
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	f020 0004 	bic.w	r0, r0, #4
 8001f02:	6020      	str	r0, [r4, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d13f      	bne.n	8001f88 <_printf_i+0x17c>
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	f040 8095 	bne.w	8002038 <_printf_i+0x22c>
 8001f0e:	4675      	mov	r5, lr
 8001f10:	2a08      	cmp	r2, #8
 8001f12:	d10b      	bne.n	8001f2c <_printf_i+0x120>
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	07da      	lsls	r2, r3, #31
 8001f18:	d508      	bpl.n	8001f2c <_printf_i+0x120>
 8001f1a:	6923      	ldr	r3, [r4, #16]
 8001f1c:	6862      	ldr	r2, [r4, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	bfde      	ittt	le
 8001f22:	2330      	movle	r3, #48	; 0x30
 8001f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001f2c:	ebae 0305 	sub.w	r3, lr, r5
 8001f30:	6123      	str	r3, [r4, #16]
 8001f32:	f8cd 8000 	str.w	r8, [sp]
 8001f36:	463b      	mov	r3, r7
 8001f38:	aa03      	add	r2, sp, #12
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f7ff feed 	bl	8001d1c <_printf_common>
 8001f42:	3001      	adds	r0, #1
 8001f44:	d155      	bne.n	8001ff2 <_printf_i+0x1e6>
 8001f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f4a:	b005      	add	sp, #20
 8001f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f50:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001f54:	493c      	ldr	r1, [pc, #240]	; (8002048 <_printf_i+0x23c>)
 8001f56:	6822      	ldr	r2, [r4, #0]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f5e:	f100 0504 	add.w	r5, r0, #4
 8001f62:	601d      	str	r5, [r3, #0]
 8001f64:	d001      	beq.n	8001f6a <_printf_i+0x15e>
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	e002      	b.n	8001f70 <_printf_i+0x164>
 8001f6a:	0655      	lsls	r5, r2, #25
 8001f6c:	d5fb      	bpl.n	8001f66 <_printf_i+0x15a>
 8001f6e:	8803      	ldrh	r3, [r0, #0]
 8001f70:	07d0      	lsls	r0, r2, #31
 8001f72:	bf44      	itt	mi
 8001f74:	f042 0220 	orrmi.w	r2, r2, #32
 8001f78:	6022      	strmi	r2, [r4, #0]
 8001f7a:	b91b      	cbnz	r3, 8001f84 <_printf_i+0x178>
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	f022 0220 	bic.w	r2, r2, #32
 8001f82:	6022      	str	r2, [r4, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	e7b1      	b.n	8001eec <_printf_i+0xe0>
 8001f88:	4675      	mov	r5, lr
 8001f8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001f8e:	fb02 3310 	mls	r3, r2, r0, r3
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d1f5      	bne.n	8001f8a <_printf_i+0x17e>
 8001f9e:	e7b7      	b.n	8001f10 <_printf_i+0x104>
 8001fa0:	6808      	ldr	r0, [r1, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fa8:	6949      	ldr	r1, [r1, #20]
 8001faa:	d004      	beq.n	8001fb6 <_printf_i+0x1aa>
 8001fac:	1d10      	adds	r0, r2, #4
 8001fae:	6018      	str	r0, [r3, #0]
 8001fb0:	6813      	ldr	r3, [r2, #0]
 8001fb2:	6019      	str	r1, [r3, #0]
 8001fb4:	e007      	b.n	8001fc6 <_printf_i+0x1ba>
 8001fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fba:	f102 0004 	add.w	r0, r2, #4
 8001fbe:	6018      	str	r0, [r3, #0]
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	d0f6      	beq.n	8001fb2 <_printf_i+0x1a6>
 8001fc4:	8019      	strh	r1, [r3, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	4675      	mov	r5, lr
 8001fca:	6123      	str	r3, [r4, #16]
 8001fcc:	e7b1      	b.n	8001f32 <_printf_i+0x126>
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	1d11      	adds	r1, r2, #4
 8001fd2:	6019      	str	r1, [r3, #0]
 8001fd4:	6815      	ldr	r5, [r2, #0]
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6862      	ldr	r2, [r4, #4]
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f000 f8e0 	bl	80021a0 <memchr>
 8001fe0:	b108      	cbz	r0, 8001fe6 <_printf_i+0x1da>
 8001fe2:	1b40      	subs	r0, r0, r5
 8001fe4:	6060      	str	r0, [r4, #4]
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	6123      	str	r3, [r4, #16]
 8001fea:	2300      	movs	r3, #0
 8001fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ff0:	e79f      	b.n	8001f32 <_printf_i+0x126>
 8001ff2:	6923      	ldr	r3, [r4, #16]
 8001ff4:	462a      	mov	r2, r5
 8001ff6:	4639      	mov	r1, r7
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	47c0      	blx	r8
 8001ffc:	3001      	adds	r0, #1
 8001ffe:	d0a2      	beq.n	8001f46 <_printf_i+0x13a>
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	079b      	lsls	r3, r3, #30
 8002004:	d507      	bpl.n	8002016 <_printf_i+0x20a>
 8002006:	2500      	movs	r5, #0
 8002008:	f104 0919 	add.w	r9, r4, #25
 800200c:	68e3      	ldr	r3, [r4, #12]
 800200e:	9a03      	ldr	r2, [sp, #12]
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	429d      	cmp	r5, r3
 8002014:	db05      	blt.n	8002022 <_printf_i+0x216>
 8002016:	68e0      	ldr	r0, [r4, #12]
 8002018:	9b03      	ldr	r3, [sp, #12]
 800201a:	4298      	cmp	r0, r3
 800201c:	bfb8      	it	lt
 800201e:	4618      	movlt	r0, r3
 8002020:	e793      	b.n	8001f4a <_printf_i+0x13e>
 8002022:	2301      	movs	r3, #1
 8002024:	464a      	mov	r2, r9
 8002026:	4639      	mov	r1, r7
 8002028:	4630      	mov	r0, r6
 800202a:	47c0      	blx	r8
 800202c:	3001      	adds	r0, #1
 800202e:	d08a      	beq.n	8001f46 <_printf_i+0x13a>
 8002030:	3501      	adds	r5, #1
 8002032:	e7eb      	b.n	800200c <_printf_i+0x200>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1a7      	bne.n	8001f88 <_printf_i+0x17c>
 8002038:	780b      	ldrb	r3, [r1, #0]
 800203a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800203e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002042:	e765      	b.n	8001f10 <_printf_i+0x104>
 8002044:	0800233a 	.word	0x0800233a
 8002048:	08002329 	.word	0x08002329

0800204c <_sbrk_r>:
 800204c:	b538      	push	{r3, r4, r5, lr}
 800204e:	2300      	movs	r3, #0
 8002050:	4c05      	ldr	r4, [pc, #20]	; (8002068 <_sbrk_r+0x1c>)
 8002052:	4605      	mov	r5, r0
 8002054:	4608      	mov	r0, r1
 8002056:	6023      	str	r3, [r4, #0]
 8002058:	f000 f8ec 	bl	8002234 <_sbrk>
 800205c:	1c43      	adds	r3, r0, #1
 800205e:	d102      	bne.n	8002066 <_sbrk_r+0x1a>
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	b103      	cbz	r3, 8002066 <_sbrk_r+0x1a>
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	bd38      	pop	{r3, r4, r5, pc}
 8002068:	20000120 	.word	0x20000120

0800206c <__sread>:
 800206c:	b510      	push	{r4, lr}
 800206e:	460c      	mov	r4, r1
 8002070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002074:	f000 f8a4 	bl	80021c0 <_read_r>
 8002078:	2800      	cmp	r0, #0
 800207a:	bfab      	itete	ge
 800207c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800207e:	89a3      	ldrhlt	r3, [r4, #12]
 8002080:	181b      	addge	r3, r3, r0
 8002082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002086:	bfac      	ite	ge
 8002088:	6563      	strge	r3, [r4, #84]	; 0x54
 800208a:	81a3      	strhlt	r3, [r4, #12]
 800208c:	bd10      	pop	{r4, pc}

0800208e <__swrite>:
 800208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002092:	461f      	mov	r7, r3
 8002094:	898b      	ldrh	r3, [r1, #12]
 8002096:	4605      	mov	r5, r0
 8002098:	05db      	lsls	r3, r3, #23
 800209a:	460c      	mov	r4, r1
 800209c:	4616      	mov	r6, r2
 800209e:	d505      	bpl.n	80020ac <__swrite+0x1e>
 80020a0:	2302      	movs	r3, #2
 80020a2:	2200      	movs	r2, #0
 80020a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a8:	f000 f868 	bl	800217c <_lseek_r>
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	4632      	mov	r2, r6
 80020b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b4:	81a3      	strh	r3, [r4, #12]
 80020b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020ba:	463b      	mov	r3, r7
 80020bc:	4628      	mov	r0, r5
 80020be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020c2:	f000 b817 	b.w	80020f4 <_write_r>

080020c6 <__sseek>:
 80020c6:	b510      	push	{r4, lr}
 80020c8:	460c      	mov	r4, r1
 80020ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ce:	f000 f855 	bl	800217c <_lseek_r>
 80020d2:	1c43      	adds	r3, r0, #1
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	bf15      	itete	ne
 80020d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80020da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020e2:	81a3      	strheq	r3, [r4, #12]
 80020e4:	bf18      	it	ne
 80020e6:	81a3      	strhne	r3, [r4, #12]
 80020e8:	bd10      	pop	{r4, pc}

080020ea <__sclose>:
 80020ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ee:	f000 b813 	b.w	8002118 <_close_r>
	...

080020f4 <_write_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4605      	mov	r5, r0
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	2200      	movs	r2, #0
 80020fe:	4c05      	ldr	r4, [pc, #20]	; (8002114 <_write_r+0x20>)
 8002100:	6022      	str	r2, [r4, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f7fe ffe8 	bl	80010d8 <_write>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	d102      	bne.n	8002112 <_write_r+0x1e>
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	b103      	cbz	r3, 8002112 <_write_r+0x1e>
 8002110:	602b      	str	r3, [r5, #0]
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	20000120 	.word	0x20000120

08002118 <_close_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	2300      	movs	r3, #0
 800211c:	4c05      	ldr	r4, [pc, #20]	; (8002134 <_close_r+0x1c>)
 800211e:	4605      	mov	r5, r0
 8002120:	4608      	mov	r0, r1
 8002122:	6023      	str	r3, [r4, #0]
 8002124:	f000 f85e 	bl	80021e4 <_close>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_close_r+0x1a>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	b103      	cbz	r3, 8002132 <_close_r+0x1a>
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	20000120 	.word	0x20000120

08002138 <_fstat_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	2300      	movs	r3, #0
 800213c:	4c06      	ldr	r4, [pc, #24]	; (8002158 <_fstat_r+0x20>)
 800213e:	4605      	mov	r5, r0
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	6023      	str	r3, [r4, #0]
 8002146:	f000 f855 	bl	80021f4 <_fstat>
 800214a:	1c43      	adds	r3, r0, #1
 800214c:	d102      	bne.n	8002154 <_fstat_r+0x1c>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	b103      	cbz	r3, 8002154 <_fstat_r+0x1c>
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	bd38      	pop	{r3, r4, r5, pc}
 8002156:	bf00      	nop
 8002158:	20000120 	.word	0x20000120

0800215c <_isatty_r>:
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	2300      	movs	r3, #0
 8002160:	4c05      	ldr	r4, [pc, #20]	; (8002178 <_isatty_r+0x1c>)
 8002162:	4605      	mov	r5, r0
 8002164:	4608      	mov	r0, r1
 8002166:	6023      	str	r3, [r4, #0]
 8002168:	f000 f84c 	bl	8002204 <_isatty>
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	d102      	bne.n	8002176 <_isatty_r+0x1a>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	b103      	cbz	r3, 8002176 <_isatty_r+0x1a>
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	20000120 	.word	0x20000120

0800217c <_lseek_r>:
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4605      	mov	r5, r0
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	2200      	movs	r2, #0
 8002186:	4c05      	ldr	r4, [pc, #20]	; (800219c <_lseek_r+0x20>)
 8002188:	6022      	str	r2, [r4, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	f000 f842 	bl	8002214 <_lseek>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d102      	bne.n	800219a <_lseek_r+0x1e>
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	b103      	cbz	r3, 800219a <_lseek_r+0x1e>
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
 800219c:	20000120 	.word	0x20000120

080021a0 <memchr>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	b2c9      	uxtb	r1, r1
 80021a4:	4402      	add	r2, r0
 80021a6:	4290      	cmp	r0, r2
 80021a8:	4603      	mov	r3, r0
 80021aa:	d101      	bne.n	80021b0 <memchr+0x10>
 80021ac:	2000      	movs	r0, #0
 80021ae:	bd10      	pop	{r4, pc}
 80021b0:	781c      	ldrb	r4, [r3, #0]
 80021b2:	3001      	adds	r0, #1
 80021b4:	428c      	cmp	r4, r1
 80021b6:	d1f6      	bne.n	80021a6 <memchr+0x6>
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd10      	pop	{r4, pc}

080021bc <__malloc_lock>:
 80021bc:	4770      	bx	lr

080021be <__malloc_unlock>:
 80021be:	4770      	bx	lr

080021c0 <_read_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4605      	mov	r5, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	4c05      	ldr	r4, [pc, #20]	; (80021e0 <_read_r+0x20>)
 80021cc:	6022      	str	r2, [r4, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f000 f828 	bl	8002224 <_read>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d102      	bne.n	80021de <_read_r+0x1e>
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	b103      	cbz	r3, 80021de <_read_r+0x1e>
 80021dc:	602b      	str	r3, [r5, #0]
 80021de:	bd38      	pop	{r3, r4, r5, pc}
 80021e0:	20000120 	.word	0x20000120

080021e4 <_close>:
 80021e4:	2258      	movs	r2, #88	; 0x58
 80021e6:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <_close+0xc>)
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	4770      	bx	lr
 80021f0:	20000120 	.word	0x20000120

080021f4 <_fstat>:
 80021f4:	2258      	movs	r2, #88	; 0x58
 80021f6:	4b02      	ldr	r3, [pc, #8]	; (8002200 <_fstat+0xc>)
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	4770      	bx	lr
 8002200:	20000120 	.word	0x20000120

08002204 <_isatty>:
 8002204:	2258      	movs	r2, #88	; 0x58
 8002206:	4b02      	ldr	r3, [pc, #8]	; (8002210 <_isatty+0xc>)
 8002208:	2000      	movs	r0, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000120 	.word	0x20000120

08002214 <_lseek>:
 8002214:	2258      	movs	r2, #88	; 0x58
 8002216:	4b02      	ldr	r3, [pc, #8]	; (8002220 <_lseek+0xc>)
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	4770      	bx	lr
 8002220:	20000120 	.word	0x20000120

08002224 <_read>:
 8002224:	2258      	movs	r2, #88	; 0x58
 8002226:	4b02      	ldr	r3, [pc, #8]	; (8002230 <_read+0xc>)
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4770      	bx	lr
 8002230:	20000120 	.word	0x20000120

08002234 <_sbrk>:
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <_sbrk+0x14>)
 8002236:	4602      	mov	r2, r0
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	b909      	cbnz	r1, 8002240 <_sbrk+0xc>
 800223c:	4903      	ldr	r1, [pc, #12]	; (800224c <_sbrk+0x18>)
 800223e:	6019      	str	r1, [r3, #0]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	4402      	add	r2, r0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	4770      	bx	lr
 8002248:	20000098 	.word	0x20000098
 800224c:	20000124 	.word	0x20000124

08002250 <_init>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	bf00      	nop
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr

0800225c <_fini>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr
