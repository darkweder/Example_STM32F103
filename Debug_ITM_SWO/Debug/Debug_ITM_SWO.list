
Debug_ITM_SWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001b54  08001b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c30  08001c30  00011c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c34  08001c34  00011c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000070  08001ca8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a0  08001ca8  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000078d9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015c8  00000000  00000000  00027972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000efd  00000000  00000000  00028f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000328  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000468  00000000  00000000  0002a160  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001ed2  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001599  00000000  00000000  0002c49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002da33  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e98  00000000  00000000  0002dab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  0002e948  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  0002e9cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b3c 	.word	0x08001b3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001b3c 	.word	0x08001b3c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fc84 	bl	8000ab8 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000098 	.word	0x20000098
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>
	...

08000484 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000484:	6803      	ldr	r3, [r0, #0]
{
 8000486:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048a:	07db      	lsls	r3, r3, #31
{
 800048c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048e:	d410      	bmi.n	80004b2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000490:	682b      	ldr	r3, [r5, #0]
 8000492:	079f      	lsls	r7, r3, #30
 8000494:	d45e      	bmi.n	8000554 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000496:	682b      	ldr	r3, [r5, #0]
 8000498:	0719      	lsls	r1, r3, #28
 800049a:	f100 8095 	bmi.w	80005c8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	075a      	lsls	r2, r3, #29
 80004a2:	f100 80bf 	bmi.w	8000624 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004a6:	69ea      	ldr	r2, [r5, #28]
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	f040 812d 	bne.w	8000708 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	e014      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b2:	4c90      	ldr	r4, [pc, #576]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80004b4:	6863      	ldr	r3, [r4, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d007      	beq.n	80004ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d10c      	bne.n	80004e2 <HAL_RCC_OscConfig+0x5e>
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	03de      	lsls	r6, r3, #15
 80004cc:	d509      	bpl.n	80004e2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ce:	6823      	ldr	r3, [r4, #0]
 80004d0:	039c      	lsls	r4, r3, #14
 80004d2:	d5dd      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
 80004d4:	686b      	ldr	r3, [r5, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1da      	bne.n	8000490 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
}
 80004dc:	b002      	add	sp, #8
 80004de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e2:	686b      	ldr	r3, [r5, #4]
 80004e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e8:	d110      	bne.n	800050c <HAL_RCC_OscConfig+0x88>
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f2:	f7ff fe6d 	bl	80001d0 <HAL_GetTick>
 80004f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	0398      	lsls	r0, r3, #14
 80004fc:	d4c8      	bmi.n	8000490 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004fe:	f7ff fe67 	bl	80001d0 <HAL_GetTick>
 8000502:	1b80      	subs	r0, r0, r6
 8000504:	2864      	cmp	r0, #100	; 0x64
 8000506:	d9f7      	bls.n	80004f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000508:	2003      	movs	r0, #3
 800050a:	e7e7      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050c:	b99b      	cbnz	r3, 8000536 <HAL_RCC_OscConfig+0xb2>
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000514:	6023      	str	r3, [r4, #0]
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	0399      	lsls	r1, r3, #14
 8000528:	d5b2      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe51 	bl	80001d0 <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9f7      	bls.n	8000524 <HAL_RCC_OscConfig+0xa0>
 8000534:	e7e8      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	d103      	bne.n	8000546 <HAL_RCC_OscConfig+0xc2>
 800053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000542:	6023      	str	r3, [r4, #0]
 8000544:	e7d1      	b.n	80004ea <HAL_RCC_OscConfig+0x66>
 8000546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	e7cd      	b.n	80004f0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000554:	4c67      	ldr	r4, [pc, #412]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000556:	6863      	ldr	r3, [r4, #4]
 8000558:	f013 0f0c 	tst.w	r3, #12
 800055c:	d007      	beq.n	800056e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800055e:	6863      	ldr	r3, [r4, #4]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	2b08      	cmp	r3, #8
 8000566:	d110      	bne.n	800058a <HAL_RCC_OscConfig+0x106>
 8000568:	6863      	ldr	r3, [r4, #4]
 800056a:	03da      	lsls	r2, r3, #15
 800056c:	d40d      	bmi.n	800058a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	079b      	lsls	r3, r3, #30
 8000572:	d502      	bpl.n	800057a <HAL_RCC_OscConfig+0xf6>
 8000574:	692b      	ldr	r3, [r5, #16]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d1af      	bne.n	80004da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	696a      	ldr	r2, [r5, #20]
 800057e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	e785      	b.n	8000496 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800058a:	692a      	ldr	r2, [r5, #16]
 800058c:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <HAL_RCC_OscConfig+0x274>)
 800058e:	b16a      	cbz	r2, 80005ac <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000594:	f7ff fe1c 	bl	80001d0 <HAL_GetTick>
 8000598:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	079f      	lsls	r7, r3, #30
 800059e:	d4ec      	bmi.n	800057a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a0:	f7ff fe16 	bl	80001d0 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	2802      	cmp	r0, #2
 80005a8:	d9f7      	bls.n	800059a <HAL_RCC_OscConfig+0x116>
 80005aa:	e7ad      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ae:	f7ff fe0f 	bl	80001d0 <HAL_GetTick>
 80005b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	0798      	lsls	r0, r3, #30
 80005b8:	f57f af6d 	bpl.w	8000496 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fe08 	bl	80001d0 <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f6      	bls.n	80005b4 <HAL_RCC_OscConfig+0x130>
 80005c6:	e79f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005c8:	69aa      	ldr	r2, [r5, #24]
 80005ca:	4c4a      	ldr	r4, [pc, #296]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80005cc:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <HAL_RCC_OscConfig+0x278>)
 80005ce:	b1da      	cbz	r2, 8000608 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005d4:	f7ff fdfc 	bl	80001d0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005dc:	079b      	lsls	r3, r3, #30
 80005de:	d50d      	bpl.n	80005fc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005e4:	4b46      	ldr	r3, [pc, #280]	; (8000700 <HAL_RCC_OscConfig+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ee:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005f0:	9b01      	ldr	r3, [sp, #4]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f9      	bne.n	80005ee <HAL_RCC_OscConfig+0x16a>
 80005fa:	e750      	b.n	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005fc:	f7ff fde8 	bl	80001d0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9e9      	bls.n	80005da <HAL_RCC_OscConfig+0x156>
 8000606:	e77f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000608:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800060a:	f7ff fde1 	bl	80001d0 <HAL_GetTick>
 800060e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000612:	079f      	lsls	r7, r3, #30
 8000614:	f57f af43 	bpl.w	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fdda 	bl	80001d0 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9f6      	bls.n	8000610 <HAL_RCC_OscConfig+0x18c>
 8000622:	e771      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000624:	4c33      	ldr	r4, [pc, #204]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000626:	69e3      	ldr	r3, [r4, #28]
 8000628:	00d8      	lsls	r0, r3, #3
 800062a:	d424      	bmi.n	8000676 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800062c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	69e3      	ldr	r3, [r4, #28]
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61e3      	str	r3, [r4, #28]
 8000636:	69e3      	ldr	r3, [r4, #28]
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000640:	4e30      	ldr	r6, [pc, #192]	; (8000704 <HAL_RCC_OscConfig+0x280>)
 8000642:	6833      	ldr	r3, [r6, #0]
 8000644:	05d9      	lsls	r1, r3, #23
 8000646:	d518      	bpl.n	800067a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000648:	68eb      	ldr	r3, [r5, #12]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d126      	bne.n	800069c <HAL_RCC_OscConfig+0x218>
 800064e:	6a23      	ldr	r3, [r4, #32]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000656:	f7ff fdbb 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800065a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800065e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000660:	6a23      	ldr	r3, [r4, #32]
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	d53f      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000666:	2f00      	cmp	r7, #0
 8000668:	f43f af1d 	beq.w	80004a6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800066c:	69e3      	ldr	r3, [r4, #28]
 800066e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000672:	61e3      	str	r3, [r4, #28]
 8000674:	e717      	b.n	80004a6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000676:	2700      	movs	r7, #0
 8000678:	e7e2      	b.n	8000640 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800067a:	6833      	ldr	r3, [r6, #0]
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000688:	6833      	ldr	r3, [r6, #0]
 800068a:	05da      	lsls	r2, r3, #23
 800068c:	d4dc      	bmi.n	8000648 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	eba0 0008 	sub.w	r0, r0, r8
 8000696:	2864      	cmp	r0, #100	; 0x64
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x204>
 800069a:	e735      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800069c:	b9ab      	cbnz	r3, 80006ca <HAL_RCC_OscConfig+0x246>
 800069e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	f023 0301 	bic.w	r3, r3, #1
 80006a8:	6223      	str	r3, [r4, #32]
 80006aa:	6a23      	ldr	r3, [r4, #32]
 80006ac:	f023 0304 	bic.w	r3, r3, #4
 80006b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006b8:	6a23      	ldr	r3, [r4, #32]
 80006ba:	0798      	lsls	r0, r3, #30
 80006bc:	d5d3      	bpl.n	8000666 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	4540      	cmp	r0, r8
 80006c6:	d9f7      	bls.n	80006b8 <HAL_RCC_OscConfig+0x234>
 80006c8:	e71e      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	6a23      	ldr	r3, [r4, #32]
 80006ce:	d103      	bne.n	80006d8 <HAL_RCC_OscConfig+0x254>
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	e7ba      	b.n	800064e <HAL_RCC_OscConfig+0x1ca>
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	6223      	str	r3, [r4, #32]
 80006de:	6a23      	ldr	r3, [r4, #32]
 80006e0:	f023 0304 	bic.w	r3, r3, #4
 80006e4:	e7b6      	b.n	8000654 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e6:	f7ff fd73 	bl	80001d0 <HAL_GetTick>
 80006ea:	eba0 0008 	sub.w	r0, r0, r8
 80006ee:	42b0      	cmp	r0, r6
 80006f0:	d9b6      	bls.n	8000660 <HAL_RCC_OscConfig+0x1dc>
 80006f2:	e709      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 80006f4:	40021000 	.word	0x40021000
 80006f8:	42420000 	.word	0x42420000
 80006fc:	42420480 	.word	0x42420480
 8000700:	20000008 	.word	0x20000008
 8000704:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000708:	4c22      	ldr	r4, [pc, #136]	; (8000794 <HAL_RCC_OscConfig+0x310>)
 800070a:	6863      	ldr	r3, [r4, #4]
 800070c:	f003 030c 	and.w	r3, r3, #12
 8000710:	2b08      	cmp	r3, #8
 8000712:	f43f aee2 	beq.w	80004da <HAL_RCC_OscConfig+0x56>
 8000716:	2300      	movs	r3, #0
 8000718:	4e1f      	ldr	r6, [pc, #124]	; (8000798 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800071c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071e:	d12b      	bne.n	8000778 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000720:	f7ff fd56 	bl	80001d0 <HAL_GetTick>
 8000724:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	0199      	lsls	r1, r3, #6
 800072a:	d41f      	bmi.n	800076c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800072c:	6a2b      	ldr	r3, [r5, #32]
 800072e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000732:	d105      	bne.n	8000740 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000734:	6862      	ldr	r2, [r4, #4]
 8000736:	68a9      	ldr	r1, [r5, #8]
 8000738:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800073c:	430a      	orrs	r2, r1
 800073e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000740:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000742:	6862      	ldr	r2, [r4, #4]
 8000744:	430b      	orrs	r3, r1
 8000746:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800074a:	4313      	orrs	r3, r2
 800074c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800074e:	2301      	movs	r3, #1
 8000750:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000752:	f7ff fd3d 	bl	80001d0 <HAL_GetTick>
 8000756:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	019a      	lsls	r2, r3, #6
 800075c:	f53f aea7 	bmi.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000760:	f7ff fd36 	bl	80001d0 <HAL_GetTick>
 8000764:	1b40      	subs	r0, r0, r5
 8000766:	2802      	cmp	r0, #2
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x2d4>
 800076a:	e6cd      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9d7      	bls.n	8000726 <HAL_RCC_OscConfig+0x2a2>
 8000776:	e6c7      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000778:	f7ff fd2a 	bl	80001d0 <HAL_GetTick>
 800077c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	f57f ae94 	bpl.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	1b40      	subs	r0, r0, r5
 800078c:	2802      	cmp	r0, #2
 800078e:	d9f6      	bls.n	800077e <HAL_RCC_OscConfig+0x2fa>
 8000790:	e6ba      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	42420060 	.word	0x42420060

0800079c <HAL_RCC_GetSysClockFreq>:
{
 800079c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007a0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a2:	ac02      	add	r4, sp, #8
 80007a4:	f103 0510 	add.w	r5, r3, #16
 80007a8:	4622      	mov	r2, r4
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	3308      	adds	r3, #8
 80007b0:	c203      	stmia	r2!, {r0, r1}
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	4614      	mov	r4, r2
 80007b6:	d1f7      	bne.n	80007a8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007b8:	2301      	movs	r3, #1
 80007ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007c0:	4911      	ldr	r1, [pc, #68]	; (8000808 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007c6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007c8:	f003 020c 	and.w	r2, r3, #12
 80007cc:	2a08      	cmp	r2, #8
 80007ce:	d117      	bne.n	8000800 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007d0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007d4:	a806      	add	r0, sp, #24
 80007d6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007d8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007de:	d50c      	bpl.n	80007fa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ea:	aa06      	add	r2, sp, #24
 80007ec:	4413      	add	r3, r2
 80007ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007f6:	b007      	add	sp, #28
 80007f8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_RCC_GetSysClockFreq+0x74>)
 80007fc:	4350      	muls	r0, r2
 80007fe:	e7fa      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000802:	e7f8      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000804:	08001b54 	.word	0x08001b54
 8000808:	40021000 	.word	0x40021000
 800080c:	007a1200 	.word	0x007a1200
 8000810:	003d0900 	.word	0x003d0900

08000814 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000814:	4a54      	ldr	r2, [pc, #336]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
{
 8000816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081a:	6813      	ldr	r3, [r2, #0]
{
 800081c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	428b      	cmp	r3, r1
{
 8000824:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	d32a      	bcc.n	800087e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000828:	6829      	ldr	r1, [r5, #0]
 800082a:	078c      	lsls	r4, r1, #30
 800082c:	d434      	bmi.n	8000898 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800082e:	07ca      	lsls	r2, r1, #31
 8000830:	d447      	bmi.n	80008c2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
 8000834:	6813      	ldr	r3, [r2, #0]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	429e      	cmp	r6, r3
 800083c:	f0c0 8082 	bcc.w	8000944 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000840:	682a      	ldr	r2, [r5, #0]
 8000842:	4c4a      	ldr	r4, [pc, #296]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 8000844:	f012 0f04 	tst.w	r2, #4
 8000848:	f040 8087 	bne.w	800095a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800084c:	0713      	lsls	r3, r2, #28
 800084e:	d506      	bpl.n	800085e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	692a      	ldr	r2, [r5, #16]
 8000854:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000858:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800085c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800085e:	f7ff ff9d 	bl	800079c <HAL_RCC_GetSysClockFreq>
 8000862:	6863      	ldr	r3, [r4, #4]
 8000864:	4a42      	ldr	r2, [pc, #264]	; (8000970 <HAL_RCC_ClockConfig+0x15c>)
 8000866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800086a:	5cd3      	ldrb	r3, [r2, r3]
 800086c:	40d8      	lsrs	r0, r3
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <HAL_RCC_ClockConfig+0x160>)
 8000870:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
}
 800087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f023 0307 	bic.w	r3, r3, #7
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	4299      	cmp	r1, r3
 8000890:	d0ca      	beq.n	8000828 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800089a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800089e:	bf1e      	ittt	ne
 80008a0:	685a      	ldrne	r2, [r3, #4]
 80008a2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008a6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008a8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008aa:	bf42      	ittt	mi
 80008ac:	685a      	ldrmi	r2, [r3, #4]
 80008ae:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008b2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	68a8      	ldr	r0, [r5, #8]
 80008b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008bc:	4302      	orrs	r2, r0
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	e7b5      	b.n	800082e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c2:	686a      	ldr	r2, [r5, #4]
 80008c4:	4c29      	ldr	r4, [pc, #164]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 80008c6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ca:	d11c      	bne.n	8000906 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	d0df      	beq.n	8000892 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d8:	f023 0303 	bic.w	r3, r3, #3
 80008dc:	4313      	orrs	r3, r2
 80008de:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e0:	f7ff fc76 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d114      	bne.n	8000916 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d09d      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f6:	f7ff fc6b 	bl	80001d0 <HAL_GetTick>
 80008fa:	1bc0      	subs	r0, r0, r7
 80008fc:	4540      	cmp	r0, r8
 80008fe:	d9f5      	bls.n	80008ec <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000900:	2003      	movs	r0, #3
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000906:	2a02      	cmp	r2, #2
 8000908:	d102      	bne.n	8000910 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800090e:	e7df      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	f013 0f02 	tst.w	r3, #2
 8000914:	e7dc      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000916:	2b02      	cmp	r3, #2
 8000918:	d10f      	bne.n	800093a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800091a:	6863      	ldr	r3, [r4, #4]
 800091c:	f003 030c 	and.w	r3, r3, #12
 8000920:	2b08      	cmp	r3, #8
 8000922:	d086      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000924:	f7ff fc54 	bl	80001d0 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	4540      	cmp	r0, r8
 800092c:	d9f5      	bls.n	800091a <HAL_RCC_ClockConfig+0x106>
 800092e:	e7e7      	b.n	8000900 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000930:	f7ff fc4e 	bl	80001d0 <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	4540      	cmp	r0, r8
 8000938:	d8e2      	bhi.n	8000900 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	f013 0f0c 	tst.w	r3, #12
 8000940:	d1f6      	bne.n	8000930 <HAL_RCC_ClockConfig+0x11c>
 8000942:	e776      	b.n	8000832 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	4333      	orrs	r3, r6
 800094c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	429e      	cmp	r6, r3
 8000956:	d19c      	bne.n	8000892 <HAL_RCC_ClockConfig+0x7e>
 8000958:	e772      	b.n	8000840 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	68e9      	ldr	r1, [r5, #12]
 800095e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000962:	430b      	orrs	r3, r1
 8000964:	6063      	str	r3, [r4, #4]
 8000966:	e771      	b.n	800084c <HAL_RCC_ClockConfig+0x38>
 8000968:	40022000 	.word	0x40022000
 800096c:	40021000 	.word	0x40021000
 8000970:	08001b87 	.word	0x08001b87
 8000974:	20000008 	.word	0x20000008

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b510      	push	{r4, lr}
 800097a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	2100      	movs	r1, #0
 8000980:	a806      	add	r0, sp, #24
 8000982:	f000 f935 	bl	8000bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	2100      	movs	r1, #0
 8000988:	2214      	movs	r2, #20
 800098a:	a801      	add	r0, sp, #4
 800098c:	f000 f930 	bl	8000bf0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800099c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a2:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f7ff fd6b 	bl	8000484 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	4621      	mov	r1, r4
 80009ba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f7ff ff26 	bl	8000814 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80009c8:	b010      	add	sp, #64	; 0x40
 80009ca:	bd10      	pop	{r4, pc}

080009cc <main>:
{
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80009d0:	f7ff fbe0 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80009d4:	f7ff ffd0 	bl	8000978 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2210      	movs	r2, #16
 80009da:	2100      	movs	r1, #0
 80009dc:	eb0d 0002 	add.w	r0, sp, r2
 80009e0:	f000 f906 	bl	8000bf0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <main+0xa8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 80009ec:	4822      	ldr	r0, [pc, #136]	; (8000a78 <main+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	f042 0210 	orr.w	r2, r2, #16
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : led13_Pin */
  GPIO_InitStruct.Pin = led13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	f002 0210 	and.w	r2, r2, #16
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a00:	699a      	ldr	r2, [r3, #24]
	  printf("Hello World %d\n", i++);
 8000a02:	4d1e      	ldr	r5, [pc, #120]	; (8000a7c <main+0xb0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a04:	f042 0220 	orr.w	r2, r2, #32
 8000a08:	619a      	str	r2, [r3, #24]
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	f002 0220 	and.w	r2, r2, #32
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	699a      	ldr	r2, [r3, #24]
 8000a16:	f042 0204 	orr.w	r2, r2, #4
 8000a1a:	619a      	str	r2, [r3, #24]
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	f002 0204 	and.w	r2, r2, #4
 8000a22:	9202      	str	r2, [sp, #8]
 8000a24:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	699a      	ldr	r2, [r3, #24]
 8000a28:	f042 0208 	orr.w	r2, r2, #8
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	9303      	str	r3, [sp, #12]
 8000a38:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 8000a3a:	f7ff fd1d 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = led13_Pin;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	a904      	add	r1, sp, #16
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <main+0xac>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f7ff fc31 	bl	80002b8 <HAL_GPIO_Init>
  printf("Application start.\n");
 8000a56:	480a      	ldr	r0, [pc, #40]	; (8000a80 <main+0xb4>)
 8000a58:	f000 f946 	bl	8000ce8 <puts>
  int i = 0;
 8000a5c:	4621      	mov	r1, r4
	  printf("Hello World %d\n", i++);
 8000a5e:	4628      	mov	r0, r5
 8000a60:	1c4c      	adds	r4, r1, #1
 8000a62:	f000 f8cd 	bl	8000c00 <iprintf>
	  HAL_Delay(1000);
 8000a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6a:	f7ff fbb7 	bl	80001dc <HAL_Delay>
	  printf("Hello World %d\n", i++);
 8000a6e:	4621      	mov	r1, r4
 8000a70:	e7f5      	b.n	8000a5e <main+0x92>
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	08001b77 	.word	0x08001b77
 8000a80:	08001b64 	.word	0x08001b64

08000a84 <_write>:
}

/* USER CODE BEGIN 4 */
////////////////////////////////////// вывод в uart //////////////////////////////////////////////
int _write(int32_t file, uint8_t *ptr, int32_t len) // instrumentation trace macrocell (ITM)
{
 8000a84:	b510      	push	{r4, lr}
	int i;
	for(i = 0; i < len; i++)
 8000a86:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a88:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	db01      	blt.n	8000a94 <_write+0x10>
		ITM_SendChar(*ptr++);

	return len;
}
 8000a90:	4610      	mov	r0, r2
 8000a92:	bd10      	pop	{r4, pc}
 8000a94:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 8000a98:	07c0      	lsls	r0, r0, #31
 8000a9a:	d503      	bpl.n	8000aa4 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a9c:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aa0:	07c0      	lsls	r0, r0, #31
 8000aa2:	d402      	bmi.n	8000aaa <_write+0x26>
	for(i = 0; i < len; i++)
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	e7f1      	b.n	8000a8c <_write+0x8>
 8000aa8:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000aaa:	6820      	ldr	r0, [r4, #0]
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d0fb      	beq.n	8000aa8 <_write+0x24>
		ITM_SendChar(*ptr++);
 8000ab0:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ab2:	7020      	strb	r0, [r4, #0]
 8000ab4:	e7f6      	b.n	8000aa4 <_write+0x20>
	...

08000ab8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_MspInit+0x3c>)
{
 8000aba:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	f042 0201 	orr.w	r2, r2, #1
 8000ac2:	619a      	str	r2, [r3, #24]
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	f002 0201 	and.w	r2, r2, #1
 8000aca:	9200      	str	r2, [sp, #0]
 8000acc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ad4:	61da      	str	r2, [r3, #28]
 8000ad6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae2:	6853      	ldr	r3, [r2, #4]
 8000ae4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	b002      	add	sp, #8
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <NMI_Handler>:
 8000afc:	4770      	bx	lr

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler>

08000b06 <SVC_Handler>:
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f7ff bb54 	b.w	80001b8 <HAL_IncTick>

08000b10 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <SystemInit+0x40>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	f042 0201 	orr.w	r2, r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b1a:	6859      	ldr	r1, [r3, #4]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <SystemInit+0x44>)
 8000b1e:	400a      	ands	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b2c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b34:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000b3c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <SystemInit+0x48>)
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	f8ff0000 	.word	0xf8ff0000
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b78:	f842 3b04 	str.w	r3, [r2], #4

08000b7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b82:	f7ff ffc5 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b86:	f000 f80f 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff ff1f 	bl	80009cc <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b90:	08001c38 	.word	0x08001c38
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b98:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b9c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ba0:	200000a0 	.word	0x200000a0

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	2500      	movs	r5, #0
 8000bac:	4e0c      	ldr	r6, [pc, #48]	; (8000be0 <__libc_init_array+0x38>)
 8000bae:	4c0d      	ldr	r4, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bb0:	1ba4      	subs	r4, r4, r6
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	42a5      	cmp	r5, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	f000 ffc0 	bl	8001b3c <_init>
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	4e0a      	ldr	r6, [pc, #40]	; (8000be8 <__libc_init_array+0x40>)
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <__libc_init_array+0x44>)
 8000bc2:	1ba4      	subs	r4, r4, r6
 8000bc4:	10a4      	asrs	r4, r4, #2
 8000bc6:	42a5      	cmp	r5, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd0:	4798      	blx	r3
 8000bd2:	3501      	adds	r5, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bda:	4798      	blx	r3
 8000bdc:	3501      	adds	r5, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08001c30 	.word	0x08001c30
 8000be4:	08001c30 	.word	0x08001c30
 8000be8:	08001c30 	.word	0x08001c30
 8000bec:	08001c34 	.word	0x08001c34

08000bf0 <memset>:
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4402      	add	r2, r0
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d100      	bne.n	8000bfa <memset+0xa>
 8000bf8:	4770      	bx	lr
 8000bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8000bfe:	e7f9      	b.n	8000bf4 <memset+0x4>

08000c00 <iprintf>:
 8000c00:	b40f      	push	{r0, r1, r2, r3}
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <iprintf+0x2c>)
 8000c04:	b513      	push	{r0, r1, r4, lr}
 8000c06:	681c      	ldr	r4, [r3, #0]
 8000c08:	b124      	cbz	r4, 8000c14 <iprintf+0x14>
 8000c0a:	69a3      	ldr	r3, [r4, #24]
 8000c0c:	b913      	cbnz	r3, 8000c14 <iprintf+0x14>
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f000 fa24 	bl	800105c <__sinit>
 8000c14:	ab05      	add	r3, sp, #20
 8000c16:	9a04      	ldr	r2, [sp, #16]
 8000c18:	68a1      	ldr	r1, [r4, #8]
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	f000 fbdd 	bl	80013dc <_vfiprintf_r>
 8000c22:	b002      	add	sp, #8
 8000c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <_puts_r>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	460e      	mov	r6, r1
 8000c34:	4605      	mov	r5, r0
 8000c36:	b118      	cbz	r0, 8000c40 <_puts_r+0x10>
 8000c38:	6983      	ldr	r3, [r0, #24]
 8000c3a:	b90b      	cbnz	r3, 8000c40 <_puts_r+0x10>
 8000c3c:	f000 fa0e 	bl	800105c <__sinit>
 8000c40:	69ab      	ldr	r3, [r5, #24]
 8000c42:	68ac      	ldr	r4, [r5, #8]
 8000c44:	b913      	cbnz	r3, 8000c4c <_puts_r+0x1c>
 8000c46:	4628      	mov	r0, r5
 8000c48:	f000 fa08 	bl	800105c <__sinit>
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <_puts_r+0xac>)
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	d117      	bne.n	8000c82 <_puts_r+0x52>
 8000c52:	686c      	ldr	r4, [r5, #4]
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	071b      	lsls	r3, r3, #28
 8000c58:	d51d      	bpl.n	8000c96 <_puts_r+0x66>
 8000c5a:	6923      	ldr	r3, [r4, #16]
 8000c5c:	b1db      	cbz	r3, 8000c96 <_puts_r+0x66>
 8000c5e:	3e01      	subs	r6, #1
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60a3      	str	r3, [r4, #8]
 8000c6a:	b9e9      	cbnz	r1, 8000ca8 <_puts_r+0x78>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	da2e      	bge.n	8000cce <_puts_r+0x9e>
 8000c70:	4622      	mov	r2, r4
 8000c72:	210a      	movs	r1, #10
 8000c74:	4628      	mov	r0, r5
 8000c76:	f000 f83f 	bl	8000cf8 <__swbuf_r>
 8000c7a:	3001      	adds	r0, #1
 8000c7c:	d011      	beq.n	8000ca2 <_puts_r+0x72>
 8000c7e:	200a      	movs	r0, #10
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <_puts_r+0xb0>)
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d101      	bne.n	8000c8c <_puts_r+0x5c>
 8000c88:	68ac      	ldr	r4, [r5, #8]
 8000c8a:	e7e3      	b.n	8000c54 <_puts_r+0x24>
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_puts_r+0xb4>)
 8000c8e:	429c      	cmp	r4, r3
 8000c90:	bf08      	it	eq
 8000c92:	68ec      	ldreq	r4, [r5, #12]
 8000c94:	e7de      	b.n	8000c54 <_puts_r+0x24>
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 f87f 	bl	8000d9c <__swsetup_r>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d0dd      	beq.n	8000c5e <_puts_r+0x2e>
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da04      	bge.n	8000cb6 <_puts_r+0x86>
 8000cac:	69a2      	ldr	r2, [r4, #24]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	db06      	blt.n	8000cc0 <_puts_r+0x90>
 8000cb2:	290a      	cmp	r1, #10
 8000cb4:	d004      	beq.n	8000cc0 <_puts_r+0x90>
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	6022      	str	r2, [r4, #0]
 8000cbc:	7019      	strb	r1, [r3, #0]
 8000cbe:	e7cf      	b.n	8000c60 <_puts_r+0x30>
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f000 f818 	bl	8000cf8 <__swbuf_r>
 8000cc8:	3001      	adds	r0, #1
 8000cca:	d1c9      	bne.n	8000c60 <_puts_r+0x30>
 8000ccc:	e7e9      	b.n	8000ca2 <_puts_r+0x72>
 8000cce:	200a      	movs	r0, #10
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	6022      	str	r2, [r4, #0]
 8000cd6:	7018      	strb	r0, [r3, #0]
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	bf00      	nop
 8000cdc:	08001bb8 	.word	0x08001bb8
 8000ce0:	08001bd8 	.word	0x08001bd8
 8000ce4:	08001b98 	.word	0x08001b98

08000ce8 <puts>:
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <puts+0xc>)
 8000cea:	4601      	mov	r1, r0
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	f7ff bf9f 	b.w	8000c30 <_puts_r>
 8000cf2:	bf00      	nop
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <__swbuf_r>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	460e      	mov	r6, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	4605      	mov	r5, r0
 8000d00:	b118      	cbz	r0, 8000d0a <__swbuf_r+0x12>
 8000d02:	6983      	ldr	r3, [r0, #24]
 8000d04:	b90b      	cbnz	r3, 8000d0a <__swbuf_r+0x12>
 8000d06:	f000 f9a9 	bl	800105c <__sinit>
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <__swbuf_r+0x98>)
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d12a      	bne.n	8000d66 <__swbuf_r+0x6e>
 8000d10:	686c      	ldr	r4, [r5, #4]
 8000d12:	69a3      	ldr	r3, [r4, #24]
 8000d14:	60a3      	str	r3, [r4, #8]
 8000d16:	89a3      	ldrh	r3, [r4, #12]
 8000d18:	071a      	lsls	r2, r3, #28
 8000d1a:	d52e      	bpl.n	8000d7a <__swbuf_r+0x82>
 8000d1c:	6923      	ldr	r3, [r4, #16]
 8000d1e:	b363      	cbz	r3, 8000d7a <__swbuf_r+0x82>
 8000d20:	6923      	ldr	r3, [r4, #16]
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	b2f6      	uxtb	r6, r6
 8000d26:	1ac0      	subs	r0, r0, r3
 8000d28:	6963      	ldr	r3, [r4, #20]
 8000d2a:	4637      	mov	r7, r6
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	db04      	blt.n	8000d3a <__swbuf_r+0x42>
 8000d30:	4621      	mov	r1, r4
 8000d32:	4628      	mov	r0, r5
 8000d34:	f000 f928 	bl	8000f88 <_fflush_r>
 8000d38:	bb28      	cbnz	r0, 8000d86 <__swbuf_r+0x8e>
 8000d3a:	68a3      	ldr	r3, [r4, #8]
 8000d3c:	3001      	adds	r0, #1
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	60a3      	str	r3, [r4, #8]
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	6022      	str	r2, [r4, #0]
 8000d48:	701e      	strb	r6, [r3, #0]
 8000d4a:	6963      	ldr	r3, [r4, #20]
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	d004      	beq.n	8000d5a <__swbuf_r+0x62>
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	07db      	lsls	r3, r3, #31
 8000d54:	d519      	bpl.n	8000d8a <__swbuf_r+0x92>
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	d117      	bne.n	8000d8a <__swbuf_r+0x92>
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	f000 f913 	bl	8000f88 <_fflush_r>
 8000d62:	b190      	cbz	r0, 8000d8a <__swbuf_r+0x92>
 8000d64:	e00f      	b.n	8000d86 <__swbuf_r+0x8e>
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <__swbuf_r+0x9c>)
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d101      	bne.n	8000d70 <__swbuf_r+0x78>
 8000d6c:	68ac      	ldr	r4, [r5, #8]
 8000d6e:	e7d0      	b.n	8000d12 <__swbuf_r+0x1a>
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <__swbuf_r+0xa0>)
 8000d72:	429c      	cmp	r4, r3
 8000d74:	bf08      	it	eq
 8000d76:	68ec      	ldreq	r4, [r5, #12]
 8000d78:	e7cb      	b.n	8000d12 <__swbuf_r+0x1a>
 8000d7a:	4621      	mov	r1, r4
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	f000 f80d 	bl	8000d9c <__swsetup_r>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d0cc      	beq.n	8000d20 <__swbuf_r+0x28>
 8000d86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000d8a:	4638      	mov	r0, r7
 8000d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08001bb8 	.word	0x08001bb8
 8000d94:	08001bd8 	.word	0x08001bd8
 8000d98:	08001b98 	.word	0x08001b98

08000d9c <__swsetup_r>:
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <__swsetup_r+0xcc>)
 8000d9e:	b570      	push	{r4, r5, r6, lr}
 8000da0:	681d      	ldr	r5, [r3, #0]
 8000da2:	4606      	mov	r6, r0
 8000da4:	460c      	mov	r4, r1
 8000da6:	b125      	cbz	r5, 8000db2 <__swsetup_r+0x16>
 8000da8:	69ab      	ldr	r3, [r5, #24]
 8000daa:	b913      	cbnz	r3, 8000db2 <__swsetup_r+0x16>
 8000dac:	4628      	mov	r0, r5
 8000dae:	f000 f955 	bl	800105c <__sinit>
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <__swsetup_r+0xd0>)
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d10f      	bne.n	8000dd8 <__swsetup_r+0x3c>
 8000db8:	686c      	ldr	r4, [r5, #4]
 8000dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	0715      	lsls	r5, r2, #28
 8000dc2:	d42c      	bmi.n	8000e1e <__swsetup_r+0x82>
 8000dc4:	06d0      	lsls	r0, r2, #27
 8000dc6:	d411      	bmi.n	8000dec <__swsetup_r+0x50>
 8000dc8:	2209      	movs	r2, #9
 8000dca:	6032      	str	r2, [r6, #0]
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	81a3      	strh	r3, [r4, #12]
 8000dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <__swsetup_r+0xd4>)
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	d101      	bne.n	8000de2 <__swsetup_r+0x46>
 8000dde:	68ac      	ldr	r4, [r5, #8]
 8000de0:	e7eb      	b.n	8000dba <__swsetup_r+0x1e>
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <__swsetup_r+0xd8>)
 8000de4:	429c      	cmp	r4, r3
 8000de6:	bf08      	it	eq
 8000de8:	68ec      	ldreq	r4, [r5, #12]
 8000dea:	e7e6      	b.n	8000dba <__swsetup_r+0x1e>
 8000dec:	0751      	lsls	r1, r2, #29
 8000dee:	d512      	bpl.n	8000e16 <__swsetup_r+0x7a>
 8000df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000df2:	b141      	cbz	r1, 8000e06 <__swsetup_r+0x6a>
 8000df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d002      	beq.n	8000e02 <__swsetup_r+0x66>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 fa1b 	bl	8001238 <_free_r>
 8000e02:	2300      	movs	r3, #0
 8000e04:	6363      	str	r3, [r4, #52]	; 0x34
 8000e06:	89a3      	ldrh	r3, [r4, #12]
 8000e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e0c:	81a3      	strh	r3, [r4, #12]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6063      	str	r3, [r4, #4]
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	6023      	str	r3, [r4, #0]
 8000e16:	89a3      	ldrh	r3, [r4, #12]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	81a3      	strh	r3, [r4, #12]
 8000e1e:	6923      	ldr	r3, [r4, #16]
 8000e20:	b94b      	cbnz	r3, 8000e36 <__swsetup_r+0x9a>
 8000e22:	89a3      	ldrh	r3, [r4, #12]
 8000e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e2c:	d003      	beq.n	8000e36 <__swsetup_r+0x9a>
 8000e2e:	4621      	mov	r1, r4
 8000e30:	4630      	mov	r0, r6
 8000e32:	f000 f9c1 	bl	80011b8 <__smakebuf_r>
 8000e36:	89a2      	ldrh	r2, [r4, #12]
 8000e38:	f012 0301 	ands.w	r3, r2, #1
 8000e3c:	d00c      	beq.n	8000e58 <__swsetup_r+0xbc>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60a3      	str	r3, [r4, #8]
 8000e42:	6963      	ldr	r3, [r4, #20]
 8000e44:	425b      	negs	r3, r3
 8000e46:	61a3      	str	r3, [r4, #24]
 8000e48:	6923      	ldr	r3, [r4, #16]
 8000e4a:	b953      	cbnz	r3, 8000e62 <__swsetup_r+0xc6>
 8000e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000e54:	d1ba      	bne.n	8000dcc <__swsetup_r+0x30>
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	0792      	lsls	r2, r2, #30
 8000e5a:	bf58      	it	pl
 8000e5c:	6963      	ldrpl	r3, [r4, #20]
 8000e5e:	60a3      	str	r3, [r4, #8]
 8000e60:	e7f2      	b.n	8000e48 <__swsetup_r+0xac>
 8000e62:	2000      	movs	r0, #0
 8000e64:	e7f7      	b.n	8000e56 <__swsetup_r+0xba>
 8000e66:	bf00      	nop
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	08001bb8 	.word	0x08001bb8
 8000e70:	08001bd8 	.word	0x08001bd8
 8000e74:	08001b98 	.word	0x08001b98

08000e78 <__sflush_r>:
 8000e78:	898a      	ldrh	r2, [r1, #12]
 8000e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7e:	4605      	mov	r5, r0
 8000e80:	0710      	lsls	r0, r2, #28
 8000e82:	460c      	mov	r4, r1
 8000e84:	d45a      	bmi.n	8000f3c <__sflush_r+0xc4>
 8000e86:	684b      	ldr	r3, [r1, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dc05      	bgt.n	8000e98 <__sflush_r+0x20>
 8000e8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	dc02      	bgt.n	8000e98 <__sflush_r+0x20>
 8000e92:	2000      	movs	r0, #0
 8000e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d0f9      	beq.n	8000e92 <__sflush_r+0x1a>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ea4:	682f      	ldr	r7, [r5, #0]
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	d033      	beq.n	8000f12 <__sflush_r+0x9a>
 8000eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	075a      	lsls	r2, r3, #29
 8000eb0:	d505      	bpl.n	8000ebe <__sflush_r+0x46>
 8000eb2:	6863      	ldr	r3, [r4, #4]
 8000eb4:	1ac0      	subs	r0, r0, r3
 8000eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000eb8:	b10b      	cbz	r3, 8000ebe <__sflush_r+0x46>
 8000eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ebc:	1ac0      	subs	r0, r0, r3
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ec4:	6a21      	ldr	r1, [r4, #32]
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	47b0      	blx	r6
 8000eca:	1c43      	adds	r3, r0, #1
 8000ecc:	89a3      	ldrh	r3, [r4, #12]
 8000ece:	d106      	bne.n	8000ede <__sflush_r+0x66>
 8000ed0:	6829      	ldr	r1, [r5, #0]
 8000ed2:	291d      	cmp	r1, #29
 8000ed4:	d84b      	bhi.n	8000f6e <__sflush_r+0xf6>
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <__sflush_r+0x10c>)
 8000ed8:	40ca      	lsrs	r2, r1
 8000eda:	07d6      	lsls	r6, r2, #31
 8000edc:	d547      	bpl.n	8000f6e <__sflush_r+0xf6>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	6062      	str	r2, [r4, #4]
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	04d9      	lsls	r1, r3, #19
 8000ee6:	6022      	str	r2, [r4, #0]
 8000ee8:	d504      	bpl.n	8000ef4 <__sflush_r+0x7c>
 8000eea:	1c42      	adds	r2, r0, #1
 8000eec:	d101      	bne.n	8000ef2 <__sflush_r+0x7a>
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	b903      	cbnz	r3, 8000ef4 <__sflush_r+0x7c>
 8000ef2:	6560      	str	r0, [r4, #84]	; 0x54
 8000ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ef6:	602f      	str	r7, [r5, #0]
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d0ca      	beq.n	8000e92 <__sflush_r+0x1a>
 8000efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d002      	beq.n	8000f0a <__sflush_r+0x92>
 8000f04:	4628      	mov	r0, r5
 8000f06:	f000 f997 	bl	8001238 <_free_r>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f12:	6a21      	ldr	r1, [r4, #32]
 8000f14:	2301      	movs	r3, #1
 8000f16:	4628      	mov	r0, r5
 8000f18:	47b0      	blx	r6
 8000f1a:	1c41      	adds	r1, r0, #1
 8000f1c:	d1c6      	bne.n	8000eac <__sflush_r+0x34>
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0c3      	beq.n	8000eac <__sflush_r+0x34>
 8000f24:	2b1d      	cmp	r3, #29
 8000f26:	d001      	beq.n	8000f2c <__sflush_r+0xb4>
 8000f28:	2b16      	cmp	r3, #22
 8000f2a:	d101      	bne.n	8000f30 <__sflush_r+0xb8>
 8000f2c:	602f      	str	r7, [r5, #0]
 8000f2e:	e7b0      	b.n	8000e92 <__sflush_r+0x1a>
 8000f30:	89a3      	ldrh	r3, [r4, #12]
 8000f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f36:	81a3      	strh	r3, [r4, #12]
 8000f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f3c:	690f      	ldr	r7, [r1, #16]
 8000f3e:	2f00      	cmp	r7, #0
 8000f40:	d0a7      	beq.n	8000e92 <__sflush_r+0x1a>
 8000f42:	0793      	lsls	r3, r2, #30
 8000f44:	bf18      	it	ne
 8000f46:	2300      	movne	r3, #0
 8000f48:	680e      	ldr	r6, [r1, #0]
 8000f4a:	bf08      	it	eq
 8000f4c:	694b      	ldreq	r3, [r1, #20]
 8000f4e:	eba6 0807 	sub.w	r8, r6, r7
 8000f52:	600f      	str	r7, [r1, #0]
 8000f54:	608b      	str	r3, [r1, #8]
 8000f56:	f1b8 0f00 	cmp.w	r8, #0
 8000f5a:	dd9a      	ble.n	8000e92 <__sflush_r+0x1a>
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	463a      	mov	r2, r7
 8000f60:	6a21      	ldr	r1, [r4, #32]
 8000f62:	4628      	mov	r0, r5
 8000f64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f66:	47b0      	blx	r6
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	dc07      	bgt.n	8000f7c <__sflush_r+0x104>
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f72:	81a3      	strh	r3, [r4, #12]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f7c:	4407      	add	r7, r0
 8000f7e:	eba8 0800 	sub.w	r8, r8, r0
 8000f82:	e7e8      	b.n	8000f56 <__sflush_r+0xde>
 8000f84:	20400001 	.word	0x20400001

08000f88 <_fflush_r>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	690b      	ldr	r3, [r1, #16]
 8000f8c:	4605      	mov	r5, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	b1db      	cbz	r3, 8000fca <_fflush_r+0x42>
 8000f92:	b118      	cbz	r0, 8000f9c <_fflush_r+0x14>
 8000f94:	6983      	ldr	r3, [r0, #24]
 8000f96:	b90b      	cbnz	r3, 8000f9c <_fflush_r+0x14>
 8000f98:	f000 f860 	bl	800105c <__sinit>
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <_fflush_r+0x48>)
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	d109      	bne.n	8000fb6 <_fflush_r+0x2e>
 8000fa2:	686c      	ldr	r4, [r5, #4]
 8000fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fa8:	b17b      	cbz	r3, 8000fca <_fflush_r+0x42>
 8000faa:	4621      	mov	r1, r4
 8000fac:	4628      	mov	r0, r5
 8000fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fb2:	f7ff bf61 	b.w	8000e78 <__sflush_r>
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_fflush_r+0x4c>)
 8000fb8:	429c      	cmp	r4, r3
 8000fba:	d101      	bne.n	8000fc0 <_fflush_r+0x38>
 8000fbc:	68ac      	ldr	r4, [r5, #8]
 8000fbe:	e7f1      	b.n	8000fa4 <_fflush_r+0x1c>
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <_fflush_r+0x50>)
 8000fc2:	429c      	cmp	r4, r3
 8000fc4:	bf08      	it	eq
 8000fc6:	68ec      	ldreq	r4, [r5, #12]
 8000fc8:	e7ec      	b.n	8000fa4 <_fflush_r+0x1c>
 8000fca:	2000      	movs	r0, #0
 8000fcc:	bd38      	pop	{r3, r4, r5, pc}
 8000fce:	bf00      	nop
 8000fd0:	08001bb8 	.word	0x08001bb8
 8000fd4:	08001bd8 	.word	0x08001bd8
 8000fd8:	08001b98 	.word	0x08001b98

08000fdc <_cleanup_r>:
 8000fdc:	4901      	ldr	r1, [pc, #4]	; (8000fe4 <_cleanup_r+0x8>)
 8000fde:	f000 b8a9 	b.w	8001134 <_fwalk_reent>
 8000fe2:	bf00      	nop
 8000fe4:	08000f89 	.word	0x08000f89

08000fe8 <std.isra.0>:
 8000fe8:	2300      	movs	r3, #0
 8000fea:	b510      	push	{r4, lr}
 8000fec:	4604      	mov	r4, r0
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	6043      	str	r3, [r0, #4]
 8000ff2:	6083      	str	r3, [r0, #8]
 8000ff4:	8181      	strh	r1, [r0, #12]
 8000ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8000ff8:	81c2      	strh	r2, [r0, #14]
 8000ffa:	6103      	str	r3, [r0, #16]
 8000ffc:	6143      	str	r3, [r0, #20]
 8000ffe:	6183      	str	r3, [r0, #24]
 8001000:	4619      	mov	r1, r3
 8001002:	2208      	movs	r2, #8
 8001004:	305c      	adds	r0, #92	; 0x5c
 8001006:	f7ff fdf3 	bl	8000bf0 <memset>
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <std.isra.0+0x38>)
 800100c:	6224      	str	r4, [r4, #32]
 800100e:	6263      	str	r3, [r4, #36]	; 0x24
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <std.isra.0+0x3c>)
 8001012:	62a3      	str	r3, [r4, #40]	; 0x28
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <std.isra.0+0x40>)
 8001016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <std.isra.0+0x44>)
 800101a:	6323      	str	r3, [r4, #48]	; 0x30
 800101c:	bd10      	pop	{r4, pc}
 800101e:	bf00      	nop
 8001020:	08001959 	.word	0x08001959
 8001024:	0800197b 	.word	0x0800197b
 8001028:	080019b3 	.word	0x080019b3
 800102c:	080019d7 	.word	0x080019d7

08001030 <__sfmoreglue>:
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	2568      	movs	r5, #104	; 0x68
 8001034:	1e4a      	subs	r2, r1, #1
 8001036:	4355      	muls	r5, r2
 8001038:	460e      	mov	r6, r1
 800103a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800103e:	f000 f947 	bl	80012d0 <_malloc_r>
 8001042:	4604      	mov	r4, r0
 8001044:	b140      	cbz	r0, 8001058 <__sfmoreglue+0x28>
 8001046:	2100      	movs	r1, #0
 8001048:	e880 0042 	stmia.w	r0, {r1, r6}
 800104c:	300c      	adds	r0, #12
 800104e:	60a0      	str	r0, [r4, #8]
 8001050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001054:	f7ff fdcc 	bl	8000bf0 <memset>
 8001058:	4620      	mov	r0, r4
 800105a:	bd70      	pop	{r4, r5, r6, pc}

0800105c <__sinit>:
 800105c:	6983      	ldr	r3, [r0, #24]
 800105e:	b510      	push	{r4, lr}
 8001060:	4604      	mov	r4, r0
 8001062:	bb33      	cbnz	r3, 80010b2 <__sinit+0x56>
 8001064:	6483      	str	r3, [r0, #72]	; 0x48
 8001066:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001068:	6503      	str	r3, [r0, #80]	; 0x50
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <__sinit+0x58>)
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <__sinit+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6282      	str	r2, [r0, #40]	; 0x28
 8001072:	4298      	cmp	r0, r3
 8001074:	bf04      	itt	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	6183      	streq	r3, [r0, #24]
 800107a:	f000 f81f 	bl	80010bc <__sfp>
 800107e:	6060      	str	r0, [r4, #4]
 8001080:	4620      	mov	r0, r4
 8001082:	f000 f81b 	bl	80010bc <__sfp>
 8001086:	60a0      	str	r0, [r4, #8]
 8001088:	4620      	mov	r0, r4
 800108a:	f000 f817 	bl	80010bc <__sfp>
 800108e:	2200      	movs	r2, #0
 8001090:	60e0      	str	r0, [r4, #12]
 8001092:	2104      	movs	r1, #4
 8001094:	6860      	ldr	r0, [r4, #4]
 8001096:	f7ff ffa7 	bl	8000fe8 <std.isra.0>
 800109a:	2201      	movs	r2, #1
 800109c:	2109      	movs	r1, #9
 800109e:	68a0      	ldr	r0, [r4, #8]
 80010a0:	f7ff ffa2 	bl	8000fe8 <std.isra.0>
 80010a4:	2202      	movs	r2, #2
 80010a6:	2112      	movs	r1, #18
 80010a8:	68e0      	ldr	r0, [r4, #12]
 80010aa:	f7ff ff9d 	bl	8000fe8 <std.isra.0>
 80010ae:	2301      	movs	r3, #1
 80010b0:	61a3      	str	r3, [r4, #24]
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	08001bf8 	.word	0x08001bf8
 80010b8:	08000fdd 	.word	0x08000fdd

080010bc <__sfp>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <__sfp+0x74>)
 80010c0:	4607      	mov	r7, r0
 80010c2:	681e      	ldr	r6, [r3, #0]
 80010c4:	69b3      	ldr	r3, [r6, #24]
 80010c6:	b913      	cbnz	r3, 80010ce <__sfp+0x12>
 80010c8:	4630      	mov	r0, r6
 80010ca:	f7ff ffc7 	bl	800105c <__sinit>
 80010ce:	3648      	adds	r6, #72	; 0x48
 80010d0:	68b4      	ldr	r4, [r6, #8]
 80010d2:	6873      	ldr	r3, [r6, #4]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	d503      	bpl.n	80010e0 <__sfp+0x24>
 80010d8:	6833      	ldr	r3, [r6, #0]
 80010da:	b133      	cbz	r3, 80010ea <__sfp+0x2e>
 80010dc:	6836      	ldr	r6, [r6, #0]
 80010de:	e7f7      	b.n	80010d0 <__sfp+0x14>
 80010e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80010e4:	b16d      	cbz	r5, 8001102 <__sfp+0x46>
 80010e6:	3468      	adds	r4, #104	; 0x68
 80010e8:	e7f4      	b.n	80010d4 <__sfp+0x18>
 80010ea:	2104      	movs	r1, #4
 80010ec:	4638      	mov	r0, r7
 80010ee:	f7ff ff9f 	bl	8001030 <__sfmoreglue>
 80010f2:	6030      	str	r0, [r6, #0]
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1f1      	bne.n	80010dc <__sfp+0x20>
 80010f8:	230c      	movs	r3, #12
 80010fa:	4604      	mov	r4, r0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4620      	mov	r0, r4
 8001100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001106:	81e3      	strh	r3, [r4, #14]
 8001108:	2301      	movs	r3, #1
 800110a:	6665      	str	r5, [r4, #100]	; 0x64
 800110c:	81a3      	strh	r3, [r4, #12]
 800110e:	6025      	str	r5, [r4, #0]
 8001110:	60a5      	str	r5, [r4, #8]
 8001112:	6065      	str	r5, [r4, #4]
 8001114:	6125      	str	r5, [r4, #16]
 8001116:	6165      	str	r5, [r4, #20]
 8001118:	61a5      	str	r5, [r4, #24]
 800111a:	2208      	movs	r2, #8
 800111c:	4629      	mov	r1, r5
 800111e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001122:	f7ff fd65 	bl	8000bf0 <memset>
 8001126:	6365      	str	r5, [r4, #52]	; 0x34
 8001128:	63a5      	str	r5, [r4, #56]	; 0x38
 800112a:	64a5      	str	r5, [r4, #72]	; 0x48
 800112c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800112e:	e7e6      	b.n	80010fe <__sfp+0x42>
 8001130:	08001bf8 	.word	0x08001bf8

08001134 <_fwalk_reent>:
 8001134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001138:	4680      	mov	r8, r0
 800113a:	4689      	mov	r9, r1
 800113c:	2600      	movs	r6, #0
 800113e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001142:	b914      	cbnz	r4, 800114a <_fwalk_reent+0x16>
 8001144:	4630      	mov	r0, r6
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114a:	68a5      	ldr	r5, [r4, #8]
 800114c:	6867      	ldr	r7, [r4, #4]
 800114e:	3f01      	subs	r7, #1
 8001150:	d501      	bpl.n	8001156 <_fwalk_reent+0x22>
 8001152:	6824      	ldr	r4, [r4, #0]
 8001154:	e7f5      	b.n	8001142 <_fwalk_reent+0xe>
 8001156:	89ab      	ldrh	r3, [r5, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d907      	bls.n	800116c <_fwalk_reent+0x38>
 800115c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001160:	3301      	adds	r3, #1
 8001162:	d003      	beq.n	800116c <_fwalk_reent+0x38>
 8001164:	4629      	mov	r1, r5
 8001166:	4640      	mov	r0, r8
 8001168:	47c8      	blx	r9
 800116a:	4306      	orrs	r6, r0
 800116c:	3568      	adds	r5, #104	; 0x68
 800116e:	e7ee      	b.n	800114e <_fwalk_reent+0x1a>

08001170 <__swhatbuf_r>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	460e      	mov	r6, r1
 8001174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001178:	b090      	sub	sp, #64	; 0x40
 800117a:	2900      	cmp	r1, #0
 800117c:	4614      	mov	r4, r2
 800117e:	461d      	mov	r5, r3
 8001180:	da07      	bge.n	8001192 <__swhatbuf_r+0x22>
 8001182:	2300      	movs	r3, #0
 8001184:	602b      	str	r3, [r5, #0]
 8001186:	89b3      	ldrh	r3, [r6, #12]
 8001188:	061a      	lsls	r2, r3, #24
 800118a:	d410      	bmi.n	80011ae <__swhatbuf_r+0x3e>
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	e00e      	b.n	80011b0 <__swhatbuf_r+0x40>
 8001192:	aa01      	add	r2, sp, #4
 8001194:	f000 fc46 	bl	8001a24 <_fstat_r>
 8001198:	2800      	cmp	r0, #0
 800119a:	dbf2      	blt.n	8001182 <__swhatbuf_r+0x12>
 800119c:	9a02      	ldr	r2, [sp, #8]
 800119e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80011a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80011a6:	425a      	negs	r2, r3
 80011a8:	415a      	adcs	r2, r3
 80011aa:	602a      	str	r2, [r5, #0]
 80011ac:	e7ee      	b.n	800118c <__swhatbuf_r+0x1c>
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	2000      	movs	r0, #0
 80011b2:	6023      	str	r3, [r4, #0]
 80011b4:	b010      	add	sp, #64	; 0x40
 80011b6:	bd70      	pop	{r4, r5, r6, pc}

080011b8 <__smakebuf_r>:
 80011b8:	898b      	ldrh	r3, [r1, #12]
 80011ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011bc:	079d      	lsls	r5, r3, #30
 80011be:	4606      	mov	r6, r0
 80011c0:	460c      	mov	r4, r1
 80011c2:	d507      	bpl.n	80011d4 <__smakebuf_r+0x1c>
 80011c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	6123      	str	r3, [r4, #16]
 80011cc:	2301      	movs	r3, #1
 80011ce:	6163      	str	r3, [r4, #20]
 80011d0:	b002      	add	sp, #8
 80011d2:	bd70      	pop	{r4, r5, r6, pc}
 80011d4:	ab01      	add	r3, sp, #4
 80011d6:	466a      	mov	r2, sp
 80011d8:	f7ff ffca 	bl	8001170 <__swhatbuf_r>
 80011dc:	9900      	ldr	r1, [sp, #0]
 80011de:	4605      	mov	r5, r0
 80011e0:	4630      	mov	r0, r6
 80011e2:	f000 f875 	bl	80012d0 <_malloc_r>
 80011e6:	b948      	cbnz	r0, 80011fc <__smakebuf_r+0x44>
 80011e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ec:	059a      	lsls	r2, r3, #22
 80011ee:	d4ef      	bmi.n	80011d0 <__smakebuf_r+0x18>
 80011f0:	f023 0303 	bic.w	r3, r3, #3
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	e7e3      	b.n	80011c4 <__smakebuf_r+0xc>
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <__smakebuf_r+0x7c>)
 80011fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	6020      	str	r0, [r4, #0]
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	9b00      	ldr	r3, [sp, #0]
 800120c:	6120      	str	r0, [r4, #16]
 800120e:	6163      	str	r3, [r4, #20]
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	b15b      	cbz	r3, 800122c <__smakebuf_r+0x74>
 8001214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001218:	4630      	mov	r0, r6
 800121a:	f000 fc15 	bl	8001a48 <_isatty_r>
 800121e:	b128      	cbz	r0, 800122c <__smakebuf_r+0x74>
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	431d      	orrs	r5, r3
 8001230:	81a5      	strh	r5, [r4, #12]
 8001232:	e7cd      	b.n	80011d0 <__smakebuf_r+0x18>
 8001234:	08000fdd 	.word	0x08000fdd

08001238 <_free_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4605      	mov	r5, r0
 800123c:	2900      	cmp	r1, #0
 800123e:	d043      	beq.n	80012c8 <_free_r+0x90>
 8001240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001244:	1f0c      	subs	r4, r1, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	18e4      	addlt	r4, r4, r3
 800124c:	f000 fc2c 	bl	8001aa8 <__malloc_lock>
 8001250:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <_free_r+0x94>)
 8001252:	6813      	ldr	r3, [r2, #0]
 8001254:	4610      	mov	r0, r2
 8001256:	b933      	cbnz	r3, 8001266 <_free_r+0x2e>
 8001258:	6063      	str	r3, [r4, #4]
 800125a:	6014      	str	r4, [r2, #0]
 800125c:	4628      	mov	r0, r5
 800125e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001262:	f000 bc22 	b.w	8001aaa <__malloc_unlock>
 8001266:	42a3      	cmp	r3, r4
 8001268:	d90b      	bls.n	8001282 <_free_r+0x4a>
 800126a:	6821      	ldr	r1, [r4, #0]
 800126c:	1862      	adds	r2, r4, r1
 800126e:	4293      	cmp	r3, r2
 8001270:	bf01      	itttt	eq
 8001272:	681a      	ldreq	r2, [r3, #0]
 8001274:	685b      	ldreq	r3, [r3, #4]
 8001276:	1852      	addeq	r2, r2, r1
 8001278:	6022      	streq	r2, [r4, #0]
 800127a:	6063      	str	r3, [r4, #4]
 800127c:	6004      	str	r4, [r0, #0]
 800127e:	e7ed      	b.n	800125c <_free_r+0x24>
 8001280:	4613      	mov	r3, r2
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	b10a      	cbz	r2, 800128a <_free_r+0x52>
 8001286:	42a2      	cmp	r2, r4
 8001288:	d9fa      	bls.n	8001280 <_free_r+0x48>
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	1858      	adds	r0, r3, r1
 800128e:	42a0      	cmp	r0, r4
 8001290:	d10b      	bne.n	80012aa <_free_r+0x72>
 8001292:	6820      	ldr	r0, [r4, #0]
 8001294:	4401      	add	r1, r0
 8001296:	1858      	adds	r0, r3, r1
 8001298:	4282      	cmp	r2, r0
 800129a:	6019      	str	r1, [r3, #0]
 800129c:	d1de      	bne.n	800125c <_free_r+0x24>
 800129e:	6810      	ldr	r0, [r2, #0]
 80012a0:	6852      	ldr	r2, [r2, #4]
 80012a2:	4401      	add	r1, r0
 80012a4:	6019      	str	r1, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	e7d8      	b.n	800125c <_free_r+0x24>
 80012aa:	d902      	bls.n	80012b2 <_free_r+0x7a>
 80012ac:	230c      	movs	r3, #12
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	e7d4      	b.n	800125c <_free_r+0x24>
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	1821      	adds	r1, r4, r0
 80012b6:	428a      	cmp	r2, r1
 80012b8:	bf01      	itttt	eq
 80012ba:	6811      	ldreq	r1, [r2, #0]
 80012bc:	6852      	ldreq	r2, [r2, #4]
 80012be:	1809      	addeq	r1, r1, r0
 80012c0:	6021      	streq	r1, [r4, #0]
 80012c2:	6062      	str	r2, [r4, #4]
 80012c4:	605c      	str	r4, [r3, #4]
 80012c6:	e7c9      	b.n	800125c <_free_r+0x24>
 80012c8:	bd38      	pop	{r3, r4, r5, pc}
 80012ca:	bf00      	nop
 80012cc:	2000008c 	.word	0x2000008c

080012d0 <_malloc_r>:
 80012d0:	b570      	push	{r4, r5, r6, lr}
 80012d2:	1ccd      	adds	r5, r1, #3
 80012d4:	f025 0503 	bic.w	r5, r5, #3
 80012d8:	3508      	adds	r5, #8
 80012da:	2d0c      	cmp	r5, #12
 80012dc:	bf38      	it	cc
 80012de:	250c      	movcc	r5, #12
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	4606      	mov	r6, r0
 80012e4:	db01      	blt.n	80012ea <_malloc_r+0x1a>
 80012e6:	42a9      	cmp	r1, r5
 80012e8:	d903      	bls.n	80012f2 <_malloc_r+0x22>
 80012ea:	230c      	movs	r3, #12
 80012ec:	6033      	str	r3, [r6, #0]
 80012ee:	2000      	movs	r0, #0
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	f000 fbd9 	bl	8001aa8 <__malloc_lock>
 80012f6:	4a23      	ldr	r2, [pc, #140]	; (8001384 <_malloc_r+0xb4>)
 80012f8:	6814      	ldr	r4, [r2, #0]
 80012fa:	4621      	mov	r1, r4
 80012fc:	b991      	cbnz	r1, 8001324 <_malloc_r+0x54>
 80012fe:	4c22      	ldr	r4, [pc, #136]	; (8001388 <_malloc_r+0xb8>)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	b91b      	cbnz	r3, 800130c <_malloc_r+0x3c>
 8001304:	4630      	mov	r0, r6
 8001306:	f000 fb17 	bl	8001938 <_sbrk_r>
 800130a:	6020      	str	r0, [r4, #0]
 800130c:	4629      	mov	r1, r5
 800130e:	4630      	mov	r0, r6
 8001310:	f000 fb12 	bl	8001938 <_sbrk_r>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d126      	bne.n	8001366 <_malloc_r+0x96>
 8001318:	230c      	movs	r3, #12
 800131a:	4630      	mov	r0, r6
 800131c:	6033      	str	r3, [r6, #0]
 800131e:	f000 fbc4 	bl	8001aaa <__malloc_unlock>
 8001322:	e7e4      	b.n	80012ee <_malloc_r+0x1e>
 8001324:	680b      	ldr	r3, [r1, #0]
 8001326:	1b5b      	subs	r3, r3, r5
 8001328:	d41a      	bmi.n	8001360 <_malloc_r+0x90>
 800132a:	2b0b      	cmp	r3, #11
 800132c:	d90f      	bls.n	800134e <_malloc_r+0x7e>
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	18cc      	adds	r4, r1, r3
 8001332:	50cd      	str	r5, [r1, r3]
 8001334:	4630      	mov	r0, r6
 8001336:	f000 fbb8 	bl	8001aaa <__malloc_unlock>
 800133a:	f104 000b 	add.w	r0, r4, #11
 800133e:	1d23      	adds	r3, r4, #4
 8001340:	f020 0007 	bic.w	r0, r0, #7
 8001344:	1ac3      	subs	r3, r0, r3
 8001346:	d01b      	beq.n	8001380 <_malloc_r+0xb0>
 8001348:	425a      	negs	r2, r3
 800134a:	50e2      	str	r2, [r4, r3]
 800134c:	bd70      	pop	{r4, r5, r6, pc}
 800134e:	428c      	cmp	r4, r1
 8001350:	bf0b      	itete	eq
 8001352:	6863      	ldreq	r3, [r4, #4]
 8001354:	684b      	ldrne	r3, [r1, #4]
 8001356:	6013      	streq	r3, [r2, #0]
 8001358:	6063      	strne	r3, [r4, #4]
 800135a:	bf18      	it	ne
 800135c:	460c      	movne	r4, r1
 800135e:	e7e9      	b.n	8001334 <_malloc_r+0x64>
 8001360:	460c      	mov	r4, r1
 8001362:	6849      	ldr	r1, [r1, #4]
 8001364:	e7ca      	b.n	80012fc <_malloc_r+0x2c>
 8001366:	1cc4      	adds	r4, r0, #3
 8001368:	f024 0403 	bic.w	r4, r4, #3
 800136c:	42a0      	cmp	r0, r4
 800136e:	d005      	beq.n	800137c <_malloc_r+0xac>
 8001370:	1a21      	subs	r1, r4, r0
 8001372:	4630      	mov	r0, r6
 8001374:	f000 fae0 	bl	8001938 <_sbrk_r>
 8001378:	3001      	adds	r0, #1
 800137a:	d0cd      	beq.n	8001318 <_malloc_r+0x48>
 800137c:	6025      	str	r5, [r4, #0]
 800137e:	e7d9      	b.n	8001334 <_malloc_r+0x64>
 8001380:	bd70      	pop	{r4, r5, r6, pc}
 8001382:	bf00      	nop
 8001384:	2000008c 	.word	0x2000008c
 8001388:	20000090 	.word	0x20000090

0800138c <__sfputc_r>:
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	b410      	push	{r4}
 8001390:	3b01      	subs	r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	6093      	str	r3, [r2, #8]
 8001396:	da08      	bge.n	80013aa <__sfputc_r+0x1e>
 8001398:	6994      	ldr	r4, [r2, #24]
 800139a:	42a3      	cmp	r3, r4
 800139c:	db02      	blt.n	80013a4 <__sfputc_r+0x18>
 800139e:	b2cb      	uxtb	r3, r1
 80013a0:	2b0a      	cmp	r3, #10
 80013a2:	d102      	bne.n	80013aa <__sfputc_r+0x1e>
 80013a4:	bc10      	pop	{r4}
 80013a6:	f7ff bca7 	b.w	8000cf8 <__swbuf_r>
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	1c58      	adds	r0, r3, #1
 80013ae:	6010      	str	r0, [r2, #0]
 80013b0:	7019      	strb	r1, [r3, #0]
 80013b2:	b2c8      	uxtb	r0, r1
 80013b4:	bc10      	pop	{r4}
 80013b6:	4770      	bx	lr

080013b8 <__sfputs_r>:
 80013b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ba:	4606      	mov	r6, r0
 80013bc:	460f      	mov	r7, r1
 80013be:	4614      	mov	r4, r2
 80013c0:	18d5      	adds	r5, r2, r3
 80013c2:	42ac      	cmp	r4, r5
 80013c4:	d101      	bne.n	80013ca <__sfputs_r+0x12>
 80013c6:	2000      	movs	r0, #0
 80013c8:	e007      	b.n	80013da <__sfputs_r+0x22>
 80013ca:	463a      	mov	r2, r7
 80013cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff ffdb 	bl	800138c <__sfputc_r>
 80013d6:	1c43      	adds	r3, r0, #1
 80013d8:	d1f3      	bne.n	80013c2 <__sfputs_r+0xa>
 80013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013dc <_vfiprintf_r>:
 80013dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e0:	b09d      	sub	sp, #116	; 0x74
 80013e2:	460c      	mov	r4, r1
 80013e4:	4617      	mov	r7, r2
 80013e6:	9303      	str	r3, [sp, #12]
 80013e8:	4606      	mov	r6, r0
 80013ea:	b118      	cbz	r0, 80013f4 <_vfiprintf_r+0x18>
 80013ec:	6983      	ldr	r3, [r0, #24]
 80013ee:	b90b      	cbnz	r3, 80013f4 <_vfiprintf_r+0x18>
 80013f0:	f7ff fe34 	bl	800105c <__sinit>
 80013f4:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <_vfiprintf_r+0x20c>)
 80013f6:	429c      	cmp	r4, r3
 80013f8:	d157      	bne.n	80014aa <_vfiprintf_r+0xce>
 80013fa:	6874      	ldr	r4, [r6, #4]
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	0718      	lsls	r0, r3, #28
 8001400:	d55d      	bpl.n	80014be <_vfiprintf_r+0xe2>
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05a      	beq.n	80014be <_vfiprintf_r+0xe2>
 8001408:	2300      	movs	r3, #0
 800140a:	9309      	str	r3, [sp, #36]	; 0x24
 800140c:	2320      	movs	r3, #32
 800140e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001412:	2330      	movs	r3, #48	; 0x30
 8001414:	f04f 0b01 	mov.w	fp, #1
 8001418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800141c:	46b8      	mov	r8, r7
 800141e:	4645      	mov	r5, r8
 8001420:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d155      	bne.n	80014d4 <_vfiprintf_r+0xf8>
 8001428:	ebb8 0a07 	subs.w	sl, r8, r7
 800142c:	d00b      	beq.n	8001446 <_vfiprintf_r+0x6a>
 800142e:	4653      	mov	r3, sl
 8001430:	463a      	mov	r2, r7
 8001432:	4621      	mov	r1, r4
 8001434:	4630      	mov	r0, r6
 8001436:	f7ff ffbf 	bl	80013b8 <__sfputs_r>
 800143a:	3001      	adds	r0, #1
 800143c:	f000 80c4 	beq.w	80015c8 <_vfiprintf_r+0x1ec>
 8001440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001442:	4453      	add	r3, sl
 8001444:	9309      	str	r3, [sp, #36]	; 0x24
 8001446:	f898 3000 	ldrb.w	r3, [r8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80bc 	beq.w	80015c8 <_vfiprintf_r+0x1ec>
 8001450:	2300      	movs	r3, #0
 8001452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001456:	9304      	str	r3, [sp, #16]
 8001458:	9307      	str	r3, [sp, #28]
 800145a:	9205      	str	r2, [sp, #20]
 800145c:	9306      	str	r3, [sp, #24]
 800145e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001462:	931a      	str	r3, [sp, #104]	; 0x68
 8001464:	2205      	movs	r2, #5
 8001466:	7829      	ldrb	r1, [r5, #0]
 8001468:	4860      	ldr	r0, [pc, #384]	; (80015ec <_vfiprintf_r+0x210>)
 800146a:	f000 fb0f 	bl	8001a8c <memchr>
 800146e:	f105 0801 	add.w	r8, r5, #1
 8001472:	9b04      	ldr	r3, [sp, #16]
 8001474:	2800      	cmp	r0, #0
 8001476:	d131      	bne.n	80014dc <_vfiprintf_r+0x100>
 8001478:	06d9      	lsls	r1, r3, #27
 800147a:	bf44      	itt	mi
 800147c:	2220      	movmi	r2, #32
 800147e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001482:	071a      	lsls	r2, r3, #28
 8001484:	bf44      	itt	mi
 8001486:	222b      	movmi	r2, #43	; 0x2b
 8001488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800148c:	782a      	ldrb	r2, [r5, #0]
 800148e:	2a2a      	cmp	r2, #42	; 0x2a
 8001490:	d02c      	beq.n	80014ec <_vfiprintf_r+0x110>
 8001492:	2100      	movs	r1, #0
 8001494:	200a      	movs	r0, #10
 8001496:	9a07      	ldr	r2, [sp, #28]
 8001498:	46a8      	mov	r8, r5
 800149a:	f898 3000 	ldrb.w	r3, [r8]
 800149e:	3501      	adds	r5, #1
 80014a0:	3b30      	subs	r3, #48	; 0x30
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	d96d      	bls.n	8001582 <_vfiprintf_r+0x1a6>
 80014a6:	b371      	cbz	r1, 8001506 <_vfiprintf_r+0x12a>
 80014a8:	e026      	b.n	80014f8 <_vfiprintf_r+0x11c>
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <_vfiprintf_r+0x214>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	d101      	bne.n	80014b4 <_vfiprintf_r+0xd8>
 80014b0:	68b4      	ldr	r4, [r6, #8]
 80014b2:	e7a3      	b.n	80013fc <_vfiprintf_r+0x20>
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <_vfiprintf_r+0x218>)
 80014b6:	429c      	cmp	r4, r3
 80014b8:	bf08      	it	eq
 80014ba:	68f4      	ldreq	r4, [r6, #12]
 80014bc:	e79e      	b.n	80013fc <_vfiprintf_r+0x20>
 80014be:	4621      	mov	r1, r4
 80014c0:	4630      	mov	r0, r6
 80014c2:	f7ff fc6b 	bl	8000d9c <__swsetup_r>
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d09e      	beq.n	8001408 <_vfiprintf_r+0x2c>
 80014ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ce:	b01d      	add	sp, #116	; 0x74
 80014d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d4:	2b25      	cmp	r3, #37	; 0x25
 80014d6:	d0a7      	beq.n	8001428 <_vfiprintf_r+0x4c>
 80014d8:	46a8      	mov	r8, r5
 80014da:	e7a0      	b.n	800141e <_vfiprintf_r+0x42>
 80014dc:	4a43      	ldr	r2, [pc, #268]	; (80015ec <_vfiprintf_r+0x210>)
 80014de:	4645      	mov	r5, r8
 80014e0:	1a80      	subs	r0, r0, r2
 80014e2:	fa0b f000 	lsl.w	r0, fp, r0
 80014e6:	4318      	orrs	r0, r3
 80014e8:	9004      	str	r0, [sp, #16]
 80014ea:	e7bb      	b.n	8001464 <_vfiprintf_r+0x88>
 80014ec:	9a03      	ldr	r2, [sp, #12]
 80014ee:	1d11      	adds	r1, r2, #4
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	9103      	str	r1, [sp, #12]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	db01      	blt.n	80014fc <_vfiprintf_r+0x120>
 80014f8:	9207      	str	r2, [sp, #28]
 80014fa:	e004      	b.n	8001506 <_vfiprintf_r+0x12a>
 80014fc:	4252      	negs	r2, r2
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	9207      	str	r2, [sp, #28]
 8001504:	9304      	str	r3, [sp, #16]
 8001506:	f898 3000 	ldrb.w	r3, [r8]
 800150a:	2b2e      	cmp	r3, #46	; 0x2e
 800150c:	d110      	bne.n	8001530 <_vfiprintf_r+0x154>
 800150e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001512:	f108 0101 	add.w	r1, r8, #1
 8001516:	2b2a      	cmp	r3, #42	; 0x2a
 8001518:	d137      	bne.n	800158a <_vfiprintf_r+0x1ae>
 800151a:	9b03      	ldr	r3, [sp, #12]
 800151c:	f108 0802 	add.w	r8, r8, #2
 8001520:	1d1a      	adds	r2, r3, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	9203      	str	r2, [sp, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	bfb8      	it	lt
 800152a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800152e:	9305      	str	r3, [sp, #20]
 8001530:	4d31      	ldr	r5, [pc, #196]	; (80015f8 <_vfiprintf_r+0x21c>)
 8001532:	2203      	movs	r2, #3
 8001534:	f898 1000 	ldrb.w	r1, [r8]
 8001538:	4628      	mov	r0, r5
 800153a:	f000 faa7 	bl	8001a8c <memchr>
 800153e:	b140      	cbz	r0, 8001552 <_vfiprintf_r+0x176>
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	1b40      	subs	r0, r0, r5
 8001544:	fa03 f000 	lsl.w	r0, r3, r0
 8001548:	9b04      	ldr	r3, [sp, #16]
 800154a:	f108 0801 	add.w	r8, r8, #1
 800154e:	4303      	orrs	r3, r0
 8001550:	9304      	str	r3, [sp, #16]
 8001552:	f898 1000 	ldrb.w	r1, [r8]
 8001556:	2206      	movs	r2, #6
 8001558:	4828      	ldr	r0, [pc, #160]	; (80015fc <_vfiprintf_r+0x220>)
 800155a:	f108 0701 	add.w	r7, r8, #1
 800155e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001562:	f000 fa93 	bl	8001a8c <memchr>
 8001566:	2800      	cmp	r0, #0
 8001568:	d034      	beq.n	80015d4 <_vfiprintf_r+0x1f8>
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <_vfiprintf_r+0x224>)
 800156c:	bb03      	cbnz	r3, 80015b0 <_vfiprintf_r+0x1d4>
 800156e:	9b03      	ldr	r3, [sp, #12]
 8001570:	3307      	adds	r3, #7
 8001572:	f023 0307 	bic.w	r3, r3, #7
 8001576:	3308      	adds	r3, #8
 8001578:	9303      	str	r3, [sp, #12]
 800157a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800157c:	444b      	add	r3, r9
 800157e:	9309      	str	r3, [sp, #36]	; 0x24
 8001580:	e74c      	b.n	800141c <_vfiprintf_r+0x40>
 8001582:	fb00 3202 	mla	r2, r0, r2, r3
 8001586:	2101      	movs	r1, #1
 8001588:	e786      	b.n	8001498 <_vfiprintf_r+0xbc>
 800158a:	2300      	movs	r3, #0
 800158c:	250a      	movs	r5, #10
 800158e:	4618      	mov	r0, r3
 8001590:	9305      	str	r3, [sp, #20]
 8001592:	4688      	mov	r8, r1
 8001594:	f898 2000 	ldrb.w	r2, [r8]
 8001598:	3101      	adds	r1, #1
 800159a:	3a30      	subs	r2, #48	; 0x30
 800159c:	2a09      	cmp	r2, #9
 800159e:	d903      	bls.n	80015a8 <_vfiprintf_r+0x1cc>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0c5      	beq.n	8001530 <_vfiprintf_r+0x154>
 80015a4:	9005      	str	r0, [sp, #20]
 80015a6:	e7c3      	b.n	8001530 <_vfiprintf_r+0x154>
 80015a8:	fb05 2000 	mla	r0, r5, r0, r2
 80015ac:	2301      	movs	r3, #1
 80015ae:	e7f0      	b.n	8001592 <_vfiprintf_r+0x1b6>
 80015b0:	ab03      	add	r3, sp, #12
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4622      	mov	r2, r4
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_vfiprintf_r+0x228>)
 80015b8:	a904      	add	r1, sp, #16
 80015ba:	4630      	mov	r0, r6
 80015bc:	f3af 8000 	nop.w
 80015c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80015c4:	4681      	mov	r9, r0
 80015c6:	d1d8      	bne.n	800157a <_vfiprintf_r+0x19e>
 80015c8:	89a3      	ldrh	r3, [r4, #12]
 80015ca:	065b      	lsls	r3, r3, #25
 80015cc:	f53f af7d 	bmi.w	80014ca <_vfiprintf_r+0xee>
 80015d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015d2:	e77c      	b.n	80014ce <_vfiprintf_r+0xf2>
 80015d4:	ab03      	add	r3, sp, #12
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4622      	mov	r2, r4
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <_vfiprintf_r+0x228>)
 80015dc:	a904      	add	r1, sp, #16
 80015de:	4630      	mov	r0, r6
 80015e0:	f000 f88a 	bl	80016f8 <_printf_i>
 80015e4:	e7ec      	b.n	80015c0 <_vfiprintf_r+0x1e4>
 80015e6:	bf00      	nop
 80015e8:	08001bb8 	.word	0x08001bb8
 80015ec:	08001bfc 	.word	0x08001bfc
 80015f0:	08001bd8 	.word	0x08001bd8
 80015f4:	08001b98 	.word	0x08001b98
 80015f8:	08001c02 	.word	0x08001c02
 80015fc:	08001c06 	.word	0x08001c06
 8001600:	00000000 	.word	0x00000000
 8001604:	080013b9 	.word	0x080013b9

08001608 <_printf_common>:
 8001608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800160c:	4691      	mov	r9, r2
 800160e:	461f      	mov	r7, r3
 8001610:	688a      	ldr	r2, [r1, #8]
 8001612:	690b      	ldr	r3, [r1, #16]
 8001614:	4606      	mov	r6, r0
 8001616:	4293      	cmp	r3, r2
 8001618:	bfb8      	it	lt
 800161a:	4613      	movlt	r3, r2
 800161c:	f8c9 3000 	str.w	r3, [r9]
 8001620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001624:	460c      	mov	r4, r1
 8001626:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800162a:	b112      	cbz	r2, 8001632 <_printf_common+0x2a>
 800162c:	3301      	adds	r3, #1
 800162e:	f8c9 3000 	str.w	r3, [r9]
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	0699      	lsls	r1, r3, #26
 8001636:	bf42      	ittt	mi
 8001638:	f8d9 3000 	ldrmi.w	r3, [r9]
 800163c:	3302      	addmi	r3, #2
 800163e:	f8c9 3000 	strmi.w	r3, [r9]
 8001642:	6825      	ldr	r5, [r4, #0]
 8001644:	f015 0506 	ands.w	r5, r5, #6
 8001648:	d107      	bne.n	800165a <_printf_common+0x52>
 800164a:	f104 0a19 	add.w	sl, r4, #25
 800164e:	68e3      	ldr	r3, [r4, #12]
 8001650:	f8d9 2000 	ldr.w	r2, [r9]
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	429d      	cmp	r5, r3
 8001658:	db2a      	blt.n	80016b0 <_printf_common+0xa8>
 800165a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	3300      	adds	r3, #0
 8001662:	bf18      	it	ne
 8001664:	2301      	movne	r3, #1
 8001666:	0692      	lsls	r2, r2, #26
 8001668:	d42f      	bmi.n	80016ca <_printf_common+0xc2>
 800166a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800166e:	4639      	mov	r1, r7
 8001670:	4630      	mov	r0, r6
 8001672:	47c0      	blx	r8
 8001674:	3001      	adds	r0, #1
 8001676:	d022      	beq.n	80016be <_printf_common+0xb6>
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	68e5      	ldr	r5, [r4, #12]
 800167c:	f003 0306 	and.w	r3, r3, #6
 8001680:	2b04      	cmp	r3, #4
 8001682:	bf18      	it	ne
 8001684:	2500      	movne	r5, #0
 8001686:	f8d9 2000 	ldr.w	r2, [r9]
 800168a:	f04f 0900 	mov.w	r9, #0
 800168e:	bf08      	it	eq
 8001690:	1aad      	subeq	r5, r5, r2
 8001692:	68a3      	ldr	r3, [r4, #8]
 8001694:	6922      	ldr	r2, [r4, #16]
 8001696:	bf08      	it	eq
 8001698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800169c:	4293      	cmp	r3, r2
 800169e:	bfc4      	itt	gt
 80016a0:	1a9b      	subgt	r3, r3, r2
 80016a2:	18ed      	addgt	r5, r5, r3
 80016a4:	341a      	adds	r4, #26
 80016a6:	454d      	cmp	r5, r9
 80016a8:	d11b      	bne.n	80016e2 <_printf_common+0xda>
 80016aa:	2000      	movs	r0, #0
 80016ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b0:	2301      	movs	r3, #1
 80016b2:	4652      	mov	r2, sl
 80016b4:	4639      	mov	r1, r7
 80016b6:	4630      	mov	r0, r6
 80016b8:	47c0      	blx	r8
 80016ba:	3001      	adds	r0, #1
 80016bc:	d103      	bne.n	80016c6 <_printf_common+0xbe>
 80016be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c6:	3501      	adds	r5, #1
 80016c8:	e7c1      	b.n	800164e <_printf_common+0x46>
 80016ca:	2030      	movs	r0, #48	; 0x30
 80016cc:	18e1      	adds	r1, r4, r3
 80016ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016d8:	4422      	add	r2, r4
 80016da:	3302      	adds	r3, #2
 80016dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016e0:	e7c3      	b.n	800166a <_printf_common+0x62>
 80016e2:	2301      	movs	r3, #1
 80016e4:	4622      	mov	r2, r4
 80016e6:	4639      	mov	r1, r7
 80016e8:	4630      	mov	r0, r6
 80016ea:	47c0      	blx	r8
 80016ec:	3001      	adds	r0, #1
 80016ee:	d0e6      	beq.n	80016be <_printf_common+0xb6>
 80016f0:	f109 0901 	add.w	r9, r9, #1
 80016f4:	e7d7      	b.n	80016a6 <_printf_common+0x9e>
	...

080016f8 <_printf_i>:
 80016f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016fc:	4617      	mov	r7, r2
 80016fe:	7e0a      	ldrb	r2, [r1, #24]
 8001700:	b085      	sub	sp, #20
 8001702:	2a6e      	cmp	r2, #110	; 0x6e
 8001704:	4698      	mov	r8, r3
 8001706:	4606      	mov	r6, r0
 8001708:	460c      	mov	r4, r1
 800170a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800170c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001710:	f000 80bc 	beq.w	800188c <_printf_i+0x194>
 8001714:	d81a      	bhi.n	800174c <_printf_i+0x54>
 8001716:	2a63      	cmp	r2, #99	; 0x63
 8001718:	d02e      	beq.n	8001778 <_printf_i+0x80>
 800171a:	d80a      	bhi.n	8001732 <_printf_i+0x3a>
 800171c:	2a00      	cmp	r2, #0
 800171e:	f000 80c8 	beq.w	80018b2 <_printf_i+0x1ba>
 8001722:	2a58      	cmp	r2, #88	; 0x58
 8001724:	f000 808a 	beq.w	800183c <_printf_i+0x144>
 8001728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800172c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001730:	e02a      	b.n	8001788 <_printf_i+0x90>
 8001732:	2a64      	cmp	r2, #100	; 0x64
 8001734:	d001      	beq.n	800173a <_printf_i+0x42>
 8001736:	2a69      	cmp	r2, #105	; 0x69
 8001738:	d1f6      	bne.n	8001728 <_printf_i+0x30>
 800173a:	6821      	ldr	r1, [r4, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001742:	d023      	beq.n	800178c <_printf_i+0x94>
 8001744:	1d11      	adds	r1, r2, #4
 8001746:	6019      	str	r1, [r3, #0]
 8001748:	6813      	ldr	r3, [r2, #0]
 800174a:	e027      	b.n	800179c <_printf_i+0xa4>
 800174c:	2a73      	cmp	r2, #115	; 0x73
 800174e:	f000 80b4 	beq.w	80018ba <_printf_i+0x1c2>
 8001752:	d808      	bhi.n	8001766 <_printf_i+0x6e>
 8001754:	2a6f      	cmp	r2, #111	; 0x6f
 8001756:	d02a      	beq.n	80017ae <_printf_i+0xb6>
 8001758:	2a70      	cmp	r2, #112	; 0x70
 800175a:	d1e5      	bne.n	8001728 <_printf_i+0x30>
 800175c:	680a      	ldr	r2, [r1, #0]
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	600a      	str	r2, [r1, #0]
 8001764:	e003      	b.n	800176e <_printf_i+0x76>
 8001766:	2a75      	cmp	r2, #117	; 0x75
 8001768:	d021      	beq.n	80017ae <_printf_i+0xb6>
 800176a:	2a78      	cmp	r2, #120	; 0x78
 800176c:	d1dc      	bne.n	8001728 <_printf_i+0x30>
 800176e:	2278      	movs	r2, #120	; 0x78
 8001770:	496f      	ldr	r1, [pc, #444]	; (8001930 <_printf_i+0x238>)
 8001772:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001776:	e064      	b.n	8001842 <_printf_i+0x14a>
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800177e:	1d11      	adds	r1, r2, #4
 8001780:	6019      	str	r1, [r3, #0]
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001788:	2301      	movs	r3, #1
 800178a:	e0a3      	b.n	80018d4 <_printf_i+0x1dc>
 800178c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001790:	f102 0104 	add.w	r1, r2, #4
 8001794:	6019      	str	r1, [r3, #0]
 8001796:	d0d7      	beq.n	8001748 <_printf_i+0x50>
 8001798:	f9b2 3000 	ldrsh.w	r3, [r2]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da03      	bge.n	80017a8 <_printf_i+0xb0>
 80017a0:	222d      	movs	r2, #45	; 0x2d
 80017a2:	425b      	negs	r3, r3
 80017a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80017a8:	4962      	ldr	r1, [pc, #392]	; (8001934 <_printf_i+0x23c>)
 80017aa:	220a      	movs	r2, #10
 80017ac:	e017      	b.n	80017de <_printf_i+0xe6>
 80017ae:	6820      	ldr	r0, [r4, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80017b6:	d003      	beq.n	80017c0 <_printf_i+0xc8>
 80017b8:	1d08      	adds	r0, r1, #4
 80017ba:	6018      	str	r0, [r3, #0]
 80017bc:	680b      	ldr	r3, [r1, #0]
 80017be:	e006      	b.n	80017ce <_printf_i+0xd6>
 80017c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017c4:	f101 0004 	add.w	r0, r1, #4
 80017c8:	6018      	str	r0, [r3, #0]
 80017ca:	d0f7      	beq.n	80017bc <_printf_i+0xc4>
 80017cc:	880b      	ldrh	r3, [r1, #0]
 80017ce:	2a6f      	cmp	r2, #111	; 0x6f
 80017d0:	bf14      	ite	ne
 80017d2:	220a      	movne	r2, #10
 80017d4:	2208      	moveq	r2, #8
 80017d6:	4957      	ldr	r1, [pc, #348]	; (8001934 <_printf_i+0x23c>)
 80017d8:	2000      	movs	r0, #0
 80017da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80017de:	6865      	ldr	r5, [r4, #4]
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	60a5      	str	r5, [r4, #8]
 80017e4:	f2c0 809c 	blt.w	8001920 <_printf_i+0x228>
 80017e8:	6820      	ldr	r0, [r4, #0]
 80017ea:	f020 0004 	bic.w	r0, r0, #4
 80017ee:	6020      	str	r0, [r4, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d13f      	bne.n	8001874 <_printf_i+0x17c>
 80017f4:	2d00      	cmp	r5, #0
 80017f6:	f040 8095 	bne.w	8001924 <_printf_i+0x22c>
 80017fa:	4675      	mov	r5, lr
 80017fc:	2a08      	cmp	r2, #8
 80017fe:	d10b      	bne.n	8001818 <_printf_i+0x120>
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	07da      	lsls	r2, r3, #31
 8001804:	d508      	bpl.n	8001818 <_printf_i+0x120>
 8001806:	6923      	ldr	r3, [r4, #16]
 8001808:	6862      	ldr	r2, [r4, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	bfde      	ittt	le
 800180e:	2330      	movle	r3, #48	; 0x30
 8001810:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001814:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001818:	ebae 0305 	sub.w	r3, lr, r5
 800181c:	6123      	str	r3, [r4, #16]
 800181e:	f8cd 8000 	str.w	r8, [sp]
 8001822:	463b      	mov	r3, r7
 8001824:	aa03      	add	r2, sp, #12
 8001826:	4621      	mov	r1, r4
 8001828:	4630      	mov	r0, r6
 800182a:	f7ff feed 	bl	8001608 <_printf_common>
 800182e:	3001      	adds	r0, #1
 8001830:	d155      	bne.n	80018de <_printf_i+0x1e6>
 8001832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001836:	b005      	add	sp, #20
 8001838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800183c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001840:	493c      	ldr	r1, [pc, #240]	; (8001934 <_printf_i+0x23c>)
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	f012 0f80 	tst.w	r2, #128	; 0x80
 800184a:	f100 0504 	add.w	r5, r0, #4
 800184e:	601d      	str	r5, [r3, #0]
 8001850:	d001      	beq.n	8001856 <_printf_i+0x15e>
 8001852:	6803      	ldr	r3, [r0, #0]
 8001854:	e002      	b.n	800185c <_printf_i+0x164>
 8001856:	0655      	lsls	r5, r2, #25
 8001858:	d5fb      	bpl.n	8001852 <_printf_i+0x15a>
 800185a:	8803      	ldrh	r3, [r0, #0]
 800185c:	07d0      	lsls	r0, r2, #31
 800185e:	bf44      	itt	mi
 8001860:	f042 0220 	orrmi.w	r2, r2, #32
 8001864:	6022      	strmi	r2, [r4, #0]
 8001866:	b91b      	cbnz	r3, 8001870 <_printf_i+0x178>
 8001868:	6822      	ldr	r2, [r4, #0]
 800186a:	f022 0220 	bic.w	r2, r2, #32
 800186e:	6022      	str	r2, [r4, #0]
 8001870:	2210      	movs	r2, #16
 8001872:	e7b1      	b.n	80017d8 <_printf_i+0xe0>
 8001874:	4675      	mov	r5, lr
 8001876:	fbb3 f0f2 	udiv	r0, r3, r2
 800187a:	fb02 3310 	mls	r3, r2, r0, r3
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001884:	4603      	mov	r3, r0
 8001886:	2800      	cmp	r0, #0
 8001888:	d1f5      	bne.n	8001876 <_printf_i+0x17e>
 800188a:	e7b7      	b.n	80017fc <_printf_i+0x104>
 800188c:	6808      	ldr	r0, [r1, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001894:	6949      	ldr	r1, [r1, #20]
 8001896:	d004      	beq.n	80018a2 <_printf_i+0x1aa>
 8001898:	1d10      	adds	r0, r2, #4
 800189a:	6018      	str	r0, [r3, #0]
 800189c:	6813      	ldr	r3, [r2, #0]
 800189e:	6019      	str	r1, [r3, #0]
 80018a0:	e007      	b.n	80018b2 <_printf_i+0x1ba>
 80018a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018a6:	f102 0004 	add.w	r0, r2, #4
 80018aa:	6018      	str	r0, [r3, #0]
 80018ac:	6813      	ldr	r3, [r2, #0]
 80018ae:	d0f6      	beq.n	800189e <_printf_i+0x1a6>
 80018b0:	8019      	strh	r1, [r3, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	4675      	mov	r5, lr
 80018b6:	6123      	str	r3, [r4, #16]
 80018b8:	e7b1      	b.n	800181e <_printf_i+0x126>
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	1d11      	adds	r1, r2, #4
 80018be:	6019      	str	r1, [r3, #0]
 80018c0:	6815      	ldr	r5, [r2, #0]
 80018c2:	2100      	movs	r1, #0
 80018c4:	6862      	ldr	r2, [r4, #4]
 80018c6:	4628      	mov	r0, r5
 80018c8:	f000 f8e0 	bl	8001a8c <memchr>
 80018cc:	b108      	cbz	r0, 80018d2 <_printf_i+0x1da>
 80018ce:	1b40      	subs	r0, r0, r5
 80018d0:	6060      	str	r0, [r4, #4]
 80018d2:	6863      	ldr	r3, [r4, #4]
 80018d4:	6123      	str	r3, [r4, #16]
 80018d6:	2300      	movs	r3, #0
 80018d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018dc:	e79f      	b.n	800181e <_printf_i+0x126>
 80018de:	6923      	ldr	r3, [r4, #16]
 80018e0:	462a      	mov	r2, r5
 80018e2:	4639      	mov	r1, r7
 80018e4:	4630      	mov	r0, r6
 80018e6:	47c0      	blx	r8
 80018e8:	3001      	adds	r0, #1
 80018ea:	d0a2      	beq.n	8001832 <_printf_i+0x13a>
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d507      	bpl.n	8001902 <_printf_i+0x20a>
 80018f2:	2500      	movs	r5, #0
 80018f4:	f104 0919 	add.w	r9, r4, #25
 80018f8:	68e3      	ldr	r3, [r4, #12]
 80018fa:	9a03      	ldr	r2, [sp, #12]
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	429d      	cmp	r5, r3
 8001900:	db05      	blt.n	800190e <_printf_i+0x216>
 8001902:	68e0      	ldr	r0, [r4, #12]
 8001904:	9b03      	ldr	r3, [sp, #12]
 8001906:	4298      	cmp	r0, r3
 8001908:	bfb8      	it	lt
 800190a:	4618      	movlt	r0, r3
 800190c:	e793      	b.n	8001836 <_printf_i+0x13e>
 800190e:	2301      	movs	r3, #1
 8001910:	464a      	mov	r2, r9
 8001912:	4639      	mov	r1, r7
 8001914:	4630      	mov	r0, r6
 8001916:	47c0      	blx	r8
 8001918:	3001      	adds	r0, #1
 800191a:	d08a      	beq.n	8001832 <_printf_i+0x13a>
 800191c:	3501      	adds	r5, #1
 800191e:	e7eb      	b.n	80018f8 <_printf_i+0x200>
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1a7      	bne.n	8001874 <_printf_i+0x17c>
 8001924:	780b      	ldrb	r3, [r1, #0]
 8001926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800192a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800192e:	e765      	b.n	80017fc <_printf_i+0x104>
 8001930:	08001c1e 	.word	0x08001c1e
 8001934:	08001c0d 	.word	0x08001c0d

08001938 <_sbrk_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	2300      	movs	r3, #0
 800193c:	4c05      	ldr	r4, [pc, #20]	; (8001954 <_sbrk_r+0x1c>)
 800193e:	4605      	mov	r5, r0
 8001940:	4608      	mov	r0, r1
 8001942:	6023      	str	r3, [r4, #0]
 8001944:	f000 f8ec 	bl	8001b20 <_sbrk>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_sbrk_r+0x1a>
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	b103      	cbz	r3, 8001952 <_sbrk_r+0x1a>
 8001950:	602b      	str	r3, [r5, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	2000009c 	.word	0x2000009c

08001958 <__sread>:
 8001958:	b510      	push	{r4, lr}
 800195a:	460c      	mov	r4, r1
 800195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001960:	f000 f8a4 	bl	8001aac <_read_r>
 8001964:	2800      	cmp	r0, #0
 8001966:	bfab      	itete	ge
 8001968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800196a:	89a3      	ldrhlt	r3, [r4, #12]
 800196c:	181b      	addge	r3, r3, r0
 800196e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001972:	bfac      	ite	ge
 8001974:	6563      	strge	r3, [r4, #84]	; 0x54
 8001976:	81a3      	strhlt	r3, [r4, #12]
 8001978:	bd10      	pop	{r4, pc}

0800197a <__swrite>:
 800197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197e:	461f      	mov	r7, r3
 8001980:	898b      	ldrh	r3, [r1, #12]
 8001982:	4605      	mov	r5, r0
 8001984:	05db      	lsls	r3, r3, #23
 8001986:	460c      	mov	r4, r1
 8001988:	4616      	mov	r6, r2
 800198a:	d505      	bpl.n	8001998 <__swrite+0x1e>
 800198c:	2302      	movs	r3, #2
 800198e:	2200      	movs	r2, #0
 8001990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001994:	f000 f868 	bl	8001a68 <_lseek_r>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	4632      	mov	r2, r6
 800199c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019a6:	463b      	mov	r3, r7
 80019a8:	4628      	mov	r0, r5
 80019aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019ae:	f000 b817 	b.w	80019e0 <_write_r>

080019b2 <__sseek>:
 80019b2:	b510      	push	{r4, lr}
 80019b4:	460c      	mov	r4, r1
 80019b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ba:	f000 f855 	bl	8001a68 <_lseek_r>
 80019be:	1c43      	adds	r3, r0, #1
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	bf15      	itete	ne
 80019c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80019c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019ce:	81a3      	strheq	r3, [r4, #12]
 80019d0:	bf18      	it	ne
 80019d2:	81a3      	strhne	r3, [r4, #12]
 80019d4:	bd10      	pop	{r4, pc}

080019d6 <__sclose>:
 80019d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019da:	f000 b813 	b.w	8001a04 <_close_r>
	...

080019e0 <_write_r>:
 80019e0:	b538      	push	{r3, r4, r5, lr}
 80019e2:	4605      	mov	r5, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	4c05      	ldr	r4, [pc, #20]	; (8001a00 <_write_r+0x20>)
 80019ec:	6022      	str	r2, [r4, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff f848 	bl	8000a84 <_write>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_write_r+0x1e>
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_write_r+0x1e>
 80019fc:	602b      	str	r3, [r5, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	2000009c 	.word	0x2000009c

08001a04 <_close_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	2300      	movs	r3, #0
 8001a08:	4c05      	ldr	r4, [pc, #20]	; (8001a20 <_close_r+0x1c>)
 8001a0a:	4605      	mov	r5, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	6023      	str	r3, [r4, #0]
 8001a10:	f000 f85e 	bl	8001ad0 <_close>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d102      	bne.n	8001a1e <_close_r+0x1a>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	b103      	cbz	r3, 8001a1e <_close_r+0x1a>
 8001a1c:	602b      	str	r3, [r5, #0]
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
 8001a20:	2000009c 	.word	0x2000009c

08001a24 <_fstat_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	2300      	movs	r3, #0
 8001a28:	4c06      	ldr	r4, [pc, #24]	; (8001a44 <_fstat_r+0x20>)
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	f000 f855 	bl	8001ae0 <_fstat>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	d102      	bne.n	8001a40 <_fstat_r+0x1c>
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	b103      	cbz	r3, 8001a40 <_fstat_r+0x1c>
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	bd38      	pop	{r3, r4, r5, pc}
 8001a42:	bf00      	nop
 8001a44:	2000009c 	.word	0x2000009c

08001a48 <_isatty_r>:
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	4c05      	ldr	r4, [pc, #20]	; (8001a64 <_isatty_r+0x1c>)
 8001a4e:	4605      	mov	r5, r0
 8001a50:	4608      	mov	r0, r1
 8001a52:	6023      	str	r3, [r4, #0]
 8001a54:	f000 f84c 	bl	8001af0 <_isatty>
 8001a58:	1c43      	adds	r3, r0, #1
 8001a5a:	d102      	bne.n	8001a62 <_isatty_r+0x1a>
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	b103      	cbz	r3, 8001a62 <_isatty_r+0x1a>
 8001a60:	602b      	str	r3, [r5, #0]
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
 8001a64:	2000009c 	.word	0x2000009c

08001a68 <_lseek_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	4611      	mov	r1, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	4c05      	ldr	r4, [pc, #20]	; (8001a88 <_lseek_r+0x20>)
 8001a74:	6022      	str	r2, [r4, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f000 f842 	bl	8001b00 <_lseek>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	d102      	bne.n	8001a86 <_lseek_r+0x1e>
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	b103      	cbz	r3, 8001a86 <_lseek_r+0x1e>
 8001a84:	602b      	str	r3, [r5, #0]
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	2000009c 	.word	0x2000009c

08001a8c <memchr>:
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	b2c9      	uxtb	r1, r1
 8001a90:	4402      	add	r2, r0
 8001a92:	4290      	cmp	r0, r2
 8001a94:	4603      	mov	r3, r0
 8001a96:	d101      	bne.n	8001a9c <memchr+0x10>
 8001a98:	2000      	movs	r0, #0
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	781c      	ldrb	r4, [r3, #0]
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	428c      	cmp	r4, r1
 8001aa2:	d1f6      	bne.n	8001a92 <memchr+0x6>
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd10      	pop	{r4, pc}

08001aa8 <__malloc_lock>:
 8001aa8:	4770      	bx	lr

08001aaa <__malloc_unlock>:
 8001aaa:	4770      	bx	lr

08001aac <_read_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	4605      	mov	r5, r0
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4c05      	ldr	r4, [pc, #20]	; (8001acc <_read_r+0x20>)
 8001ab8:	6022      	str	r2, [r4, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f000 f828 	bl	8001b10 <_read>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	d102      	bne.n	8001aca <_read_r+0x1e>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	b103      	cbz	r3, 8001aca <_read_r+0x1e>
 8001ac8:	602b      	str	r3, [r5, #0]
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
 8001acc:	2000009c 	.word	0x2000009c

08001ad0 <_close>:
 8001ad0:	2258      	movs	r2, #88	; 0x58
 8001ad2:	4b02      	ldr	r3, [pc, #8]	; (8001adc <_close+0xc>)
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	4770      	bx	lr
 8001adc:	2000009c 	.word	0x2000009c

08001ae0 <_fstat>:
 8001ae0:	2258      	movs	r2, #88	; 0x58
 8001ae2:	4b02      	ldr	r3, [pc, #8]	; (8001aec <_fstat+0xc>)
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4770      	bx	lr
 8001aec:	2000009c 	.word	0x2000009c

08001af0 <_isatty>:
 8001af0:	2258      	movs	r2, #88	; 0x58
 8001af2:	4b02      	ldr	r3, [pc, #8]	; (8001afc <_isatty+0xc>)
 8001af4:	2000      	movs	r0, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000009c 	.word	0x2000009c

08001b00 <_lseek>:
 8001b00:	2258      	movs	r2, #88	; 0x58
 8001b02:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <_lseek+0xc>)
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	4770      	bx	lr
 8001b0c:	2000009c 	.word	0x2000009c

08001b10 <_read>:
 8001b10:	2258      	movs	r2, #88	; 0x58
 8001b12:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <_read+0xc>)
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4770      	bx	lr
 8001b1c:	2000009c 	.word	0x2000009c

08001b20 <_sbrk>:
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <_sbrk+0x14>)
 8001b22:	4602      	mov	r2, r0
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	b909      	cbnz	r1, 8001b2c <_sbrk+0xc>
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <_sbrk+0x18>)
 8001b2a:	6019      	str	r1, [r3, #0]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	4402      	add	r2, r0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	4770      	bx	lr
 8001b34:	20000094 	.word	0x20000094
 8001b38:	200000a0 	.word	0x200000a0

08001b3c <_init>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr

08001b48 <_fini>:
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	bf00      	nop
 8001b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4e:	bc08      	pop	{r3}
 8001b50:	469e      	mov	lr, r3
 8001b52:	4770      	bx	lr
