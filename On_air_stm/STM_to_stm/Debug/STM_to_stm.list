
STM_to_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08003fd8  08003fd8  00013fd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  080041dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201c4  2**0
                  CONTENTS
  7 .bss          00001264  200001c4  200001c4  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001428  20001428  000201c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d811  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003fba  00000000  00000000  0003da05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000696b  00000000  00000000  000419bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b10  00000000  00000000  00048330  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f60  00000000  00000000  00048e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007165  00000000  00000000  00049da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c5f  00000000  00000000  00050f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00054b64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001fa0  00000000  00000000  00054be0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc0 	.word	0x08003fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08003fc0 	.word	0x08003fc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000282:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_InitTick+0x3c>)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <HAL_InitTick+0x40>)
{
 8000286:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000288:	7818      	ldrb	r0, [r3, #0]
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000292:	6810      	ldr	r0, [r2, #0]
 8000294:	fbb0 f0f3 	udiv	r0, r0, r3
 8000298:	f000 f8a0 	bl	80003dc <HAL_SYSTICK_Config>
 800029c:	4604      	mov	r4, r0
 800029e:	b958      	cbnz	r0, 80002b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a0:	2d0f      	cmp	r5, #15
 80002a2:	d809      	bhi.n	80002b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a4:	4602      	mov	r2, r0
 80002a6:	4629      	mov	r1, r5
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002ac:	f000 f856 	bl	800035c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_InitTick+0x44>)
 80002b2:	4620      	mov	r0, r4
 80002b4:	601d      	str	r5, [r3, #0]
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	20000118 	.word	0x20000118
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000004 	.word	0x20000004

080002c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_Init+0x20>)
{
 80002ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	6813      	ldr	r3, [r2, #0]
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 f82f 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002e0:	f002 fe0a 	bl	8002ef8 <HAL_MspInit>
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	40022000 	.word	0x40022000

080002ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x10>)
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <HAL_IncTick+0x14>)
 80002f0:	6811      	ldr	r1, [r2, #0]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	440b      	add	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000410 	.word	0x20000410
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_GetTick+0x8>)
 8000306:	6818      	ldr	r0, [r3, #0]
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000410 	.word	0x20000410

08000310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000314:	f7ff fff6 	bl	8000304 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000318:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	bf1c      	itt	ne
 800031c:	4b05      	ldrne	r3, [pc, #20]	; (8000334 <HAL_Delay+0x24>)
 800031e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000320:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000322:	bf18      	it	ne
 8000324:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000326:	f7ff ffed 	bl	8000304 <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	4284      	cmp	r4, r0
 800032e:	d8fa      	bhi.n	8000326 <HAL_Delay+0x16>
  {
  }
}
 8000330:	bd38      	pop	{r3, r4, r5, pc}
 8000332:	bf00      	nop
 8000334:	20000000 	.word	0x20000000

08000338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000340:	041b      	lsls	r3, r3, #16
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000348:	0200      	lsls	r0, r0, #8
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000352:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000354:	60d3      	str	r3, [r2, #12]
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035e:	b530      	push	{r4, r5, lr}
 8000360:	68dc      	ldr	r4, [r3, #12]
 8000362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000366:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800036c:	2b04      	cmp	r3, #4
 800036e:	bf28      	it	cs
 8000370:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	f04f 0501 	mov.w	r5, #1
 8000378:	fa05 f303 	lsl.w	r3, r5, r3
 800037c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000380:	bf8c      	ite	hi
 8000382:	3c03      	subhi	r4, #3
 8000384:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000386:	4019      	ands	r1, r3
 8000388:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038a:	fa05 f404 	lsl.w	r4, r5, r4
 800038e:	3c01      	subs	r4, #1
 8000390:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000392:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	ea42 0201 	orr.w	r2, r2, r1
 8000398:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	bfaf      	iteee	ge
 800039e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	f000 000f 	andlt.w	r0, r0, #15
 80003a6:	4b06      	ldrlt	r3, [pc, #24]	; (80003c0 <HAL_NVIC_SetPriority+0x64>)
 80003a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003aa:	bfa5      	ittet	ge
 80003ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000ed14 	.word	0xe000ed14

080003c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c4:	0942      	lsrs	r2, r0, #5
 80003c6:	2301      	movs	r3, #1
 80003c8:	f000 001f 	and.w	r0, r0, #31
 80003cc:	fa03 f000 	lsl.w	r0, r3, r0
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_NVIC_EnableIRQ+0x14>)
 80003d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100

080003dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003dc:	3801      	subs	r0, #1
 80003de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003e2:	d20a      	bcs.n	80003fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	21f0      	movs	r1, #240	; 0xf0
 80003ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e010 	.word	0xe000e010
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000408:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800040c:	2a02      	cmp	r2, #2
{  
 800040e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000410:	d003      	beq.n	800041a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000412:	2204      	movs	r2, #4
 8000414:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000416:	2001      	movs	r0, #1
 8000418:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800041a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800041c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800041e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000420:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000422:	f021 010e 	bic.w	r1, r1, #14
 8000426:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000428:	6811      	ldr	r1, [r2, #0]
 800042a:	f021 0101 	bic.w	r1, r1, #1
 800042e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000430:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000432:	2101      	movs	r1, #1
 8000434:	fa01 f202 	lsl.w	r2, r1, r2
 8000438:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800043a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800043c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000440:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000444:	b113      	cbz	r3, 800044c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000446:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000448:	4620      	mov	r0, r4
 800044a:	bd10      	pop	{r4, pc}
 800044c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800044e:	bd10      	pop	{r4, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000454:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80005d0 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800045c:	4a5a      	ldr	r2, [pc, #360]	; (80005c8 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800045e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000460:	fa38 f403 	lsrs.w	r4, r8, r3
 8000464:	d102      	bne.n	800046c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000466:	b003      	add	sp, #12
 8000468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800046c:	2401      	movs	r4, #1
 800046e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000472:	ea18 050a 	ands.w	r5, r8, sl
 8000476:	f000 809c 	beq.w	80005b2 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800047a:	684c      	ldr	r4, [r1, #4]
 800047c:	f024 0b10 	bic.w	fp, r4, #16
 8000480:	f1bb 0f02 	cmp.w	fp, #2
 8000484:	d114      	bne.n	80004b0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000486:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800048a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800048e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000492:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000496:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800049a:	270f      	movs	r7, #15
 800049c:	fa07 f70c 	lsl.w	r7, r7, ip
 80004a0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004a4:	690e      	ldr	r6, [r1, #16]
 80004a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80004aa:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80004ac:	f8ce 6020 	str.w	r6, [lr, #32]
 80004b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b4:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80004b6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80004bc:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004be:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004c2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004c4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004cc:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80004d4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d6:	d811      	bhi.n	80004fc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80004d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004da:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004de:	68ce      	ldr	r6, [r1, #12]
 80004e0:	fa06 fe0c 	lsl.w	lr, r6, ip
 80004e4:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80004e8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80004ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004ec:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004f0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80004f4:	409e      	lsls	r6, r3
 80004f6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80004fa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80004fc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fe:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000500:	688e      	ldr	r6, [r1, #8]
 8000502:	fa06 f60c 	lsl.w	r6, r6, ip
 8000506:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000508:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800050a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800050c:	d551      	bpl.n	80005b2 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000512:	f046 0601 	orr.w	r6, r6, #1
 8000516:	f8c9 6018 	str.w	r6, [r9, #24]
 800051a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800051e:	f023 0703 	bic.w	r7, r3, #3
 8000522:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000526:	f006 0601 	and.w	r6, r6, #1
 800052a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800052e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000530:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000534:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000536:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000538:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800053c:	f04f 0e0f 	mov.w	lr, #15
 8000540:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000544:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000548:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800054c:	d033      	beq.n	80005b6 <HAL_GPIO_Init+0x166>
 800054e:	4e1f      	ldr	r6, [pc, #124]	; (80005cc <HAL_GPIO_Init+0x17c>)
 8000550:	42b0      	cmp	r0, r6
 8000552:	d032      	beq.n	80005ba <HAL_GPIO_Init+0x16a>
 8000554:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000558:	42b0      	cmp	r0, r6
 800055a:	d030      	beq.n	80005be <HAL_GPIO_Init+0x16e>
 800055c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000560:	42b0      	cmp	r0, r6
 8000562:	d02e      	beq.n	80005c2 <HAL_GPIO_Init+0x172>
 8000564:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000568:	42b0      	cmp	r0, r6
 800056a:	bf14      	ite	ne
 800056c:	2605      	movne	r6, #5
 800056e:	2604      	moveq	r6, #4
 8000570:	fa06 f60c 	lsl.w	r6, r6, ip
 8000574:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000578:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800057a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800057c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800057e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000582:	bf0c      	ite	eq
 8000584:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000586:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000588:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800058a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800058c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000590:	bf0c      	ite	eq
 8000592:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000594:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000596:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000598:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800059a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800059e:	bf0c      	ite	eq
 80005a0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005a2:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80005a4:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80005a6:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005a8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80005aa:	bf54      	ite	pl
 80005ac:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80005ae:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80005b0:	60d6      	str	r6, [r2, #12]
    position++;
 80005b2:	3301      	adds	r3, #1
 80005b4:	e754      	b.n	8000460 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005b6:	2600      	movs	r6, #0
 80005b8:	e7da      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005ba:	2601      	movs	r6, #1
 80005bc:	e7d8      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005be:	2602      	movs	r6, #2
 80005c0:	e7d6      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005c2:	2603      	movs	r6, #3
 80005c4:	e7d4      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	48000400 	.word	0x48000400
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005d4:	b10a      	cbz	r2, 80005da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005d6:	6181      	str	r1, [r0, #24]
 80005d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005da:	6281      	str	r1, [r0, #40]	; 0x28
 80005dc:	4770      	bx	lr

080005de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80005de:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80005e0:	4604      	mov	r4, r0
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d04d      	beq.n	8000682 <HAL_PCD_Init+0xa4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80005e6:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 80005ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80005ee:	b91b      	cbnz	r3, 80005f8 <HAL_PCD_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80005f0:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80005f4:	f002 fec2 	bl	800337c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80005f8:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80005fa:	2100      	movs	r1, #0
 80005fc:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80005fe:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 8000602:	460a      	mov	r2, r1
 8000604:	f104 0328 	add.w	r3, r4, #40	; 0x28
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000608:	2501      	movs	r5, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800060a:	4281      	cmp	r1, r0
 800060c:	f103 031c 	add.w	r3, r3, #28
 8000610:	d11b      	bne.n	800064a <HAL_PCD_Init+0x6c>
 8000612:	2000      	movs	r0, #0
 8000614:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
 8000618:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800061a:	4281      	cmp	r1, r0
 800061c:	f102 021c 	add.w	r2, r2, #28
 8000620:	d121      	bne.n	8000666 <HAL_PCD_Init+0x88>
   hpcd->OUT_ep[i].xfer_len = 0U;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000622:	6822      	ldr	r2, [r4, #0]
 8000624:	2101      	movs	r1, #1
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000626:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800062a:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0U;
 800062e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0U;
 8000632:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000636:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800063a:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 800063e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 8000642:	2000      	movs	r0, #0
  hpcd->State= HAL_PCD_STATE_READY;
 8000644:	f884 1371 	strb.w	r1, [r4, #881]	; 0x371
 return HAL_OK;
 8000648:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 800064a:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1U;
 800064e:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000652:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000656:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800065a:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0U;
 800065e:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000662:	3101      	adds	r1, #1
 8000664:	e7d1      	b.n	800060a <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 8000666:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0U;
 800066a:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800066e:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000672:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000676:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800067a:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800067e:	3001      	adds	r0, #1
 8000680:	e7cb      	b.n	800061a <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8000682:	2001      	movs	r0, #1
}
 8000684:	bd38      	pop	{r3, r4, r5, pc}

08000686 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000686:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1U);
 8000688:	2101      	movs	r1, #1
 800068a:	f002 ffb4 	bl	80035f6 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 800068e:	2000      	movs	r0, #0
 8000690:	bd08      	pop	{r3, pc}

08000692 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000692:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8000696:	2b01      	cmp	r3, #1
 8000698:	d00f      	beq.n	80006ba <HAL_PCD_SetAddress+0x28>
 800069a:	2301      	movs	r3, #1
 800069c:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

   if(address == 0U) 
 80006a0:	b941      	cbnz	r1, 80006b4 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80006a2:	6803      	ldr	r3, [r0, #0]
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 80006aa:	2300      	movs	r3, #0
 80006ac:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 80006b0:	4618      	mov	r0, r3
 80006b2:	4770      	bx	lr
     hpcd->USB_Address = address;
 80006b4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80006b8:	e7f7      	b.n	80006aa <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 80006ba:	2002      	movs	r0, #2
  return HAL_OK;
}
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80006c2:	b24c      	sxtb	r4, r1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80006ca:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ce:	bfb5      	itete	lt
 80006d0:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006d4:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006d8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006da:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006de:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7FU;
 80006e0:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006e2:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80006e4:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 80006e6:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
  ep->maxpacket = ep_mps;
 80006ea:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	f000 817a 	beq.w	80009e6 <HAL_PCD_EP_Open+0x326>
 80006f2:	2301      	movs	r3, #1
 80006f4:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 80006f8:	78cd      	ldrb	r5, [r1, #3]
 80006fa:	780c      	ldrb	r4, [r1, #0]
 80006fc:	6803      	ldr	r3, [r0, #0]
 80006fe:	2d03      	cmp	r5, #3
 8000700:	d810      	bhi.n	8000724 <HAL_PCD_EP_Open+0x64>
 8000702:	e8df f005 	tbb	[pc, r5]
 8000706:	6b02      	.short	0x6b02
 8000708:	5f55      	.short	0x5f55
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800070a:	b224      	sxth	r4, r4
 800070c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8000710:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8000714:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8000718:	042d      	lsls	r5, r5, #16
 800071a:	0c2d      	lsrs	r5, r5, #16
 800071c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000720:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000724:	780d      	ldrb	r5, [r1, #0]
 8000726:	b22f      	sxth	r7, r5
 8000728:	f640 740f 	movw	r4, #3855	; 0xf0f
 800072c:	f833 6027 	ldrh.w	r6, [r3, r7, lsl #2]
 8000730:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8000734:	4026      	ands	r6, r4
 8000736:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800073a:	4335      	orrs	r5, r6
 800073c:	f823 5027 	strh.w	r5, [r3, r7, lsl #2]
  
  if (ep->doublebuffer == 0U) 
 8000740:	7a8d      	ldrb	r5, [r1, #10]
 8000742:	780f      	ldrb	r7, [r1, #0]
 8000744:	2d00      	cmp	r5, #0
 8000746:	f040 809b 	bne.w	8000880 <HAL_PCD_EP_Open+0x1c0>
  {
    if (ep->is_in)
 800074a:	784d      	ldrb	r5, [r1, #1]
 800074c:	888e      	ldrh	r6, [r1, #4]
 800074e:	2d00      	cmp	r5, #0
 8000750:	d050      	beq.n	80007f4 <HAL_PCD_EP_Open+0x134>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000752:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8000756:	b2ad      	uxth	r5, r5
 8000758:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 800075c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8000760:	f026 0601 	bic.w	r6, r6, #1
 8000764:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000768:	780d      	ldrb	r5, [r1, #0]
 800076a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800076e:	0652      	lsls	r2, r2, #25
 8000770:	d508      	bpl.n	8000784 <HAL_PCD_EP_Open+0xc4>
 8000772:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000776:	4014      	ands	r4, r2
 8000778:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800077c:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8000780:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000784:	7809      	ldrb	r1, [r1, #0]
 8000786:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800078a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800078e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000792:	0412      	lsls	r2, r2, #16
 8000794:	0c12      	lsrs	r2, r2, #16
 8000796:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800079a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800079e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80007a2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80007a6:	2300      	movs	r3, #0
 80007a8:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return ret;
 80007ac:	4618      	mov	r0, r3
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80007b0:	b224      	sxth	r4, r4
 80007b2:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007b6:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007ba:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007be:	042d      	lsls	r5, r5, #16
 80007c0:	0c2d      	lsrs	r5, r5, #16
 80007c2:	e7ad      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80007c4:	b224      	sxth	r4, r4
 80007c6:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007ca:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007ce:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007d2:	042d      	lsls	r5, r5, #16
 80007d4:	0c2d      	lsrs	r5, r5, #16
 80007d6:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
 80007da:	e7a1      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80007dc:	b224      	sxth	r4, r4
 80007de:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007e2:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007e6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007ea:	042d      	lsls	r5, r5, #16
 80007ec:	0c2d      	lsrs	r5, r5, #16
 80007ee:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80007f2:	e795      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80007f4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80007f8:	2408      	movs	r4, #8
 80007fa:	b2ad      	uxth	r5, r5
 80007fc:	fb14 5507 	smlabb	r5, r4, r7, r5
 8000800:	3504      	adds	r5, #4
 8000802:	f503 6e80 	add.w	lr, r3, #1024	; 0x400
 8000806:	f026 0601 	bic.w	r6, r6, #1
 800080a:	f82e 6015 	strh.w	r6, [lr, r5, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 800080e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8000812:	780e      	ldrb	r6, [r1, #0]
 8000814:	b2ad      	uxth	r5, r5
 8000816:	fb14 5406 	smlabb	r4, r4, r6, r5
 800081a:	2a3e      	cmp	r2, #62	; 0x3e
 800081c:	f104 0406 	add.w	r4, r4, #6
 8000820:	d928      	bls.n	8000874 <HAL_PCD_EP_Open+0x1b4>
 8000822:	0955      	lsrs	r5, r2, #5
 8000824:	06d7      	lsls	r7, r2, #27
 8000826:	bf08      	it	eq
 8000828:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 800082c:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <HAL_PCD_EP_Open+0x32c>)
 800082e:	bf08      	it	eq
 8000830:	b2ad      	uxtheq	r5, r5
 8000832:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8000836:	f82e 5014 	strh.w	r5, [lr, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800083a:	780c      	ldrb	r4, [r1, #0]
 800083c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000840:	0452      	lsls	r2, r2, #17
 8000842:	d50b      	bpl.n	800085c <HAL_PCD_EP_Open+0x19c>
 8000844:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000848:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800084c:	0512      	lsls	r2, r2, #20
 800084e:	0d12      	lsrs	r2, r2, #20
 8000850:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000858:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800086a:	0412      	lsls	r2, r2, #16
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000872:	e792      	b.n	800079a <HAL_PCD_EP_Open+0xda>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000874:	0855      	lsrs	r5, r2, #1
 8000876:	07d6      	lsls	r6, r2, #31
 8000878:	bf48      	it	mi
 800087a:	3501      	addmi	r5, #1
 800087c:	02ad      	lsls	r5, r5, #10
 800087e:	e7da      	b.n	8000836 <HAL_PCD_EP_Open+0x176>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8000880:	b23d      	sxth	r5, r7
 8000882:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000886:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	0d12      	lsrs	r2, r2, #20
 800088e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8000892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000896:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800089a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800089e:	b2b7      	uxth	r7, r6
 80008a0:	780e      	ldrb	r6, [r1, #0]
 80008a2:	2208      	movs	r2, #8
 80008a4:	fb12 7606 	smlabb	r6, r2, r6, r7
 80008a8:	88cf      	ldrh	r7, [r1, #6]
 80008aa:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80008ae:	f027 0701 	bic.w	r7, r7, #1
 80008b2:	f825 7016 	strh.w	r7, [r5, r6, lsl #1]
 80008b6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80008ba:	780f      	ldrb	r7, [r1, #0]
 80008bc:	b2b6      	uxth	r6, r6
 80008be:	fb12 6207 	smlabb	r2, r2, r7, r6
 80008c2:	890e      	ldrh	r6, [r1, #8]
 80008c4:	3204      	adds	r2, #4
 80008c6:	f026 0601 	bic.w	r6, r6, #1
 80008ca:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 80008ce:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in==0U)
 80008d0:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80008d2:	b212      	sxth	r2, r2
    if (ep->is_in==0U)
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d145      	bne.n	8000964 <HAL_PCD_EP_Open+0x2a4>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80008d8:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80008dc:	046f      	lsls	r7, r5, #17
 80008de:	d508      	bpl.n	80008f2 <HAL_PCD_EP_Open+0x232>
 80008e0:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80008e4:	402c      	ands	r4, r5
 80008e6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80008ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80008ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80008f2:	780c      	ldrb	r4, [r1, #0]
 80008f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80008f8:	0656      	lsls	r6, r2, #25
 80008fa:	d50b      	bpl.n	8000914 <HAL_PCD_EP_Open+0x254>
 80008fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000900:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000904:	0512      	lsls	r2, r2, #20
 8000906:	0d12      	lsrs	r2, r2, #20
 8000908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800090c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000910:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000914:	780c      	ldrb	r4, [r1, #0]
 8000916:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800091a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800091e:	0512      	lsls	r2, r2, #20
 8000920:	0d12      	lsrs	r2, r2, #20
 8000922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000926:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800092a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800092e:	780d      	ldrb	r5, [r1, #0]
 8000930:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000934:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000938:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800093c:	0412      	lsls	r2, r2, #16
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000944:	f248 0480 	movw	r4, #32896	; 0x8080
 8000948:	4322      	orrs	r2, r4
 800094a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800094e:	7809      	ldrb	r1, [r1, #0]
 8000950:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000954:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800095c:	0412      	lsls	r2, r2, #16
 800095e:	0c12      	lsrs	r2, r2, #16
 8000960:	4322      	orrs	r2, r4
 8000962:	e71e      	b.n	80007a2 <HAL_PCD_EP_Open+0xe2>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000964:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8000968:	046d      	lsls	r5, r5, #17
 800096a:	d508      	bpl.n	800097e <HAL_PCD_EP_Open+0x2be>
 800096c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8000970:	402c      	ands	r4, r5
 8000972:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000976:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800097a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800097e:	780c      	ldrb	r4, [r1, #0]
 8000980:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000984:	0652      	lsls	r2, r2, #25
 8000986:	d50b      	bpl.n	80009a0 <HAL_PCD_EP_Open+0x2e0>
 8000988:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800098c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000990:	0512      	lsls	r2, r2, #20
 8000992:	0d12      	lsrs	r2, r2, #20
 8000994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000998:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800099c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80009a0:	780c      	ldrb	r4, [r1, #0]
 80009a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80009a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009aa:	0512      	lsls	r2, r2, #20
 80009ac:	0d12      	lsrs	r2, r2, #20
 80009ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80009ba:	780d      	ldrb	r5, [r1, #0]
 80009bc:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80009c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009c8:	0412      	lsls	r2, r2, #16
 80009ca:	0c12      	lsrs	r2, r2, #16
 80009cc:	f248 0480 	movw	r4, #32896	; 0x8080
 80009d0:	4322      	orrs	r2, r4
 80009d2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80009d6:	7809      	ldrb	r1, [r1, #0]
 80009d8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80009dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009e4:	e7ba      	b.n	800095c <HAL_PCD_EP_Open+0x29c>
  __HAL_LOCK(hpcd); 
 80009e6:	2002      	movs	r0, #2
}
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	ffff8000 	.word	0xffff8000

080009f0 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80009f0:	b24b      	sxtb	r3, r1
 80009f2:	2b00      	cmp	r3, #0
{  
 80009f4:	b530      	push	{r4, r5, lr}
 80009f6:	f04f 021c 	mov.w	r2, #28
 80009fa:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80009fe:	bfb5      	itete	lt
 8000a00:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000a04:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000a08:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000a0a:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a0e:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000a10:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a12:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000a14:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f000 80d4 	beq.w	8000bc6 <HAL_PCD_EP_Close+0x1d6>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8000a24:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0U) 
 8000a26:	7a8d      	ldrb	r5, [r1, #10]
 8000a28:	784c      	ldrb	r4, [r1, #1]
 8000a2a:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000a2c:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0U) 
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d13c      	bne.n	8000aac <HAL_PCD_EP_Close+0xbc>
    if (ep->is_in)
 8000a32:	b31c      	cbz	r4, 8000a7c <HAL_PCD_EP_Close+0x8c>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000a34:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a38:	0664      	lsls	r4, r4, #25
 8000a3a:	d50b      	bpl.n	8000a54 <HAL_PCD_EP_Close+0x64>
 8000a3c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a40:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000a44:	0524      	lsls	r4, r4, #20
 8000a46:	0d24      	lsrs	r4, r4, #20
 8000a48:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000a4c:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8000a50:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 8000a54:	7809      	ldrb	r1, [r1, #0]
 8000a56:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000a5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a6e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8000a72:	2300      	movs	r3, #0
 8000a74:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return HAL_OK;
 8000a78:	4618      	mov	r0, r3
 8000a7a:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000a7c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a80:	0465      	lsls	r5, r4, #17
 8000a82:	d50b      	bpl.n	8000a9c <HAL_PCD_EP_Close+0xac>
 8000a84:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a88:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000a8c:	0524      	lsls	r4, r4, #20
 8000a8e:	0d24      	lsrs	r4, r4, #20
 8000a90:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000a94:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000a98:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a9c:	7809      	ldrb	r1, [r1, #0]
 8000a9e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000aa6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000aaa:	e7da      	b.n	8000a62 <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d146      	bne.n	8000b3e <HAL_PCD_EP_Close+0x14e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000ab0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000ab4:	0464      	lsls	r4, r4, #17
 8000ab6:	d50b      	bpl.n	8000ad0 <HAL_PCD_EP_Close+0xe0>
 8000ab8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000abc:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000ac0:	0524      	lsls	r4, r4, #20
 8000ac2:	0d24      	lsrs	r4, r4, #20
 8000ac4:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000ac8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000acc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000ad0:	780c      	ldrb	r4, [r1, #0]
 8000ad2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000ad6:	0655      	lsls	r5, r2, #25
 8000ad8:	d50b      	bpl.n	8000af2 <HAL_PCD_EP_Close+0x102>
 8000ada:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000ade:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ae2:	0512      	lsls	r2, r2, #20
 8000ae4:	0d12      	lsrs	r2, r2, #20
 8000ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000aea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000aee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000af2:	780c      	ldrb	r4, [r1, #0]
 8000af4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000af8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000afc:	0512      	lsls	r2, r2, #20
 8000afe:	0d12      	lsrs	r2, r2, #20
 8000b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b04:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000b08:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000b0c:	780d      	ldrb	r5, [r1, #0]
 8000b0e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	f248 0480 	movw	r4, #32896	; 0x8080
 8000b22:	4322      	orrs	r2, r4
 8000b24:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000b28:	7809      	ldrb	r1, [r1, #0]
 8000b2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000b2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000b36:	0412      	lsls	r2, r2, #16
 8000b38:	0c12      	lsrs	r2, r2, #16
 8000b3a:	4322      	orrs	r2, r4
 8000b3c:	e797      	b.n	8000a6e <HAL_PCD_EP_Close+0x7e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000b3e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000b42:	0464      	lsls	r4, r4, #17
 8000b44:	d50b      	bpl.n	8000b5e <HAL_PCD_EP_Close+0x16e>
 8000b46:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000b4a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000b4e:	0524      	lsls	r4, r4, #20
 8000b50:	0d24      	lsrs	r4, r4, #20
 8000b52:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000b56:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000b5a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000b5e:	780c      	ldrb	r4, [r1, #0]
 8000b60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b64:	0652      	lsls	r2, r2, #25
 8000b66:	d50b      	bpl.n	8000b80 <HAL_PCD_EP_Close+0x190>
 8000b68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b70:	0512      	lsls	r2, r2, #20
 8000b72:	0d12      	lsrs	r2, r2, #20
 8000b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000b7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000b80:	780c      	ldrb	r4, [r1, #0]
 8000b82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b8a:	0512      	lsls	r2, r2, #20
 8000b8c:	0d12      	lsrs	r2, r2, #20
 8000b8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b96:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000b9a:	780d      	ldrb	r5, [r1, #0]
 8000b9c:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000ba0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba8:	0412      	lsls	r2, r2, #16
 8000baa:	0c12      	lsrs	r2, r2, #16
 8000bac:	f248 0480 	movw	r4, #32896	; 0x8080
 8000bb0:	4322      	orrs	r2, r4
 8000bb2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000bb6:	7809      	ldrb	r1, [r1, #0]
 8000bb8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000bc4:	e7b7      	b.n	8000b36 <HAL_PCD_EP_Close+0x146>
  __HAL_LOCK(hpcd); 
 8000bc6:	2002      	movs	r0, #2
}
 8000bc8:	bd30      	pop	{r4, r5, pc}
	...

08000bcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000bd2:	241c      	movs	r4, #28
 8000bd4:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000bd8:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 8000bda:	f8c5 21dc 	str.w	r2, [r5, #476]	; 0x1dc
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;

  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000bde:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
  ep->xfer_len = len;
 8000be2:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
  if (ep->xfer_len > ep->maxpacket)
 8000be6:	4293      	cmp	r3, r2
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000be8:	bf86      	itte	hi
 8000bea:	1a9b      	subhi	r3, r3, r2
 8000bec:	f8c5 31e0 	strhi.w	r3, [r5, #480]	; 0x1e0
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
 8000bf0:	461a      	movls	r2, r3
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 8000bf2:	fb04 0301 	mla	r3, r4, r1, r0
  ep->xfer_count = 0U;
 8000bf6:	f8c5 61e4 	str.w	r6, [r5, #484]	; 0x1e4
  ep->is_in = 0U;
 8000bfa:	f885 61cd 	strb.w	r6, [r5, #461]	; 0x1cd
  ep->num = ep_addr & 0x7FU;
 8000bfe:	f885 11cc 	strb.w	r1, [r5, #460]	; 0x1cc
    ep->xfer_len =0U;
 8000c02:	bf98      	it	ls
 8000c04:	f8c5 61e0 	strls.w	r6, [r5, #480]	; 0x1e0
  if (ep->doublebuffer == 0U) 
 8000c08:	f893 51d6 	ldrb.w	r5, [r3, #470]	; 0x1d6
 8000c0c:	6804      	ldr	r4, [r0, #0]
 8000c0e:	bb85      	cbnz	r5, 8000c72 <HAL_PCD_EP_Receive+0xa6>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000c10:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000c14:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000c18:	b2ad      	uxth	r5, r5
 8000c1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000c1e:	2a3e      	cmp	r2, #62	; 0x3e
 8000c20:	f103 0306 	add.w	r3, r3, #6
 8000c24:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8000c28:	d935      	bls.n	8000c96 <HAL_PCD_EP_Receive+0xca>
 8000c2a:	f3c2 154f 	ubfx	r5, r2, #5, #16
 8000c2e:	06d2      	lsls	r2, r2, #27
 8000c30:	bf08      	it	eq
 8000c32:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_PCD_EP_Receive+0xdc>)
 8000c38:	bf08      	it	eq
 8000c3a:	b2ad      	uxtheq	r5, r5
 8000c3c:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8000c40:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000c44:	231c      	movs	r3, #28
 8000c46:	fb03 0001 	mla	r0, r3, r1, r0
 8000c4a:	f890 21cc 	ldrb.w	r2, [r0, #460]	; 0x1cc
 8000c4e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8000c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]

  return HAL_OK;
}
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000c72:	f893 51cd 	ldrb.w	r5, [r3, #461]	; 0x1cd
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0ca      	beq.n	8000c10 <HAL_PCD_EP_Receive+0x44>
 8000c7a:	2d01      	cmp	r5, #1
 8000c7c:	d1e2      	bne.n	8000c44 <HAL_PCD_EP_Receive+0x78>
 8000c7e:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000c82:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000c8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000c90:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000c94:	e7d6      	b.n	8000c44 <HAL_PCD_EP_Receive+0x78>
 8000c96:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8000c9a:	07d2      	lsls	r2, r2, #31
 8000c9c:	bf44      	itt	mi
 8000c9e:	3501      	addmi	r5, #1
 8000ca0:	b2ad      	uxthmi	r5, r5
 8000ca2:	02ad      	lsls	r5, r5, #10
 8000ca4:	e7cc      	b.n	8000c40 <HAL_PCD_EP_Receive+0x74>
 8000ca6:	bf00      	nop
 8000ca8:	ffff8000 	.word	0xffff8000

08000cac <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000cac:	231c      	movs	r3, #28
 8000cae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000cb2:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000cb6:	f8b1 01e4 	ldrh.w	r0, [r1, #484]	; 0x1e4
 8000cba:	4770      	bx	lr

08000cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	f001 077f 	and.w	r7, r1, #127	; 0x7f
  uint16_t pmabuffer = 0U;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000cc2:	241c      	movs	r4, #28
 8000cc4:	fb04 0107 	mla	r1, r4, r7, r0
{
 8000cc8:	4605      	mov	r5, r0
  ep->xfer_count = 0U;
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000cca:	6b4e      	ldr	r6, [r1, #52]	; 0x34
  ep->xfer_len = len;
 8000ccc:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->xfer_len > ep->maxpacket)
 8000cce:	42b3      	cmp	r3, r6
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000cd0:	bf88      	it	hi
 8000cd2:	1b9b      	subhi	r3, r3, r6
  ep->xfer_buff = pBuf;  
 8000cd4:	638a      	str	r2, [r1, #56]	; 0x38
  ep->is_in = 1U;
 8000cd6:	f04f 0001 	mov.w	r0, #1
  ep->xfer_count = 0U;
 8000cda:	f04f 0200 	mov.w	r2, #0
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8000cde:	fb04 5407 	mla	r4, r4, r7, r5
  ep->xfer_count = 0U;
 8000ce2:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 8000ce4:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8000ce8:	f881 7028 	strb.w	r7, [r1, #40]	; 0x28
    ep->xfer_len-=len; 
 8000cec:	bf8e      	itee	hi
 8000cee:	63cb      	strhi	r3, [r1, #60]	; 0x3c
    ep->xfer_len =0U;
 8000cf0:	63ca      	strls	r2, [r1, #60]	; 0x3c
 8000cf2:	461e      	movls	r6, r3
  if (ep->doublebuffer == 0U) 
 8000cf4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8000cf8:	b2b6      	uxth	r6, r6
 8000cfa:	bb4b      	cbnz	r3, 8000d50 <HAL_PCD_EP_Transmit+0x94>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8000cfc:	4633      	mov	r3, r6
 8000cfe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000d00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d02:	6828      	ldr	r0, [r5, #0]
 8000d04:	f000 fb70 	bl	80013e8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8000d08:	682a      	ldr	r2, [r5, #0]
 8000d0a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d0e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000d18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000d1c:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000d20:	231c      	movs	r3, #28
 8000d22:	fb03 5707 	mla	r7, r3, r7, r5
 8000d26:	682a      	ldr	r2, [r5, #0]
 8000d28:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8000d2c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000d50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000d54:	6828      	ldr	r0, [r5, #0]
 8000d56:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8000d5a:	065b      	lsls	r3, r3, #25
      pmabuffer = ep->pmaaddr1;
 8000d5c:	bf4c      	ite	mi
 8000d5e:	8e22      	ldrhmi	r2, [r4, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8000d60:	8de2      	ldrhpl	r2, [r4, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000d62:	241c      	movs	r4, #28
 8000d64:	fb04 5407 	mla	r4, r4, r7, r5
 8000d68:	4633      	mov	r3, r6
 8000d6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d6c:	f000 fb3c 	bl	80013e8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8000d70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8000d74:	682a      	ldr	r2, [r5, #0]
 8000d76:	b973      	cbnz	r3, 8000d96 <HAL_PCD_EP_Transmit+0xda>
 8000d78:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d7c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d84:	051b      	lsls	r3, r3, #20
 8000d86:	0d1b      	lsrs	r3, r3, #20
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d90:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d94:	e7c4      	b.n	8000d20 <HAL_PCD_EP_Transmit+0x64>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d1c2      	bne.n	8000d20 <HAL_PCD_EP_Transmit+0x64>
 8000d9a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d9e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000da6:	051b      	lsls	r3, r3, #20
 8000da8:	0d1b      	lsrs	r3, r3, #20
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	e7ed      	b.n	8000d90 <HAL_PCD_EP_Transmit+0xd4>

08000db4 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dba:	041b      	lsls	r3, r3, #16
{
 8000dbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000dc2:	d472      	bmi.n	8000eaa <HAL_PCD_IRQHandler+0xf6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dca:	0557      	lsls	r7, r2, #21
 8000dcc:	d50a      	bpl.n	8000de4 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dce:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8000dd2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000dd8:	f002 fb19 	bl	800340e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff fc57 	bl	8000692 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dea:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000dec:	bf44      	itt	mi
 8000dee:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8000df2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000df6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dfa:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000dfc:	bf44      	itt	mi
 8000dfe:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8000e02:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000e06:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e0a:	04d6      	lsls	r6, r2, #19
 8000e0c:	d517      	bpl.n	8000e3e <HAL_PCD_IRQHandler+0x8a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e0e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	0c12      	lsrs	r2, r2, #16
 8000e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e1e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e22:	f022 0208 	bic.w	r2, r2, #8
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	0c12      	lsrs	r2, r2, #16
 8000e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f002 fb0a 	bl	8003448 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e44:	0515      	lsls	r5, r2, #20
 8000e46:	d518      	bpl.n	8000e7a <HAL_PCD_IRQHandler+0xc6>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f042 0208 	orr.w	r2, r2, #8
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e56:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8000e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e62:	b292      	uxth	r2, r2
 8000e64:	f042 0204 	orr.w	r2, r2, #4
 8000e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e70:	04d8      	lsls	r0, r3, #19
 8000e72:	d402      	bmi.n	8000e7a <HAL_PCD_IRQHandler+0xc6>
      HAL_PCD_SuspendCallback(hpcd);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f002 fad7 	bl	8003428 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e80:	0591      	lsls	r1, r2, #22
 8000e82:	d506      	bpl.n	8000e92 <HAL_PCD_IRQHandler+0xde>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000e84:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f002 faba 	bl	8003406 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e98:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000e9a:	bf44      	itt	mi
 8000e9c:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8000ea0:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0U;
 8000eaa:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8000eac:	4fc6      	ldr	r7, [pc, #792]	; (80011c8 <HAL_PCD_IRQHandler+0x414>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8000eae:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80011cc <HAL_PCD_IRQHandler+0x418>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000eb2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80011d0 <HAL_PCD_IRQHandler+0x41c>
  __IO uint16_t wEPVal = 0U;
 8000eb6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	0419      	lsls	r1, r3, #16
 8000ec4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ec8:	f57f af7c 	bpl.w	8000dc4 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ecc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0U)
 8000ed0:	f016 060f 	ands.w	r6, r6, #15
 8000ed4:	f040 80aa 	bne.w	800102c <HAL_PCD_IRQHandler+0x278>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ed8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000edc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ede:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ee2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ee4:	d126      	bne.n	8000f34 <HAL_PCD_IRQHandler+0x180>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ee6:	403b      	ands	r3, r7
 8000ee8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000eee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ef8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8000efc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000efe:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8000f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f06:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000f08:	4413      	add	r3, r2
 8000f0a:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f002 fa72 	bl	80033f6 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000f12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0cf      	beq.n	8000eba <HAL_PCD_IRQHandler+0x106>
 8000f1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1cc      	bne.n	8000eba <HAL_PCD_IRQHandler+0x106>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000f20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f24:	6821      	ldr	r1, [r4, #0]
 8000f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f2e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f32:	e7c2      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f34:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f3c:	051e      	lsls	r6, r3, #20
 8000f3e:	d51f      	bpl.n	8000f80 <HAL_PCD_IRQHandler+0x1cc>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f44:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8000f52:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8000f56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f5e:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8000f62:	f504 715d 	add.w	r1, r4, #884	; 0x374
 8000f66:	f000 fa52 	bl	800140e <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000f6a:	6822      	ldr	r2, [r4, #0]
 8000f6c:	8813      	ldrh	r3, [r2, #0]
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f72:	051b      	lsls	r3, r3, #20
 8000f74:	0d1b      	lsrs	r3, r3, #20
 8000f76:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f002 fa2d 	bl	80033d8 <HAL_PCD_SetupStageCallback>
 8000f7e:	e79c      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f84:	041d      	lsls	r5, r3, #16
 8000f86:	d598      	bpl.n	8000eba <HAL_PCD_IRQHandler+0x106>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f88:	8803      	ldrh	r3, [r0, #0]
 8000f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8e:	051b      	lsls	r3, r3, #20
 8000f90:	0d1b      	lsrs	r3, r3, #20
 8000f92:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f98:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fa6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fae:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          if (ep->xfer_count != 0U)
 8000fb2:	b163      	cbz	r3, 8000fce <HAL_PCD_IRQHandler+0x21a>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000fb4:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8000fb8:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
 8000fbc:	f000 fa27 	bl	800140e <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000fc0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8000fc4:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8000fc8:	4413      	add	r3, r2
 8000fca:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f002 fa07 	bl	80033e4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
 8000fdc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000fe0:	283e      	cmp	r0, #62	; 0x3e
 8000fe2:	b289      	uxth	r1, r1
 8000fe4:	f101 0106 	add.w	r1, r1, #6
 8000fe8:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 8000fec:	d916      	bls.n	800101c <HAL_PCD_IRQHandler+0x268>
 8000fee:	f3c0 134f 	ubfx	r3, r0, #5, #16
 8000ff2:	06c0      	lsls	r0, r0, #27
 8000ff4:	bf04      	itt	eq
 8000ff6:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000ffa:	b29b      	uxtheq	r3, r3
 8000ffc:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001000:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001004:	8813      	ldrh	r3, [r2, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	ea03 0308 	and.w	r3, r3, r8
 800100c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	8013      	strh	r3, [r2, #0]
 800101a:	e74e      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 800101c:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8001020:	07c6      	lsls	r6, r0, #31
 8001022:	bf44      	itt	mi
 8001024:	3301      	addmi	r3, #1
 8001026:	b29b      	uxthmi	r3, r3
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	e7e9      	b.n	8001000 <HAL_PCD_IRQHandler+0x24c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800102c:	fa0f fa86 	sxth.w	sl, r6
 8001030:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800103a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800103e:	041d      	lsls	r5, r3, #16
 8001040:	d540      	bpl.n	80010c4 <HAL_PCD_IRQHandler+0x310>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001042:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8001046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800104a:	051b      	lsls	r3, r3, #20
 800104c:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0U)
 800104e:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001050:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 8001054:	fb01 4106 	mla	r1, r1, r6, r4
 8001058:	f891 31d6 	ldrb.w	r3, [r1, #470]	; 0x1d6
 800105c:	2b00      	cmp	r3, #0
 800105e:	d173      	bne.n	8001148 <HAL_PCD_IRQHandler+0x394>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001060:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001064:	f891 21cc 	ldrb.w	r2, [r1, #460]	; 0x1cc
 8001068:	b29b      	uxth	r3, r3
 800106a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800106e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001072:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001076:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800107a:	b135      	cbz	r5, 800108a <HAL_PCD_IRQHandler+0x2d6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800107c:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
 8001080:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8001084:	462b      	mov	r3, r5
 8001086:	f000 f9c2 	bl	800140e <PCD_ReadPMA>
        ep->xfer_count+=count;
 800108a:	211c      	movs	r1, #28
 800108c:	fb01 4106 	mla	r1, r1, r6, r4
 8001090:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
        ep->xfer_buff+=count;
 8001094:	f8d1 21dc 	ldr.w	r2, [r1, #476]	; 0x1dc
        ep->xfer_count+=count;
 8001098:	442b      	add	r3, r5
 800109a:	f8c1 31e4 	str.w	r3, [r1, #484]	; 0x1e4
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800109e:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
        ep->xfer_buff+=count;
 80010a2:	442a      	add	r2, r5
 80010a4:	f8c1 21dc 	str.w	r2, [r1, #476]	; 0x1dc
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010a8:	b123      	cbz	r3, 80010b4 <HAL_PCD_IRQHandler+0x300>
 80010aa:	f8d1 01d8 	ldr.w	r0, [r1, #472]	; 0x1d8
 80010ae:	4285      	cmp	r5, r0
 80010b0:	f080 8084 	bcs.w	80011bc <HAL_PCD_IRQHandler+0x408>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80010b4:	231c      	movs	r3, #28
 80010b6:	fb03 4306 	mla	r3, r3, r6, r4
 80010ba:	4620      	mov	r0, r4
 80010bc:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 80010c0:	f002 f990 	bl	80033e4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80010c8:	0618      	lsls	r0, r3, #24
 80010ca:	f57f aef6 	bpl.w	8000eba <HAL_PCD_IRQHandler+0x106>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0U)
 80010d8:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80010da:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 80010de:	fb01 4106 	mla	r1, r1, r6, r4
 80010e2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d174      	bne.n	80011d4 <HAL_PCD_IRQHandler+0x420>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010ee:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010fc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001104:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0U)
 8001106:	b11b      	cbz	r3, 8001110 <HAL_PCD_IRQHandler+0x35c>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001108:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800110a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800110c:	f000 f96c 	bl	80013e8 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	211c      	movs	r1, #28
 8001114:	fb01 4606 	mla	r6, r1, r6, r4
 8001118:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800111c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001120:	b29b      	uxth	r3, r3
 8001122:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001126:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800112a:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800112c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001130:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001132:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001136:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001138:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 800113a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800113c:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0U)
 800113e:	2b00      	cmp	r3, #0
 8001140:	d17f      	bne.n	8001242 <HAL_PCD_IRQHandler+0x48e>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001142:	f002 f958 	bl	80033f6 <HAL_PCD_DataInStageCallback>
 8001146:	e6b8      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001148:	f891 51cc 	ldrb.w	r5, [r1, #460]	; 0x1cc
 800114c:	b22b      	sxth	r3, r5
 800114e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001152:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001156:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800115a:	b292      	uxth	r2, r2
 800115c:	f04f 0308 	mov.w	r3, #8
 8001160:	fb13 2305 	smlabb	r3, r3, r5, r2
 8001164:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001168:	d01e      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x3f4>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800116a:	f8b3 5404 	ldrh.w	r5, [r3, #1028]	; 0x404
 800116e:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001172:	b135      	cbz	r5, 8001182 <HAL_PCD_IRQHandler+0x3ce>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001174:	f8b1 21d2 	ldrh.w	r2, [r1, #466]	; 0x1d2
 8001178:	462b      	mov	r3, r5
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800117a:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 800117e:	f000 f946 	bl	800140e <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001182:	231c      	movs	r3, #28
 8001184:	fb03 4306 	mla	r3, r3, r6, r4
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 800118e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001196:	051b      	lsls	r3, r3, #20
 8001198:	0d1b      	lsrs	r3, r3, #20
 800119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011a2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011a6:	e770      	b.n	800108a <HAL_PCD_IRQHandler+0x2d6>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011a8:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 80011ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d0e6      	beq.n	8001182 <HAL_PCD_IRQHandler+0x3ce>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011b4:	462b      	mov	r3, r5
 80011b6:	f8b1 21d4 	ldrh.w	r2, [r1, #468]	; 0x1d4
 80011ba:	e7de      	b.n	800117a <HAL_PCD_IRQHandler+0x3c6>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011bc:	f891 11cc 	ldrb.w	r1, [r1, #460]	; 0x1cc
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fd03 	bl	8000bcc <HAL_PCD_EP_Receive>
 80011c6:	e77d      	b.n	80010c4 <HAL_PCD_IRQHandler+0x310>
 80011c8:	ffff8f0f 	.word	0xffff8f0f
 80011cc:	ffffbf8f 	.word	0xffffbf8f
 80011d0:	ffff8000 	.word	0xffff8000
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011d4:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 80011d8:	b22b      	sxth	r3, r5
 80011da:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011de:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011e2:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f04f 0308 	mov.w	r3, #8
 80011ec:	fb13 2305 	smlabb	r3, r3, r5, r2
 80011f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011f4:	d01c      	beq.n	8001230 <HAL_PCD_IRQHandler+0x47c>
 80011f6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80011fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011fe:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8001200:	b11b      	cbz	r3, 800120a <HAL_PCD_IRQHandler+0x456>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001202:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001204:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001206:	f000 f8ef 	bl	80013e8 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 800120a:	231c      	movs	r3, #28
 800120c:	fb03 4306 	mla	r3, r3, r6, r4
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001216:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800121a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800121e:	051b      	lsls	r3, r3, #20
 8001220:	0d1b      	lsrs	r3, r3, #20
 8001222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800122e:	e76f      	b.n	8001110 <HAL_PCD_IRQHandler+0x35c>
 8001230:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001234:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001238:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0e5      	beq.n	800120a <HAL_PCD_IRQHandler+0x456>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800123e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001240:	e7e0      	b.n	8001204 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001242:	f7ff fd3b 	bl	8000cbc <HAL_PCD_EP_Transmit>
 8001246:	e638      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>

08001248 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001248:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 800124c:	2b01      	cmp	r3, #1
{
 800124e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001250:	d049      	beq.n	80012e6 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80U & ep_addr) == 0x80U)
 8001252:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 8001254:	2301      	movs	r3, #1
 8001256:	221c      	movs	r2, #28
 8001258:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  if ((0x80U & ep_addr) == 0x80U)
 800125c:	2c00      	cmp	r4, #0
 800125e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001262:	bfb5      	itete	lt
 8001264:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001268:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800126c:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800126e:	f502 72e6 	addge.w	r2, r2, #460	; 0x1cc
  }
  
  ep->is_stall = 1U;
 8001272:	2101      	movs	r1, #1
 8001274:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7FU;
 8001276:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001278:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7FU;
 800127a:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800127c:	7053      	strb	r3, [r2, #1]
 800127e:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0U)
 8001280:	b9a1      	cbnz	r1, 80012ac <HAL_PCD_EP_SetStall+0x64>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 8001282:	8813      	ldrh	r3, [r2, #0]
 8001284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001294:	f083 0310 	eor.w	r3, r3, #16
 8001298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 80012a2:	2300      	movs	r3, #0
 80012a4:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  return HAL_OK;
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	b209      	sxth	r1, r1
    if (ep->is_in)
 80012ae:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80012b0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 80012b4:	da0e      	bge.n	80012d4 <HAL_PCD_EP_SetStall+0x8c>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80012b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012d2:	e7e6      	b.n	80012a2 <HAL_PCD_EP_SetStall+0x5a>
 80012d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012e4:	e7ef      	b.n	80012c6 <HAL_PCD_EP_SetStall+0x7e>
  __HAL_LOCK(hpcd); 
 80012e6:	2002      	movs	r0, #2
}
 80012e8:	bd10      	pop	{r4, pc}

080012ea <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80012ea:	b24b      	sxtb	r3, r1
 80012ec:	2b00      	cmp	r3, #0
{
 80012ee:	b510      	push	{r4, lr}
 80012f0:	f04f 021c 	mov.w	r2, #28
 80012f4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012f8:	bfb5      	itete	lt
 80012fa:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012fe:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001302:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001304:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001308:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800130a:	2200      	movs	r2, #0
 800130c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800130e:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001310:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8001312:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001316:	2b01      	cmp	r3, #1
 8001318:	d049      	beq.n	80013ae <HAL_PCD_EP_ClrStall+0xc4>
 800131a:	2301      	movs	r3, #1
 800131c:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8001320:	780b      	ldrb	r3, [r1, #0]
  
  if (ep->is_in)
 8001322:	784c      	ldrb	r4, [r1, #1]
 8001324:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001326:	b21b      	sxth	r3, r3
  if (ep->is_in)
 8001328:	b32c      	cbz	r4, 8001376 <HAL_PCD_EP_ClrStall+0x8c>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800132a:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800132e:	0664      	lsls	r4, r4, #25
 8001330:	d50b      	bpl.n	800134a <HAL_PCD_EP_ClrStall+0x60>
 8001332:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8001336:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800133a:	0524      	lsls	r4, r4, #20
 800133c:	0d24      	lsrs	r4, r4, #20
 800133e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001342:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8001346:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800134a:	7809      	ldrb	r1, [r1, #0]
 800134c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800136c:	2300      	movs	r3, #0
 800136e:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
    
  return HAL_OK;
 8001372:	4618      	mov	r0, r3
 8001374:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001376:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800137a:	0464      	lsls	r4, r4, #17
 800137c:	d50b      	bpl.n	8001396 <HAL_PCD_EP_ClrStall+0xac>
 800137e:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8001382:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8001386:	0524      	lsls	r4, r4, #20
 8001388:	0d24      	lsrs	r4, r4, #20
 800138a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800138e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001392:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001396:	7809      	ldrb	r1, [r1, #0]
 8001398:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800139c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013ac:	e7d8      	b.n	8001360 <HAL_PCD_EP_ClrStall+0x76>
  __HAL_LOCK(hpcd); 
 80013ae:	2002      	movs	r0, #2
}
 80013b0:	bd10      	pop	{r4, pc}

080013b2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80013b2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80013b6:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013b8:	bf18      	it	ne
 80013ba:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80013be:	f04f 041c 	mov.w	r4, #28
 80013c2:	bf15      	itete	ne
 80013c4:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013c8:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013cc:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80013ce:	f500 70e6 	addeq.w	r0, r0, #460	; 0x1cc
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80013d2:	b91a      	cbnz	r2, 80013dc <HAL_PCDEx_PMAConfig+0x2a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80013d4:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80013d6:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80013d8:	2000      	movs	r0, #0
 80013da:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 80013dc:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 80013de:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80013e0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 80013e2:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80013e4:	8103      	strh	r3, [r0, #8]
 80013e6:	e7f7      	b.n	80013d8 <HAL_PCDEx_PMAConfig+0x26>

080013e8 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80013e8:	3301      	adds	r3, #1
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80013ea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80013ee:	f023 0301 	bic.w	r3, r3, #1
{
 80013f2:	b530      	push	{r4, r5, lr}
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80013f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80013f8:	440b      	add	r3, r1
  
  for (i = n; i != 0; i--)
 80013fa:	460c      	mov	r4, r1
 80013fc:	429c      	cmp	r4, r3
 80013fe:	d100      	bne.n	8001402 <PCD_WritePMA+0x1a>
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001400:	bd30      	pop	{r4, r5, pc}
    *pdwVal++ = temp2;
 8001402:	1a60      	subs	r0, r4, r1
 8001404:	8825      	ldrh	r5, [r4, #0]
 8001406:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
 800140a:	3402      	adds	r4, #2
 800140c:	e7f6      	b.n	80013fc <PCD_WritePMA+0x14>

0800140e <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800140e:	b570      	push	{r4, r5, r6, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8001410:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8001414:	085d      	lsrs	r5, r3, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8001416:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800141a:	1c8c      	adds	r4, r1, #2
  
  for (i = n; i != 0U; i--)
 800141c:	462e      	mov	r6, r5
 800141e:	b936      	cbnz	r6, 800142e <PCD_ReadPMA+0x20>
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
    pdwVal++;
  }

  if (wNBytes % 2)
 8001420:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal++;
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001422:	bf44      	itt	mi
 8001424:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
 8001428:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal++;
 800142e:	1a60      	subs	r0, r4, r1
 8001430:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  for (i = n; i != 0U; i--)
 8001434:	3e01      	subs	r6, #1
    temp = *pdwVal++;
 8001436:	f830 0c04 	ldrh.w	r0, [r0, #-4]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800143a:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800143e:	0a00      	lsrs	r0, r0, #8
 8001440:	f804 0c01 	strb.w	r0, [r4, #-1]
 8001444:	3402      	adds	r4, #2
 8001446:	e7ea      	b.n	800141e <PCD_ReadPMA+0x10>

08001448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	4605      	mov	r5, r0
 800144e:	b918      	cbnz	r0, 8001458 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001452:	b002      	add	sp, #8
 8001454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001458:	6803      	ldr	r3, [r0, #0]
 800145a:	07da      	lsls	r2, r3, #31
 800145c:	d411      	bmi.n	8001482 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	079b      	lsls	r3, r3, #30
 8001462:	f100 8085 	bmi.w	8001570 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	071c      	lsls	r4, r3, #28
 800146a:	f100 80f6 	bmi.w	800165a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	0758      	lsls	r0, r3, #29
 8001472:	f100 813f 	bmi.w	80016f4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	69ea      	ldr	r2, [r5, #28]
 8001478:	2a00      	cmp	r2, #0
 800147a:	f040 81d6 	bne.w	800182a <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800147e:	2000      	movs	r0, #0
 8001480:	e7e7      	b.n	8001452 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001482:	4cba      	ldr	r4, [pc, #744]	; (800176c <HAL_RCC_OscConfig+0x324>)
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d007      	beq.n	800149e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148e:	6863      	ldr	r3, [r4, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d116      	bne.n	80014c6 <HAL_RCC_OscConfig+0x7e>
 8001498:	6863      	ldr	r3, [r4, #4]
 800149a:	03df      	lsls	r7, r3, #15
 800149c:	d513      	bpl.n	80014c6 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	6821      	ldr	r1, [r4, #0]
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2201      	movs	r2, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	420b      	tst	r3, r1
 80014bc:	d0cf      	beq.n	800145e <HAL_RCC_OscConfig+0x16>
 80014be:	686b      	ldr	r3, [r5, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1cc      	bne.n	800145e <HAL_RCC_OscConfig+0x16>
 80014c4:	e7c4      	b.n	8001450 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	686a      	ldr	r2, [r5, #4]
 80014c8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80014cc:	d125      	bne.n	800151a <HAL_RCC_OscConfig+0xd2>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014d8:	68a9      	ldr	r1, [r5, #8]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	430b      	orrs	r3, r1
 80014e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	b352      	cbz	r2, 800153a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 80014e4:	f7fe ff0e 	bl	8000304 <HAL_GetTick>
 80014e8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80014ec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	2701      	movs	r7, #1
 80014f0:	fa96 f3a6 	rbit	r3, r6
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	fa96 f3a6 	rbit	r3, r6
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	fa07 f303 	lsl.w	r3, r7, r3
 8001506:	4213      	tst	r3, r2
 8001508:	d1a9      	bne.n	800145e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7fe fefb 	bl	8000304 <HAL_GetTick>
 800150e:	eba0 0008 	sub.w	r0, r0, r8
 8001512:	2864      	cmp	r0, #100	; 0x64
 8001514:	d9ec      	bls.n	80014f0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e79b      	b.n	8001452 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	b932      	cbnz	r2, 800152c <HAL_RCC_OscConfig+0xe4>
 800151e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001522:	6023      	str	r3, [r4, #0]
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	e7d3      	b.n	80014d4 <HAL_RCC_OscConfig+0x8c>
 800152c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001530:	d1f5      	bne.n	800151e <HAL_RCC_OscConfig+0xd6>
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	e7c9      	b.n	80014ce <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800153a:	f7fe fee3 	bl	8000304 <HAL_GetTick>
 800153e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001542:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001544:	2701      	movs	r7, #1
 8001546:	fa96 f3a6 	rbit	r3, r6
 800154a:	6822      	ldr	r2, [r4, #0]
 800154c:	fa96 f3a6 	rbit	r3, r6
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa07 f303 	lsl.w	r3, r7, r3
 800155c:	4213      	tst	r3, r2
 800155e:	f43f af7e 	beq.w	800145e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7fe fecf 	bl	8000304 <HAL_GetTick>
 8001566:	eba0 0008 	sub.w	r0, r0, r8
 800156a:	2864      	cmp	r0, #100	; 0x64
 800156c:	d9eb      	bls.n	8001546 <HAL_RCC_OscConfig+0xfe>
 800156e:	e7d2      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001570:	4c7e      	ldr	r4, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x324>)
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	f013 0f0c 	tst.w	r3, #12
 8001578:	d007      	beq.n	800158a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d122      	bne.n	80015ca <HAL_RCC_OscConfig+0x182>
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	03de      	lsls	r6, r3, #15
 8001588:	d41f      	bmi.n	80015ca <HAL_RCC_OscConfig+0x182>
 800158a:	2302      	movs	r3, #2
 800158c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2201      	movs	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	420b      	tst	r3, r1
 80015a6:	d003      	beq.n	80015b0 <HAL_RCC_OscConfig+0x168>
 80015a8:	692b      	ldr	r3, [r5, #16]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f47f af50 	bne.w	8001450 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	23f8      	movs	r3, #248	; 0xf8
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	fab3 f283 	clz	r2, r3
 80015bc:	696b      	ldr	r3, [r5, #20]
 80015be:	4093      	lsls	r3, r2
 80015c0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	6023      	str	r3, [r4, #0]
 80015c8:	e74d      	b.n	8001466 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	692a      	ldr	r2, [r5, #16]
 80015cc:	2601      	movs	r6, #1
 80015ce:	b30a      	cbz	r2, 8001614 <HAL_RCC_OscConfig+0x1cc>
 80015d0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	2702      	movs	r7, #2
 80015e4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80015e6:	f7fe fe8d 	bl	8000304 <HAL_GetTick>
 80015ea:	4680      	mov	r8, r0
 80015ec:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	fa97 f3a7 	rbit	r3, r7
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	fa06 f303 	lsl.w	r3, r6, r3
 8001602:	4213      	tst	r3, r2
 8001604:	d1d4      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7fe fe7d 	bl	8000304 <HAL_GetTick>
 800160a:	eba0 0008 	sub.w	r0, r0, r8
 800160e:	2802      	cmp	r0, #2
 8001610:	d9ec      	bls.n	80015ec <HAL_RCC_OscConfig+0x1a4>
 8001612:	e780      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 8001614:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	2702      	movs	r7, #2
 8001628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800162a:	f7fe fe6b 	bl	8000304 <HAL_GetTick>
 800162e:	4680      	mov	r8, r0
 8001630:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	fa97 f3a7 	rbit	r3, r7
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	fa06 f303 	lsl.w	r3, r6, r3
 8001646:	4213      	tst	r3, r2
 8001648:	f43f af0d 	beq.w	8001466 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7fe fe5a 	bl	8000304 <HAL_GetTick>
 8001650:	eba0 0008 	sub.w	r0, r0, r8
 8001654:	2802      	cmp	r0, #2
 8001656:	d9eb      	bls.n	8001630 <HAL_RCC_OscConfig+0x1e8>
 8001658:	e75d      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	69aa      	ldr	r2, [r5, #24]
 800165c:	4e43      	ldr	r6, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x324>)
 800165e:	4944      	ldr	r1, [pc, #272]	; (8001770 <HAL_RCC_OscConfig+0x328>)
 8001660:	2401      	movs	r4, #1
 8001662:	b31a      	cbz	r2, 80016ac <HAL_RCC_OscConfig+0x264>
 8001664:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	440b      	add	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	2702      	movs	r7, #2
 8001672:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001674:	f7fe fe46 	bl	8000304 <HAL_GetTick>
 8001678:	4680      	mov	r8, r0
 800167a:	fa97 f3a7 	rbit	r3, r7
 800167e:	fa97 f3a7 	rbit	r3, r7
 8001682:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001688:	fa97 f3a7 	rbit	r3, r7
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa04 f303 	lsl.w	r3, r4, r3
 8001698:	4213      	tst	r3, r2
 800169a:	f47f aee8 	bne.w	800146e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7fe fe31 	bl	8000304 <HAL_GetTick>
 80016a2:	eba0 0008 	sub.w	r0, r0, r8
 80016a6:	2802      	cmp	r0, #2
 80016a8:	d9e7      	bls.n	800167a <HAL_RCC_OscConfig+0x232>
 80016aa:	e734      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 80016ac:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	440b      	add	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	2702      	movs	r7, #2
 80016ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016bc:	f7fe fe22 	bl	8000304 <HAL_GetTick>
 80016c0:	4680      	mov	r8, r0
 80016c2:	fa97 f3a7 	rbit	r3, r7
 80016c6:	fa97 f3a7 	rbit	r3, r7
 80016ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ce:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80016d0:	fa97 f3a7 	rbit	r3, r7
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa04 f303 	lsl.w	r3, r4, r3
 80016e0:	4213      	tst	r3, r2
 80016e2:	f43f aec4 	beq.w	800146e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7fe fe0d 	bl	8000304 <HAL_GetTick>
 80016ea:	eba0 0008 	sub.w	r0, r0, r8
 80016ee:	2802      	cmp	r0, #2
 80016f0:	d9e7      	bls.n	80016c2 <HAL_RCC_OscConfig+0x27a>
 80016f2:	e710      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f4:	4c1d      	ldr	r4, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x324>)
 80016f6:	69e3      	ldr	r3, [r4, #28]
 80016f8:	00d9      	lsls	r1, r3, #3
 80016fa:	d434      	bmi.n	8001766 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	69e3      	ldr	r3, [r4, #28]
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	61e3      	str	r3, [r4, #28]
 8001704:	69e3      	ldr	r3, [r4, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800170e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4f18      	ldr	r7, [pc, #96]	; (8001774 <HAL_RCC_OscConfig+0x32c>)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	05da      	lsls	r2, r3, #23
 8001716:	d52f      	bpl.n	8001778 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	68eb      	ldr	r3, [r5, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d13d      	bne.n	800179a <HAL_RCC_OscConfig+0x352>
 800171e:	6a23      	ldr	r3, [r4, #32]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001726:	f7fe fded 	bl	8000304 <HAL_GetTick>
 800172a:	2702      	movs	r7, #2
 800172c:	4682      	mov	sl, r0
 800172e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	f04f 0801 	mov.w	r8, #1
 8001734:	fa97 f3a7 	rbit	r3, r7
 8001738:	fa97 f3a7 	rbit	r3, r7
 800173c:	2b00      	cmp	r3, #0
 800173e:	d06c      	beq.n	800181a <HAL_RCC_OscConfig+0x3d2>
 8001740:	6a22      	ldr	r2, [r4, #32]
 8001742:	fa99 f3a9 	rbit	r3, r9
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa08 f303 	lsl.w	r3, r8, r3
 8001752:	4213      	tst	r3, r2
 8001754:	d058      	beq.n	8001808 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8001756:	2e00      	cmp	r6, #0
 8001758:	f43f ae8d 	beq.w	8001476 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	69e3      	ldr	r3, [r4, #28]
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	61e3      	str	r3, [r4, #28]
 8001764:	e687      	b.n	8001476 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2600      	movs	r6, #0
 8001768:	e7d2      	b.n	8001710 <HAL_RCC_OscConfig+0x2c8>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	10908120 	.word	0x10908120
 8001774:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001780:	f7fe fdc0 	bl	8000304 <HAL_GetTick>
 8001784:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	d4c5      	bmi.n	8001718 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7fe fdba 	bl	8000304 <HAL_GetTick>
 8001790:	eba0 0008 	sub.w	r0, r0, r8
 8001794:	2864      	cmp	r0, #100	; 0x64
 8001796:	d9f6      	bls.n	8001786 <HAL_RCC_OscConfig+0x33e>
 8001798:	e6bd      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	bb3b      	cbnz	r3, 80017ec <HAL_RCC_OscConfig+0x3a4>
 800179c:	6a23      	ldr	r3, [r4, #32]
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6223      	str	r3, [r4, #32]
 80017a4:	6a23      	ldr	r3, [r4, #32]
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017ac:	f7fe fdaa 	bl	8000304 <HAL_GetTick>
 80017b0:	2702      	movs	r7, #2
 80017b2:	4682      	mov	sl, r0
 80017b4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	f04f 0801 	mov.w	r8, #1
 80017ba:	fa97 f3a7 	rbit	r3, r7
 80017be:	fa97 f3a7 	rbit	r3, r7
 80017c2:	b373      	cbz	r3, 8001822 <HAL_RCC_OscConfig+0x3da>
 80017c4:	6a22      	ldr	r2, [r4, #32]
 80017c6:	fa99 f3a9 	rbit	r3, r9
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	fa08 f303 	lsl.w	r3, r8, r3
 80017d6:	4213      	tst	r3, r2
 80017d8:	d0bd      	beq.n	8001756 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe fd93 	bl	8000304 <HAL_GetTick>
 80017de:	f241 3388 	movw	r3, #5000	; 0x1388
 80017e2:	eba0 000a 	sub.w	r0, r0, sl
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d9e7      	bls.n	80017ba <HAL_RCC_OscConfig+0x372>
 80017ea:	e694      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	6a23      	ldr	r3, [r4, #32]
 80017f0:	d103      	bne.n	80017fa <HAL_RCC_OscConfig+0x3b2>
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6223      	str	r3, [r4, #32]
 80017f8:	e791      	b.n	800171e <HAL_RCC_OscConfig+0x2d6>
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6223      	str	r3, [r4, #32]
 8001800:	6a23      	ldr	r3, [r4, #32]
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	e78d      	b.n	8001724 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7fe fd7c 	bl	8000304 <HAL_GetTick>
 800180c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001810:	eba0 000a 	sub.w	r0, r0, sl
 8001814:	4298      	cmp	r0, r3
 8001816:	d98d      	bls.n	8001734 <HAL_RCC_OscConfig+0x2ec>
 8001818:	e67d      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 800181a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001820:	e78f      	b.n	8001742 <HAL_RCC_OscConfig+0x2fa>
 8001822:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001828:	e7cd      	b.n	80017c6 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	4c41      	ldr	r4, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x4e8>)
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	f43f ae0c 	beq.w	8001450 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	2a02      	cmp	r2, #2
 800183a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800183e:	d152      	bne.n	80018e6 <HAL_RCC_OscConfig+0x49e>
 8001840:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800184c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001856:	f7fe fd55 	bl	8000304 <HAL_GetTick>
 800185a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800185e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	2601      	movs	r6, #1
 8001862:	fa97 f3a7 	rbit	r3, r7
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	fa97 f3a7 	rbit	r3, r7
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa06 f303 	lsl.w	r3, r6, r3
 8001878:	4213      	tst	r3, r2
 800187a:	d12d      	bne.n	80018d8 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	6862      	ldr	r2, [r4, #4]
 800187e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001880:	6a29      	ldr	r1, [r5, #32]
 8001882:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001886:	430b      	orrs	r3, r1
 8001888:	4313      	orrs	r3, r2
 800188a:	6063      	str	r3, [r4, #4]
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80018a6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80018a8:	f7fe fd2c 	bl	8000304 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80018ae:	4607      	mov	r7, r0
 80018b0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	fa95 f3a5 	rbit	r3, r5
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	fa06 f303 	lsl.w	r3, r6, r3
 80018c6:	4213      	tst	r3, r2
 80018c8:	f47f add9 	bne.w	800147e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe fd1a 	bl	8000304 <HAL_GetTick>
 80018d0:	1bc0      	subs	r0, r0, r7
 80018d2:	2802      	cmp	r0, #2
 80018d4:	d9ec      	bls.n	80018b0 <HAL_RCC_OscConfig+0x468>
 80018d6:	e61e      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe fd14 	bl	8000304 <HAL_GetTick>
 80018dc:	eba0 0008 	sub.w	r0, r0, r8
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9be      	bls.n	8001862 <HAL_RCC_OscConfig+0x41a>
 80018e4:	e617      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 80018e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018fc:	f7fe fd02 	bl	8000304 <HAL_GetTick>
 8001900:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001904:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	2601      	movs	r6, #1
 8001908:	fa95 f3a5 	rbit	r3, r5
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	fa95 f3a5 	rbit	r3, r5
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	fa06 f303 	lsl.w	r3, r6, r3
 800191e:	4213      	tst	r3, r2
 8001920:	f43f adad 	beq.w	800147e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7fe fcee 	bl	8000304 <HAL_GetTick>
 8001928:	1bc0      	subs	r0, r0, r7
 800192a:	2802      	cmp	r0, #2
 800192c:	d9ec      	bls.n	8001908 <HAL_RCC_OscConfig+0x4c0>
 800192e:	e5f2      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001936:	4c13      	ldr	r4, [pc, #76]	; (8001984 <HAL_RCC_GetSysClockFreq+0x50>)
 8001938:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193a:	f001 030c 	and.w	r3, r1, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11e      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x4c>
 8001942:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001946:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800194a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_RCC_GetSysClockFreq+0x54>)
 8001958:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800195a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800195c:	220f      	movs	r2, #15
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	40d3      	lsrs	r3, r2
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_RCC_GetSysClockFreq+0x58>)
 800196e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001970:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001972:	bf4a      	itet	mi
 8001974:	4b06      	ldrmi	r3, [pc, #24]	; (8001990 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001976:	4b07      	ldrpl	r3, [pc, #28]	; (8001994 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001978:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800197c:	4358      	muls	r0, r3
 800197e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001982:	bd10      	pop	{r4, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	08003fde 	.word	0x08003fde
 800198c:	08003fee 	.word	0x08003fee
 8001990:	007a1200 	.word	0x007a1200
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_ClockConfig>:
{
 8001998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	b910      	cbnz	r0, 80019a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_RCC_ClockConfig+0x144>)
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	428b      	cmp	r3, r1
 80019b2:	d32e      	bcc.n	8001a12 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	0791      	lsls	r1, r2, #30
 80019b8:	d436      	bmi.n	8001a28 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	07d2      	lsls	r2, r2, #31
 80019bc:	d43c      	bmi.n	8001a38 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019be:	4a47      	ldr	r2, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x144>)
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	429d      	cmp	r5, r3
 80019c8:	d375      	bcc.n	8001ab6 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	4d44      	ldr	r5, [pc, #272]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 80019ce:	f012 0f04 	tst.w	r2, #4
 80019d2:	d17c      	bne.n	8001ace <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	0713      	lsls	r3, r2, #28
 80019d6:	d506      	bpl.n	80019e6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d8:	686b      	ldr	r3, [r5, #4]
 80019da:	6922      	ldr	r2, [r4, #16]
 80019dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019e4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019e6:	f7ff ffa5 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80019ea:	686b      	ldr	r3, [r5, #4]
 80019ec:	22f0      	movs	r2, #240	; 0xf0
 80019ee:	fa92 f2a2 	rbit	r2, r2
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fa:	40d3      	lsrs	r3, r2
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x14c>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d8      	lsrs	r0, r3
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_ClockConfig+0x150>)
 8001a04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7fe fc3a 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	f023 0307 	bic.w	r3, r3, #7
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d1bd      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xa>
 8001a26:	e7c5      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	492d      	ldr	r1, [pc, #180]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 8001a2a:	68a0      	ldr	r0, [r4, #8]
 8001a2c:	684b      	ldr	r3, [r1, #4]
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a32:	4303      	orrs	r3, r0
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e7c0      	b.n	80019ba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	6862      	ldr	r2, [r4, #4]
 8001a3a:	4e29      	ldr	r6, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 8001a3c:	2a01      	cmp	r2, #1
 8001a3e:	d127      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
 8001a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a44:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a48:	6831      	ldr	r1, [r6, #0]
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	d0a1      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	6873      	ldr	r3, [r6, #4]
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001a68:	f7fe fc4c 	bl	8000304 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	6873      	ldr	r3, [r6, #4]
 8001a74:	6862      	ldr	r2, [r4, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a7e:	d09e      	beq.n	80019be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7fe fc40 	bl	8000304 <HAL_GetTick>
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	4540      	cmp	r0, r8
 8001a88:	d9f3      	bls.n	8001a72 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
}
 8001a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	2a02      	cmp	r2, #2
 8001a92:	bf0c      	ite	eq
 8001a94:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a98:	2302      	movne	r3, #2
 8001a9a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	6830      	ldr	r0, [r6, #0]
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	4203      	tst	r3, r0
 8001ab4:	e7d2      	b.n	8001a5c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
 8001abc:	432b      	orrs	r3, r5
 8001abe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	f47f af6b 	bne.w	80019a2 <HAL_RCC_ClockConfig+0xa>
 8001acc:	e77d      	b.n	80019ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	686b      	ldr	r3, [r5, #4]
 8001ad0:	68e1      	ldr	r1, [r4, #12]
 8001ad2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	606b      	str	r3, [r5, #4]
 8001ada:	e77b      	b.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08004002 	.word	0x08004002
 8001ae8:	20000118 	.word	0x20000118

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	fa92 f2a2 	rbit	r2, r2
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b00:	40d3      	lsrs	r3, r2
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b08:	6810      	ldr	r0, [r2, #0]
}    
 8001b0a:	40d8      	lsrs	r0, r3
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08004012 	.word	0x08004012
 8001b18:	20000118 	.word	0x20000118

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b30:	40d3      	lsrs	r3, r2
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001b38:	6810      	ldr	r0, [r2, #0]
} 
 8001b3a:	40d8      	lsrs	r0, r3
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08004012 	.word	0x08004012
 8001b48:	20000118 	.word	0x20000118

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b4c:	6803      	ldr	r3, [r0, #0]
{
 8001b4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b52:	03dd      	lsls	r5, r3, #15
{
 8001b54:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b56:	d523      	bpl.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b58:	4d7c      	ldr	r5, [pc, #496]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b5a:	69eb      	ldr	r3, [r5, #28]
 8001b5c:	00d8      	lsls	r0, r3, #3
 8001b5e:	f100 8098 	bmi.w	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	69eb      	ldr	r3, [r5, #28]
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61eb      	str	r3, [r5, #28]
 8001b6a:	69eb      	ldr	r3, [r5, #28]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b74:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4f76      	ldr	r7, [pc, #472]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	05d9      	lsls	r1, r3, #23
 8001b7c:	f140 808b 	bpl.w	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b80:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b86:	f040 809b 	bne.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b8a:	6a2b      	ldr	r3, [r5, #32]
 8001b8c:	6862      	ldr	r2, [r4, #4]
 8001b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b92:	4313      	orrs	r3, r2
 8001b94:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b96:	b11e      	cbz	r6, 8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	69eb      	ldr	r3, [r5, #28]
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	07c7      	lsls	r7, r0, #31
 8001ba4:	d506      	bpl.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ba8:	68a1      	ldr	r1, [r4, #8]
 8001baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb4:	0786      	lsls	r6, r0, #30
 8001bb6:	d506      	bpl.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bb8:	4a64      	ldr	r2, [pc, #400]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bba:	68e1      	ldr	r1, [r4, #12]
 8001bbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bc6:	0745      	lsls	r5, r0, #29
 8001bc8:	d506      	bpl.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bcc:	6921      	ldr	r1, [r4, #16]
 8001bce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bd0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bd8:	0681      	lsls	r1, r0, #26
 8001bda:	d506      	bpl.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bdc:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bde:	69e1      	ldr	r1, [r4, #28]
 8001be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001be2:	f023 0310 	bic.w	r3, r3, #16
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bea:	0382      	lsls	r2, r0, #14
 8001bec:	d506      	bpl.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001bee:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bf0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bf2:	6853      	ldr	r3, [r2, #4]
 8001bf4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bfc:	0643      	lsls	r3, r0, #25
 8001bfe:	d506      	bpl.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c02:	6a21      	ldr	r1, [r4, #32]
 8001c04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c06:	f023 0320 	bic.w	r3, r3, #32
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c0e:	0707      	lsls	r7, r0, #28
 8001c10:	d506      	bpl.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c12:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c14:	6961      	ldr	r1, [r4, #20]
 8001c16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c20:	06c6      	lsls	r6, r0, #27
 8001c22:	d506      	bpl.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c26:	69a1      	ldr	r1, [r4, #24]
 8001c28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001c32:	0585      	lsls	r5, r0, #22
 8001c34:	d506      	bpl.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c36:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c3a:	6853      	ldr	r3, [r2, #4]
 8001c3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c44:	0601      	lsls	r1, r0, #24
 8001c46:	d506      	bpl.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c4e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001c52:	430b      	orrs	r3, r1
 8001c54:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001c56:	05c2      	lsls	r2, r0, #23
 8001c58:	d506      	bpl.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c60:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001c64:	430b      	orrs	r3, r1
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c68:	04c3      	lsls	r3, r0, #19
 8001c6a:	d506      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c76:	430b      	orrs	r3, r1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001c7a:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001c7e:	d01c      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e013      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2600      	movs	r6, #0
 8001c94:	e76f      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fb31 	bl	8000304 <HAL_GetTick>
 8001ca2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	05da      	lsls	r2, r3, #23
 8001ca8:	f53f af6a 	bmi.w	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7fe fb2a 	bl	8000304 <HAL_GetTick>
 8001cb0:	eba0 0008 	sub.w	r0, r0, r8
 8001cb4:	2864      	cmp	r0, #100	; 0x64
 8001cb6:	d9f5      	bls.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8001cb8:	2003      	movs	r0, #3
}
 8001cba:	b002      	add	sp, #8
 8001cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc0:	6862      	ldr	r2, [r4, #4]
 8001cc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f43f af5f 	beq.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ccc:	6a29      	ldr	r1, [r5, #32]
 8001cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001cd6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cda:	f8df e078 	ldr.w	lr, [pc, #120]	; 8001d54 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	4472      	add	r2, lr
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	2701      	movs	r7, #1
 8001ce8:	6017      	str	r7, [r2, #0]
 8001cea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	4473      	add	r3, lr
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfa:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001cfc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfe:	f57f af44 	bpl.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001d02:	f7fe faff 	bl	8000304 <HAL_GetTick>
 8001d06:	f04f 0802 	mov.w	r8, #2
 8001d0a:	4682      	mov	sl, r0
 8001d0c:	46c1      	mov	r9, r8
 8001d0e:	fa98 f3a8 	rbit	r3, r8
 8001d12:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	b1a3      	cbz	r3, 8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001d18:	6a2a      	ldr	r2, [r5, #32]
 8001d1a:	fa99 f3a9 	rbit	r3, r9
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa07 f303 	lsl.w	r3, r7, r3
 8001d2a:	4213      	tst	r3, r2
 8001d2c:	f47f af2d 	bne.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fae8 	bl	8000304 <HAL_GetTick>
 8001d34:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d38:	eba0 000a 	sub.w	r0, r0, sl
 8001d3c:	4298      	cmp	r0, r3
 8001d3e:	d9e6      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8001d40:	e7ba      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d48:	e7e7      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	10908100 	.word	0x10908100

08001d58 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001d70:	4770      	bx	lr

08001d72 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d72:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d135      	bne.n	8001de6 <HAL_UART_Receive_IT+0x74>
    if((pData == NULL ) || (Size == 0U))
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d031      	beq.n	8001de2 <HAL_UART_Receive_IT+0x70>
 8001d7e:	b382      	cbz	r2, 8001de2 <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8001d80:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d02e      	beq.n	8001de6 <HAL_UART_Receive_IT+0x74>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8001d8e:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8001d90:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8001d96:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001d9a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001d9e:	d119      	bne.n	8001dd4 <HAL_UART_Receive_IT+0x62>
 8001da0:	6903      	ldr	r3, [r0, #16]
 8001da2:	b9ab      	cbnz	r3, 8001dd0 <HAL_UART_Receive_IT+0x5e>
 8001da4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001da8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dac:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dae:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001db2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db6:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8001db8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dbc:	6891      	ldr	r1, [r2, #8]
 8001dbe:	f041 0101 	orr.w	r1, r1, #1
 8001dc2:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001dca:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001dd0:	23ff      	movs	r3, #255	; 0xff
 8001dd2:	e7e9      	b.n	8001da8 <HAL_UART_Receive_IT+0x36>
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e9      	bne.n	8001dac <HAL_UART_Receive_IT+0x3a>
 8001dd8:	6903      	ldr	r3, [r0, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f8      	beq.n	8001dd0 <HAL_UART_Receive_IT+0x5e>
 8001dde:	237f      	movs	r3, #127	; 0x7f
 8001de0:	e7e2      	b.n	8001da8 <HAL_UART_Receive_IT+0x36>
      return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
 8001de4:	4770      	bx	lr
    return HAL_BUSY;
 8001de6:	2002      	movs	r0, #2
}
 8001de8:	4770      	bx	lr

08001dea <HAL_UART_TxCpltCallback>:
 8001dea:	4770      	bx	lr

08001dec <HAL_UART_RxCpltCallback>:
 8001dec:	4770      	bx	lr

08001dee <HAL_UART_ErrorCallback>:
 8001dee:	4770      	bx	lr

08001df0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001df0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001df2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001dfa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001dfe:	f7ff fff6 	bl	8001dee <HAL_UART_ErrorCallback>
 8001e02:	bd08      	pop	{r3, pc}

08001e04 <UART_SetConfig>:
{
 8001e04:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e06:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e08:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e0a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e0c:	6829      	ldr	r1, [r5, #0]
{
 8001e0e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e10:	6900      	ldr	r0, [r0, #16]
 8001e12:	4302      	orrs	r2, r0
 8001e14:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e16:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e1a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e1c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e20:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e22:	430a      	orrs	r2, r1
 8001e24:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e26:	686a      	ldr	r2, [r5, #4]
 8001e28:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e2a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e30:	430a      	orrs	r2, r1
 8001e32:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e34:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e36:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e38:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001e3c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e42:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <UART_SetConfig+0x1f8>)
 8001e44:	4295      	cmp	r5, r2
 8001e46:	d112      	bne.n	8001e6e <UART_SetConfig+0x6a>
 8001e48:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001e4c:	496c      	ldr	r1, [pc, #432]	; (8002000 <UART_SetConfig+0x1fc>)
 8001e4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e50:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e58:	5c8a      	ldrb	r2, [r1, r2]
 8001e5a:	d066      	beq.n	8001f2a <UART_SetConfig+0x126>
    switch (clocksource)
 8001e5c:	2a08      	cmp	r2, #8
 8001e5e:	d819      	bhi.n	8001e94 <UART_SetConfig+0x90>
 8001e60:	e8df f002 	tbb	[pc, r2]
 8001e64:	189e92c2 	.word	0x189e92c2
 8001e68:	181818a9 	.word	0x181818a9
 8001e6c:	ac          	.byte	0xac
 8001e6d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e6e:	4a65      	ldr	r2, [pc, #404]	; (8002004 <UART_SetConfig+0x200>)
 8001e70:	4295      	cmp	r5, r2
 8001e72:	d124      	bne.n	8001ebe <UART_SetConfig+0xba>
 8001e74:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001e7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001e82:	f000 80a0 	beq.w	8001fc6 <UART_SetConfig+0x1c2>
 8001e86:	d807      	bhi.n	8001e98 <UART_SetConfig+0x94>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	f000 80aa 	beq.w	8001fe2 <UART_SetConfig+0x1de>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e92:	d076      	beq.n	8001f82 <UART_SetConfig+0x17e>
        ret = HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
  return ret;
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e98:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001e9c:	f000 8099 	beq.w	8001fd2 <UART_SetConfig+0x1ce>
 8001ea0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001ea4:	d1f3      	bne.n	8001e8e <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eaa:	d179      	bne.n	8001fa0 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001eac:	6860      	ldr	r0, [r4, #4]
 8001eae:	0843      	lsrs	r3, r0, #1
 8001eb0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001eb4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eb8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ebc:	e054      	b.n	8001f68 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ebe:	4a52      	ldr	r2, [pc, #328]	; (8002008 <UART_SetConfig+0x204>)
 8001ec0:	4295      	cmp	r5, r2
 8001ec2:	d10e      	bne.n	8001ee2 <UART_SetConfig+0xde>
 8001ec4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eca:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001ece:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001ed2:	d078      	beq.n	8001fc6 <UART_SetConfig+0x1c2>
 8001ed4:	d9d8      	bls.n	8001e88 <UART_SetConfig+0x84>
 8001ed6:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001eda:	d07a      	beq.n	8001fd2 <UART_SetConfig+0x1ce>
 8001edc:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001ee0:	e7e0      	b.n	8001ea4 <UART_SetConfig+0xa0>
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <UART_SetConfig+0x208>)
 8001ee4:	4295      	cmp	r5, r2
 8001ee6:	d10e      	bne.n	8001f06 <UART_SetConfig+0x102>
 8001ee8:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001eec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eee:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8001ef2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001ef6:	d066      	beq.n	8001fc6 <UART_SetConfig+0x1c2>
 8001ef8:	d9c6      	bls.n	8001e88 <UART_SetConfig+0x84>
 8001efa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001efe:	d068      	beq.n	8001fd2 <UART_SetConfig+0x1ce>
 8001f00:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001f04:	e7ce      	b.n	8001ea4 <UART_SetConfig+0xa0>
 8001f06:	4a42      	ldr	r2, [pc, #264]	; (8002010 <UART_SetConfig+0x20c>)
 8001f08:	4295      	cmp	r5, r2
 8001f0a:	d1c0      	bne.n	8001e8e <UART_SetConfig+0x8a>
 8001f0c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001f10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f12:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001f16:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001f1a:	d054      	beq.n	8001fc6 <UART_SetConfig+0x1c2>
 8001f1c:	d9b4      	bls.n	8001e88 <UART_SetConfig+0x84>
 8001f1e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001f22:	d056      	beq.n	8001fd2 <UART_SetConfig+0x1ce>
 8001f24:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001f28:	e7bc      	b.n	8001ea4 <UART_SetConfig+0xa0>
    switch (clocksource)
 8001f2a:	2a08      	cmp	r2, #8
 8001f2c:	d829      	bhi.n	8001f82 <UART_SetConfig+0x17e>
 8001f2e:	a301      	add	r3, pc, #4	; (adr r3, 8001f34 <UART_SetConfig+0x130>)
 8001f30:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001f34:	08001f59 	.word	0x08001f59
 8001f38:	08001f7d 	.word	0x08001f7d
 8001f3c:	08001ead 	.word	0x08001ead
 8001f40:	08001f83 	.word	0x08001f83
 8001f44:	08001fcd 	.word	0x08001fcd
 8001f48:	08001f83 	.word	0x08001f83
 8001f4c:	08001f83 	.word	0x08001f83
 8001f50:	08001f83 	.word	0x08001f83
 8001f54:	08001fd9 	.word	0x08001fd9
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f58:	f7ff fdc8 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f5c:	6861      	ldr	r1, [r4, #4]
 8001f5e:	084a      	lsrs	r2, r1, #1
 8001f60:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001f64:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f68:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f6a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001f6c:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001f70:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f72:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f7c:	f7ff fdce 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8001f80:	e7ec      	b.n	8001f5c <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e7f1      	b.n	8001f6c <UART_SetConfig+0x168>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f88:	f7ff fdc8 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8001f8c:	6863      	ldr	r3, [r4, #4]
 8001f8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <UART_SetConfig+0x1f8>)
 8001f98:	b280      	uxth	r0, r0
 8001f9a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f9c:	2000      	movs	r0, #0
        break;
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fa0:	6862      	ldr	r2, [r4, #4]
 8001fa2:	0853      	lsrs	r3, r2, #1
 8001fa4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001fa8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	60eb      	str	r3, [r5, #12]
 8001fb4:	e7f2      	b.n	8001f9c <UART_SetConfig+0x198>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fb6:	f7ff fcbd 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8001fba:	e017      	b.n	8001fec <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fbc:	6862      	ldr	r2, [r4, #4]
 8001fbe:	0853      	lsrs	r3, r2, #1
 8001fc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fc4:	e7f2      	b.n	8001fac <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fca:	d1f4      	bne.n	8001fb6 <UART_SetConfig+0x1b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fcc:	f7ff fcb2 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8001fd0:	e7c4      	b.n	8001f5c <UART_SetConfig+0x158>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd6:	d1f1      	bne.n	8001fbc <UART_SetConfig+0x1b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fd8:	6860      	ldr	r0, [r4, #4]
 8001fda:	0843      	lsrs	r3, r0, #1
 8001fdc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001fe0:	e76a      	b.n	8001eb8 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe6:	d0b7      	beq.n	8001f58 <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fe8:	f7ff fd80 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ff2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ff6:	b280      	uxth	r0, r0
 8001ff8:	60e8      	str	r0, [r5, #12]
 8001ffa:	e7cf      	b.n	8001f9c <UART_SetConfig+0x198>
 8001ffc:	40013800 	.word	0x40013800
 8002000:	08003ffe 	.word	0x08003ffe
 8002004:	40004400 	.word	0x40004400
 8002008:	40004800 	.word	0x40004800
 800200c:	40004c00 	.word	0x40004c00
 8002010:	40005000 	.word	0x40005000

08002014 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002016:	07da      	lsls	r2, r3, #31
{
 8002018:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800201a:	d506      	bpl.n	800202a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800201c:	6801      	ldr	r1, [r0, #0]
 800201e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002020:	684a      	ldr	r2, [r1, #4]
 8002022:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002026:	4322      	orrs	r2, r4
 8002028:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800202a:	079c      	lsls	r4, r3, #30
 800202c:	d506      	bpl.n	800203c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800202e:	6801      	ldr	r1, [r0, #0]
 8002030:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002032:	684a      	ldr	r2, [r1, #4]
 8002034:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002038:	4322      	orrs	r2, r4
 800203a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800203c:	0759      	lsls	r1, r3, #29
 800203e:	d506      	bpl.n	800204e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002040:	6801      	ldr	r1, [r0, #0]
 8002042:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002044:	684a      	ldr	r2, [r1, #4]
 8002046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800204a:	4322      	orrs	r2, r4
 800204c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800204e:	071a      	lsls	r2, r3, #28
 8002050:	d506      	bpl.n	8002060 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002052:	6801      	ldr	r1, [r0, #0]
 8002054:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002056:	684a      	ldr	r2, [r1, #4]
 8002058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205c:	4322      	orrs	r2, r4
 800205e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002060:	06dc      	lsls	r4, r3, #27
 8002062:	d506      	bpl.n	8002072 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002064:	6801      	ldr	r1, [r0, #0]
 8002066:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002068:	688a      	ldr	r2, [r1, #8]
 800206a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800206e:	4322      	orrs	r2, r4
 8002070:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002072:	0699      	lsls	r1, r3, #26
 8002074:	d506      	bpl.n	8002084 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002076:	6801      	ldr	r1, [r0, #0]
 8002078:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800207a:	688a      	ldr	r2, [r1, #8]
 800207c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002080:	4322      	orrs	r2, r4
 8002082:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002084:	065a      	lsls	r2, r3, #25
 8002086:	d50f      	bpl.n	80020a8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002088:	6801      	ldr	r1, [r0, #0]
 800208a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800208c:	684a      	ldr	r2, [r1, #4]
 800208e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002092:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002094:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002098:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800209a:	d105      	bne.n	80020a8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800209c:	684a      	ldr	r2, [r1, #4]
 800209e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020a4:	4322      	orrs	r2, r4
 80020a6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	d506      	bpl.n	80020ba <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020ac:	6802      	ldr	r2, [r0, #0]
 80020ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020b0:	6853      	ldr	r3, [r2, #4]
 80020b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020b6:	430b      	orrs	r3, r1
 80020b8:	6053      	str	r3, [r2, #4]
 80020ba:	bd10      	pop	{r4, pc}

080020bc <UART_WaitOnFlagUntilTimeout>:
{
 80020bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c0:	9d06      	ldr	r5, [sp, #24]
 80020c2:	4604      	mov	r4, r0
 80020c4:	460f      	mov	r7, r1
 80020c6:	4616      	mov	r6, r2
 80020c8:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	69ca      	ldr	r2, [r1, #28]
 80020ce:	ea37 0302 	bics.w	r3, r7, r2
 80020d2:	bf0c      	ite	eq
 80020d4:	2201      	moveq	r2, #1
 80020d6:	2200      	movne	r2, #0
 80020d8:	42b2      	cmp	r2, r6
 80020da:	d002      	beq.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80020e2:	1c6b      	adds	r3, r5, #1
 80020e4:	d0f2      	beq.n	80020cc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020e6:	b99d      	cbnz	r5, 8002110 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80020fa:	2320      	movs	r3, #32
 80020fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002100:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002104:	2300      	movs	r3, #0
 8002106:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800210a:	2003      	movs	r0, #3
 800210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002110:	f7fe f8f8 	bl	8000304 <HAL_GetTick>
 8002114:	eba0 0008 	sub.w	r0, r0, r8
 8002118:	4285      	cmp	r5, r0
 800211a:	d2d6      	bcs.n	80020ca <UART_WaitOnFlagUntilTimeout+0xe>
 800211c:	e7e4      	b.n	80020e8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800211e <HAL_UART_Transmit>:
{
 800211e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002122:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002124:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002128:	2b20      	cmp	r3, #32
{
 800212a:	4604      	mov	r4, r0
 800212c:	460d      	mov	r5, r1
 800212e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002130:	d14c      	bne.n	80021cc <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002132:	2900      	cmp	r1, #0
 8002134:	d048      	beq.n	80021c8 <HAL_UART_Transmit+0xaa>
 8002136:	2a00      	cmp	r2, #0
 8002138:	d046      	beq.n	80021c8 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800213a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800213e:	2b01      	cmp	r3, #1
 8002140:	d044      	beq.n	80021cc <HAL_UART_Transmit+0xae>
 8002142:	2301      	movs	r3, #1
 8002144:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002148:	2300      	movs	r3, #0
 800214a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800214c:	2321      	movs	r3, #33	; 0x21
 800214e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002152:	f7fe f8d7 	bl	8000304 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002156:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800215a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800215c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002160:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002164:	b292      	uxth	r2, r2
 8002166:	b962      	cbnz	r2, 8002182 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002168:	9700      	str	r7, [sp, #0]
 800216a:	4633      	mov	r3, r6
 800216c:	2140      	movs	r1, #64	; 0x40
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff ffa4 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 8002174:	b998      	cbnz	r0, 800219e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002176:	2320      	movs	r3, #32
 8002178:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800217c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002180:	e00e      	b.n	80021a0 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002182:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002190:	2200      	movs	r2, #0
 8002192:	4633      	mov	r3, r6
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	4620      	mov	r0, r4
 8002198:	f7ff ff90 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 800219c:	b118      	cbz	r0, 80021a6 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800219e:	2003      	movs	r0, #3
}
 80021a0:	b002      	add	sp, #8
 80021a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a6:	68a3      	ldr	r3, [r4, #8]
 80021a8:	6822      	ldr	r2, [r4, #0]
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	d107      	bne.n	80021c0 <HAL_UART_Transmit+0xa2>
 80021b0:	6923      	ldr	r3, [r4, #16]
 80021b2:	b92b      	cbnz	r3, 80021c0 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021bc:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80021be:	e7cf      	b.n	8002160 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80021c0:	782b      	ldrb	r3, [r5, #0]
 80021c2:	8513      	strh	r3, [r2, #40]	; 0x28
 80021c4:	3501      	adds	r5, #1
 80021c6:	e7cb      	b.n	8002160 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80021c8:	2001      	movs	r0, #1
 80021ca:	e7e9      	b.n	80021a0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80021cc:	2002      	movs	r0, #2
 80021ce:	e7e7      	b.n	80021a0 <HAL_UART_Transmit+0x82>

080021d0 <UART_CheckIdleState>:
{
 80021d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021d2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d4:	2600      	movs	r6, #0
 80021d6:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80021d8:	f7fe f894 	bl	8000304 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80021e2:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021e4:	d417      	bmi.n	8002216 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	075b      	lsls	r3, r3, #29
 80021ec:	d50a      	bpl.n	8002204 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	462b      	mov	r3, r5
 80021f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ff5d 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 8002202:	b9a0      	cbnz	r0, 800222e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002204:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002206:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002208:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800220c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002214:	e00c      	b.n	8002230 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4632      	mov	r2, r6
 800221e:	4603      	mov	r3, r0
 8002220:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff ff49 	bl	80020bc <UART_WaitOnFlagUntilTimeout>
 800222a:	2800      	cmp	r0, #0
 800222c:	d0db      	beq.n	80021e6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800222e:	2003      	movs	r0, #3
}
 8002230:	b002      	add	sp, #8
 8002232:	bd70      	pop	{r4, r5, r6, pc}

08002234 <HAL_UART_Init>:
{
 8002234:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002236:	4604      	mov	r4, r0
 8002238:	b360      	cbz	r0, 8002294 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800223a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800223e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002242:	b91b      	cbnz	r3, 800224c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002244:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002248:	f000 fe72 	bl	8002f30 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800224c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800224e:	2324      	movs	r3, #36	; 0x24
 8002250:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fdd1 	bl	8001e04 <UART_SetConfig>
 8002262:	2801      	cmp	r0, #1
 8002264:	d016      	beq.n	8002294 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002268:	b113      	cbz	r3, 8002270 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff fed2 	bl	8002014 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002278:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002280:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002288:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002290:	f7ff bf9e 	b.w	80021d0 <UART_CheckIdleState>
}
 8002294:	2001      	movs	r0, #1
 8002296:	bd10      	pop	{r4, pc}

08002298 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002298:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800229c:	2b21      	cmp	r3, #33	; 0x21
 800229e:	d127      	bne.n	80022f0 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 80022a0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80022a4:	6802      	ldr	r2, [r0, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	b94b      	cbnz	r3, 80022be <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022aa:	6811      	ldr	r1, [r2, #0]
 80022ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80022b0:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022b2:	6811      	ldr	r1, [r2, #0]
 80022b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80022b8:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 80022ba:	2000      	movs	r0, #0
 80022bc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022be:	6883      	ldr	r3, [r0, #8]
 80022c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80022c6:	d10e      	bne.n	80022e6 <UART_Transmit_IT+0x4e>
 80022c8:	6901      	ldr	r1, [r0, #16]
 80022ca:	b961      	cbnz	r1, 80022e6 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80022cc:	f833 1b02 	ldrh.w	r1, [r3], #2
 80022d0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80022d4:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80022d6:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80022d8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80022e4:	e7e9      	b.n	80022ba <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80022e6:	1c59      	adds	r1, r3, #1
 80022e8:	64c1      	str	r1, [r0, #76]	; 0x4c
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	8513      	strh	r3, [r2, #40]	; 0x28
 80022ee:	e7f3      	b.n	80022d8 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2002      	movs	r0, #2
  }
}
 80022f2:	4770      	bx	lr

080022f4 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022f4:	6801      	ldr	r1, [r0, #0]
{
 80022f6:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022f8:	680b      	ldr	r3, [r1, #0]
 80022fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fe:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002300:	2320      	movs	r3, #32
 8002302:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002306:	f7ff fd70 	bl	8001dea <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800230a:	2000      	movs	r0, #0
 800230c:	bd08      	pop	{r3, pc}

0800230e <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800230e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002312:	2b22      	cmp	r3, #34	; 0x22
{
 8002314:	b510      	push	{r4, lr}
 8002316:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002318:	d129      	bne.n	800236e <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800231a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231c:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800231e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002326:	ea02 0201 	and.w	r2, r2, r1
 800232a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800232c:	d11b      	bne.n	8002366 <UART_Receive_IT+0x58>
 800232e:	6901      	ldr	r1, [r0, #16]
 8002330:	b9c9      	cbnz	r1, 8002366 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002332:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8002336:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002338:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800233c:	3c01      	subs	r4, #1
 800233e:	b2a4      	uxth	r4, r4
 8002340:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002344:	b96c      	cbnz	r4, 8002362 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002346:	6803      	ldr	r3, [r0, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800234e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002358:	2320      	movs	r3, #32
 800235a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800235e:	f7ff fd45 	bl	8001dec <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8002362:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002364:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	6541      	str	r1, [r0, #84]	; 0x54
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e7e4      	b.n	8002338 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	f042 0208 	orr.w	r2, r2, #8
 8002374:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002376:	2002      	movs	r0, #2
 8002378:	bd10      	pop	{r4, pc}
	...

0800237c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002380:	6811      	ldr	r1, [r2, #0]
{
 8002382:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002384:	f013 050f 	ands.w	r5, r3, #15
{
 8002388:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800238a:	d107      	bne.n	800239c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800238c:	069e      	lsls	r6, r3, #26
 800238e:	d505      	bpl.n	800239c <HAL_UART_IRQHandler+0x20>
 8002390:	068e      	lsls	r6, r1, #26
 8002392:	d503      	bpl.n	800239c <HAL_UART_IRQHandler+0x20>
}
 8002394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002398:	f7ff bfb9 	b.w	800230e <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 800239c:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800239e:	2d00      	cmp	r5, #0
 80023a0:	d05c      	beq.n	800245c <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80023a2:	f010 0501 	ands.w	r5, r0, #1
 80023a6:	d102      	bne.n	80023ae <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80023a8:	f411 7f90 	tst.w	r1, #288	; 0x120
 80023ac:	d056      	beq.n	800245c <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023ae:	07d8      	lsls	r0, r3, #31
 80023b0:	d507      	bpl.n	80023c2 <HAL_UART_IRQHandler+0x46>
 80023b2:	05ce      	lsls	r6, r1, #23
 80023b4:	d505      	bpl.n	80023c2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80023b6:	2001      	movs	r0, #1
 80023b8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80023bc:	f040 0001 	orr.w	r0, r0, #1
 80023c0:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c2:	0798      	lsls	r0, r3, #30
 80023c4:	d506      	bpl.n	80023d4 <HAL_UART_IRQHandler+0x58>
 80023c6:	b12d      	cbz	r5, 80023d4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80023c8:	2002      	movs	r0, #2
 80023ca:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80023ce:	f040 0004 	orr.w	r0, r0, #4
 80023d2:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d4:	075e      	lsls	r6, r3, #29
 80023d6:	d506      	bpl.n	80023e6 <HAL_UART_IRQHandler+0x6a>
 80023d8:	b12d      	cbz	r5, 80023e6 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80023da:	2004      	movs	r0, #4
 80023dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80023e0:	f040 0002 	orr.w	r0, r0, #2
 80023e4:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80023e6:	0718      	lsls	r0, r3, #28
 80023e8:	d507      	bpl.n	80023fa <HAL_UART_IRQHandler+0x7e>
 80023ea:	068e      	lsls	r6, r1, #26
 80023ec:	d400      	bmi.n	80023f0 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023ee:	b125      	cbz	r5, 80023fa <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80023f0:	2008      	movs	r0, #8
 80023f2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023f6:	4302      	orrs	r2, r0
 80023f8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023fc:	2a00      	cmp	r2, #0
 80023fe:	d050      	beq.n	80024a2 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002400:	0698      	lsls	r0, r3, #26
 8002402:	d504      	bpl.n	800240e <HAL_UART_IRQHandler+0x92>
 8002404:	068a      	lsls	r2, r1, #26
 8002406:	d502      	bpl.n	800240e <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff ff80 	bl	800230e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800240e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002410:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8002412:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002414:	d404      	bmi.n	8002420 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800241a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800241e:	d019      	beq.n	8002454 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8002420:	f7ff fc9a 	bl	8001d58 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	0656      	lsls	r6, r2, #25
 800242a:	d50f      	bpl.n	800244c <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800242c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800242e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002434:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002436:	b148      	cbz	r0, 800244c <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_UART_IRQHandler+0x128>)
 800243a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800243c:	f7fd ffe4 	bl	8000408 <HAL_DMA_Abort_IT>
 8002440:	b378      	cbz	r0, 80024a2 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002442:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002448:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800244a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff fcce 	bl	8001dee <HAL_UART_ErrorCallback>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002454:	f7ff fccb 	bl	8001dee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002458:	66e5      	str	r5, [r4, #108]	; 0x6c
 800245a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800245c:	02dd      	lsls	r5, r3, #11
 800245e:	d50e      	bpl.n	800247e <HAL_UART_IRQHandler+0x102>
 8002460:	0246      	lsls	r6, r0, #9
 8002462:	d50c      	bpl.n	800247e <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002468:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800246a:	2320      	movs	r3, #32
 800246c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8002470:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002472:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800247a:	f000 b815 	b.w	80024a8 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800247e:	061d      	lsls	r5, r3, #24
 8002480:	d506      	bpl.n	8002490 <HAL_UART_IRQHandler+0x114>
 8002482:	0608      	lsls	r0, r1, #24
 8002484:	d504      	bpl.n	8002490 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002486:	4620      	mov	r0, r4
}
 8002488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 800248c:	f7ff bf04 	b.w	8002298 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002490:	065a      	lsls	r2, r3, #25
 8002492:	d506      	bpl.n	80024a2 <HAL_UART_IRQHandler+0x126>
 8002494:	064b      	lsls	r3, r1, #25
 8002496:	d504      	bpl.n	80024a2 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002498:	4620      	mov	r0, r4
}
 800249a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800249e:	f7ff bf29 	b.w	80022f4 <UART_EndTransmit_IT>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	08001df1 	.word	0x08001df1

080024a8 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80024a8:	4770      	bx	lr

080024aa <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024aa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80024ae:	b11b      	cbz	r3, 80024b8 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80024b0:	2000      	movs	r0, #0
 80024b2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80024b6:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80024b8:	2002      	movs	r0, #2
  }
}
 80024ba:	4770      	bx	lr

080024bc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80024bc:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80024c0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024c2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80024c6:	b15b      	cbz	r3, 80024e0 <USBD_CDC_EP0_RxReady+0x24>
 80024c8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80024cc:	28ff      	cmp	r0, #255	; 0xff
 80024ce:	d007      	beq.n	80024e0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80024d6:	4621      	mov	r1, r4
 80024d8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80024da:	23ff      	movs	r3, #255	; 0xff
 80024dc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80024e0:	2000      	movs	r0, #0
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80024e4:	2343      	movs	r3, #67	; 0x43
 80024e6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80024e8:	4800      	ldr	r0, [pc, #0]	; (80024ec <USBD_CDC_GetFSCfgDesc+0x8>)
 80024ea:	4770      	bx	lr
 80024ec:	20000040 	.word	0x20000040

080024f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80024f0:	2343      	movs	r3, #67	; 0x43
 80024f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80024f4:	4800      	ldr	r0, [pc, #0]	; (80024f8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80024f6:	4770      	bx	lr
 80024f8:	20000084 	.word	0x20000084

080024fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80024fc:	2343      	movs	r3, #67	; 0x43
 80024fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002500:	4800      	ldr	r0, [pc, #0]	; (8002504 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002502:	4770      	bx	lr
 8002504:	200000d4 	.word	0x200000d4

08002508 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002508:	230a      	movs	r3, #10
 800250a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800250c:	4800      	ldr	r0, [pc, #0]	; (8002510 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800250e:	4770      	bx	lr
 8002510:	200000c8 	.word	0x200000c8

08002514 <USBD_CDC_DataOut>:
{      
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002518:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800251c:	f001 f860 	bl	80035e0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002520:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002524:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002528:	b14b      	cbz	r3, 800253e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800252a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800252e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002538:	4798      	blx	r3
    return USBD_OK;
 800253a:	2000      	movs	r0, #0
 800253c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800253e:	2002      	movs	r0, #2
}
 8002540:	bd38      	pop	{r3, r4, r5, pc}
	...

08002544 <USBD_CDC_Setup>:
{
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002546:	780f      	ldrb	r7, [r1, #0]
 8002548:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800254c:	4606      	mov	r6, r0
 800254e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002550:	d023      	beq.n	800259a <USBD_CDC_Setup+0x56>
 8002552:	2b20      	cmp	r3, #32
 8002554:	d119      	bne.n	800258a <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002556:	88ca      	ldrh	r2, [r1, #6]
 8002558:	784b      	ldrb	r3, [r1, #1]
 800255a:	b1c2      	cbz	r2, 800258e <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800255c:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800255e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002562:	d50b      	bpl.n	800257c <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002564:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002568:	4618      	mov	r0, r3
 800256a:	688f      	ldr	r7, [r1, #8]
 800256c:	4629      	mov	r1, r5
 800256e:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002570:	88e2      	ldrh	r2, [r4, #6]
 8002572:	4629      	mov	r1, r5
 8002574:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002576:	f000 fb8a 	bl	8002c8e <USBD_CtlSendData>
      break;
 800257a:	e006      	b.n	800258a <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 800257c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002580:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002584:	4629      	mov	r1, r5
 8002586:	f000 fb97 	bl	8002cb8 <USBD_CtlPrepareRx>
}
 800258a:	2000      	movs	r0, #0
 800258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800258e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002592:	6884      	ldr	r4, [r0, #8]
 8002594:	4618      	mov	r0, r3
 8002596:	47a0      	blx	r4
 8002598:	e7f7      	b.n	800258a <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800259a:	784b      	ldrb	r3, [r1, #1]
 800259c:	2b0a      	cmp	r3, #10
 800259e:	d1f4      	bne.n	800258a <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80025a0:	2201      	movs	r2, #1
 80025a2:	4901      	ldr	r1, [pc, #4]	; (80025a8 <USBD_CDC_Setup+0x64>)
 80025a4:	e7e7      	b.n	8002576 <USBD_CDC_Setup+0x32>
 80025a6:	bf00      	nop
 80025a8:	200001e0 	.word	0x200001e0

080025ac <USBD_CDC_DeInit>:
{
 80025ac:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80025ae:	2181      	movs	r1, #129	; 0x81
{
 80025b0:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80025b2:	f000 ffad 	bl	8003510 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80025b6:	2101      	movs	r1, #1
 80025b8:	4620      	mov	r0, r4
 80025ba:	f000 ffa9 	bl	8003510 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80025be:	2182      	movs	r1, #130	; 0x82
 80025c0:	4620      	mov	r0, r4
 80025c2:	f000 ffa5 	bl	8003510 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80025c6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80025ca:	b153      	cbz	r3, 80025e2 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80025cc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80025d4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80025d8:	f001 f80c 	bl	80035f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80025e2:	2000      	movs	r0, #0
 80025e4:	bd10      	pop	{r4, pc}

080025e6 <USBD_CDC_Init>:
{
 80025e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80025e8:	7c03      	ldrb	r3, [r0, #16]
{
 80025ea:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80025ec:	bb7b      	cbnz	r3, 800264e <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 80025ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f2:	2202      	movs	r2, #2
 80025f4:	2181      	movs	r1, #129	; 0x81
 80025f6:	f000 ff7b 	bl	80034f0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80025fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80025fe:	2202      	movs	r2, #2
 8002600:	2101      	movs	r1, #1
 8002602:	4620      	mov	r0, r4
 8002604:	f000 ff74 	bl	80034f0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002608:	2308      	movs	r3, #8
 800260a:	2203      	movs	r2, #3
 800260c:	2182      	movs	r1, #130	; 0x82
 800260e:	4620      	mov	r0, r4
 8002610:	f000 ff6e 	bl	80034f0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002618:	f000 ffe8 	bl	80035ec <USBD_static_malloc>
 800261c:	4606      	mov	r6, r0
 800261e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002622:	b320      	cbz	r0, 800266e <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002624:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800262c:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800262e:	2500      	movs	r5, #0
 8002630:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002634:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002638:	b987      	cbnz	r7, 800265c <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800263a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800263e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002642:	2101      	movs	r1, #1
 8002644:	4620      	mov	r0, r4
 8002646:	f000 ffbd 	bl	80035c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800264a:	4638      	mov	r0, r7
 800264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	2202      	movs	r2, #2
 8002652:	2181      	movs	r1, #129	; 0x81
 8002654:	f000 ff4c 	bl	80034f0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002658:	2340      	movs	r3, #64	; 0x40
 800265a:	e7d0      	b.n	80025fe <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800265c:	2340      	movs	r3, #64	; 0x40
 800265e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002662:	2101      	movs	r1, #1
 8002664:	4620      	mov	r0, r4
 8002666:	f000 ffad 	bl	80035c4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800266a:	4628      	mov	r0, r5
 800266c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800266e:	2001      	movs	r0, #1
}
 8002670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002672 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002672:	b119      	cbz	r1, 800267c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002674:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002678:	2000      	movs	r0, #0
 800267a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800267c:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800267e:	4770      	bx	lr

08002680 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002680:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002684:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002686:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800268a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800268e:	4770      	bx	lr

08002690 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002690:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002694:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002696:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800269a:	4770      	bx	lr

0800269c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800269c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80026a0:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 80026a2:	b172      	cbz	r2, 80026c2 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 80026a4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80026a8:	2301      	movs	r3, #1
 80026aa:	b964      	cbnz	r4, 80026c6 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80026ac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80026b0:	2181      	movs	r1, #129	; 0x81
 80026b2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80026b6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80026ba:	f000 ff75 	bl	80035a8 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 80026be:	4620      	mov	r0, r4
 80026c0:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80026c2:	2002      	movs	r0, #2
 80026c4:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 80026c6:	4618      	mov	r0, r3
  }
}
 80026c8:	bd10      	pop	{r4, pc}

080026ca <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80026ca:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80026ce:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80026d0:	b162      	cbz	r2, 80026ec <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80026d2:	7c04      	ldrb	r4, [r0, #16]
 80026d4:	b944      	cbnz	r4, 80026e8 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80026d6:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80026da:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80026de:	2101      	movs	r1, #1
 80026e0:	f000 ff70 	bl	80035c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80026e4:	2000      	movs	r0, #0
 80026e6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	e7f6      	b.n	80026da <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80026ec:	2002      	movs	r0, #2
  }
}
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80026f0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80026f2:	b180      	cbz	r0, 8002716 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80026f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026f8:	b113      	cbz	r3, 8002700 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002700:	b109      	cbz	r1, 8002706 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002702:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002706:	2301      	movs	r3, #1
 8002708:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800270c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800270e:	f000 fe9f 	bl	8003450 <USBD_LL_Init>
  
  return USBD_OK; 
 8002712:	2000      	movs	r0, #0
 8002714:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002716:	2002      	movs	r0, #2
}
 8002718:	bd08      	pop	{r3, pc}

0800271a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800271a:	b119      	cbz	r1, 8002724 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800271c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002720:	2000      	movs	r0, #0
 8002722:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002724:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002726:	4770      	bx	lr

08002728 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002728:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800272a:	f000 fed3 	bl	80034d4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800272e:	2000      	movs	r0, #0
 8002730:	bd08      	pop	{r3, pc}

08002732 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002732:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002734:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002738:	b90b      	cbnz	r3, 800273e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800273a:	2002      	movs	r0, #2
 800273c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4798      	blx	r3
 8002742:	2800      	cmp	r0, #0
 8002744:	d1f9      	bne.n	800273a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002746:	bd08      	pop	{r3, pc}

08002748 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002748:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800274a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4798      	blx	r3
  return USBD_OK;
}
 8002752:	2000      	movs	r0, #0
 8002754:	bd08      	pop	{r3, pc}

08002756 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002756:	b538      	push	{r3, r4, r5, lr}
 8002758:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800275a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800275e:	4628      	mov	r0, r5
 8002760:	f000 fa65 	bl	8002c2e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002764:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002766:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800276a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800276e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002772:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002776:	f001 031f 	and.w	r3, r1, #31
 800277a:	2b01      	cmp	r3, #1
 800277c:	d00e      	beq.n	800279c <USBD_LL_SetupStage+0x46>
 800277e:	d307      	bcc.n	8002790 <USBD_LL_SetupStage+0x3a>
 8002780:	2b02      	cmp	r3, #2
 8002782:	d010      	beq.n	80027a6 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002784:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002788:	4620      	mov	r0, r4
 800278a:	f000 fecf 	bl	800352c <USBD_LL_StallEP>
    break;
 800278e:	e003      	b.n	8002798 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002790:	4629      	mov	r1, r5
 8002792:	4620      	mov	r0, r4
 8002794:	f000 f8d6 	bl	8002944 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002798:	2000      	movs	r0, #0
 800279a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800279c:	4629      	mov	r1, r5
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 f9ca 	bl	8002b38 <USBD_StdItfReq>
    break;
 80027a4:	e7f8      	b.n	8002798 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80027a6:	4629      	mov	r1, r5
 80027a8:	4620      	mov	r0, r4
 80027aa:	f000 f9dd 	bl	8002b68 <USBD_StdEPReq>
    break;
 80027ae:	e7f3      	b.n	8002798 <USBD_LL_SetupStage+0x42>

080027b0 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4604      	mov	r4, r0
 80027b4:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80027b6:	bb11      	cbnz	r1, 80027fe <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80027b8:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d10f      	bne.n	80027e0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80027c0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80027c4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d90b      	bls.n	80027e4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80027cc:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80027ce:	429a      	cmp	r2, r3
 80027d0:	bf28      	it	cs
 80027d2:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80027d4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80027d8:	b292      	uxth	r2, r2
 80027da:	4629      	mov	r1, r5
 80027dc:	f000 fa7b 	bl	8002cd6 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80027e0:	2000      	movs	r0, #0
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80027e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	b123      	cbz	r3, 80027f6 <USBD_LL_DataOutStage+0x46>
 80027ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80027f0:	2a03      	cmp	r2, #3
 80027f2:	d100      	bne.n	80027f6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80027f4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80027f6:	4620      	mov	r0, r4
 80027f8:	f000 fa75 	bl	8002ce6 <USBD_CtlSendStatus>
 80027fc:	e7f0      	b.n	80027e0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80027fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0eb      	beq.n	80027e0 <USBD_LL_DataOutStage+0x30>
 8002808:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800280c:	2a03      	cmp	r2, #3
 800280e:	d1e7      	bne.n	80027e0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002810:	4798      	blx	r3
 8002812:	e7e5      	b.n	80027e0 <USBD_LL_DataOutStage+0x30>

08002814 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4613      	mov	r3, r2
 8002818:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800281a:	460e      	mov	r6, r1
 800281c:	2900      	cmp	r1, #0
 800281e:	d13d      	bne.n	800289c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002820:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002824:	2a02      	cmp	r2, #2
 8002826:	d10f      	bne.n	8002848 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002828:	69c5      	ldr	r5, [r0, #28]
 800282a:	6a02      	ldr	r2, [r0, #32]
 800282c:	4295      	cmp	r5, r2
 800282e:	d914      	bls.n	800285a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002830:	1aaa      	subs	r2, r5, r2
 8002832:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002834:	4619      	mov	r1, r3
 8002836:	b292      	uxth	r2, r2
 8002838:	f000 fa36 	bl	8002ca8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800283c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800283e:	461a      	mov	r2, r3
 8002840:	4619      	mov	r1, r3
 8002842:	4620      	mov	r0, r4
 8002844:	f000 febe 	bl	80035c4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002848:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002856:	2000      	movs	r0, #0
 8002858:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800285a:	6983      	ldr	r3, [r0, #24]
 800285c:	fbb3 f5f2 	udiv	r5, r3, r2
 8002860:	fb02 3515 	mls	r5, r2, r5, r3
 8002864:	b965      	cbnz	r5, 8002880 <USBD_LL_DataInStage+0x6c>
 8002866:	429a      	cmp	r2, r3
 8002868:	d80a      	bhi.n	8002880 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800286a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800286e:	4293      	cmp	r3, r2
 8002870:	d206      	bcs.n	8002880 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002872:	462a      	mov	r2, r5
 8002874:	f000 fa18 	bl	8002ca8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002878:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800287c:	462b      	mov	r3, r5
 800287e:	e7de      	b.n	800283e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002880:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	b12b      	cbz	r3, 8002894 <USBD_LL_DataInStage+0x80>
 8002888:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800288c:	2a03      	cmp	r2, #3
 800288e:	d101      	bne.n	8002894 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002890:	4620      	mov	r0, r4
 8002892:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002894:	4620      	mov	r0, r4
 8002896:	f000 fa31 	bl	8002cfc <USBD_CtlReceiveStatus>
 800289a:	e7d5      	b.n	8002848 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800289c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0d7      	beq.n	8002856 <USBD_LL_DataInStage+0x42>
 80028a6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80028aa:	2a03      	cmp	r2, #3
 80028ac:	d1d3      	bne.n	8002856 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80028ae:	4798      	blx	r3
 80028b0:	e7d1      	b.n	8002856 <USBD_LL_DataInStage+0x42>

080028b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80028b2:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80028b4:	2200      	movs	r2, #0
{
 80028b6:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80028b8:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80028ba:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80028bc:	2340      	movs	r3, #64	; 0x40
 80028be:	f000 fe17 	bl	80034f0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80028c2:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80028c4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 fe0f 	bl	80034f0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80028d8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80028dc:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80028de:	b12b      	cbz	r3, 80028ec <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80028e0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80028e4:	7921      	ldrb	r1, [r4, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4620      	mov	r0, r4
 80028ea:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80028ec:	2000      	movs	r0, #0
 80028ee:	bd38      	pop	{r3, r4, r5, pc}

080028f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80028f0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80028f2:	2000      	movs	r0, #0
 80028f4:	4770      	bx	lr

080028f6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80028f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80028fa:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80028fe:	2304      	movs	r3, #4
 8002900:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002904:	2000      	movs	r0, #0
 8002906:	4770      	bx	lr

08002908 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002908:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800290c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002910:	2000      	movs	r0, #0
 8002912:	4770      	bx	lr

08002914 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002914:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002916:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800291a:	2a03      	cmp	r2, #3
 800291c:	d104      	bne.n	8002928 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800291e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	b103      	cbz	r3, 8002928 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002926:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002928:	2000      	movs	r0, #0
 800292a:	bd08      	pop	{r3, pc}

0800292c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800292c:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800292e:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002930:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002932:	f000 fdfb 	bl	800352c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002936:	4620      	mov	r0, r4
 8002938:	2100      	movs	r1, #0
}
 800293a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800293e:	f000 bdf5 	b.w	800352c <USBD_LL_StallEP>
	...

08002944 <USBD_StdDevReq>:
{
 8002944:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002946:	784b      	ldrb	r3, [r1, #1]
{
 8002948:	4604      	mov	r4, r0
 800294a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800294c:	2b09      	cmp	r3, #9
 800294e:	d879      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
 8002950:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002954:	00e500c9 	.word	0x00e500c9
 8002958:	00d90078 	.word	0x00d90078
 800295c:	006d0078 	.word	0x006d0078
 8002960:	0078000a 	.word	0x0078000a
 8002964:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002968:	884b      	ldrh	r3, [r1, #2]
 800296a:	0a1a      	lsrs	r2, r3, #8
 800296c:	3a01      	subs	r2, #1
 800296e:	2a06      	cmp	r2, #6
 8002970:	d868      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
 8002972:	e8df f002 	tbb	[pc, r2]
 8002976:	1c04      	.short	0x1c04
 8002978:	49676729 	.word	0x49676729
 800297c:	52          	.byte	0x52
 800297d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800297e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002982:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002984:	7c20      	ldrb	r0, [r4, #16]
 8002986:	f10d 0106 	add.w	r1, sp, #6
 800298a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800298c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002990:	2a00      	cmp	r2, #0
 8002992:	d067      	beq.n	8002a64 <USBD_StdDevReq+0x120>
 8002994:	88eb      	ldrh	r3, [r5, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d064      	beq.n	8002a64 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800299a:	429a      	cmp	r2, r3
 800299c:	bf28      	it	cs
 800299e:	461a      	movcs	r2, r3
 80029a0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80029a4:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 80029a6:	4620      	mov	r0, r4
 80029a8:	f000 f971 	bl	8002c8e <USBD_CtlSendData>
 80029ac:	e05a      	b.n	8002a64 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80029ae:	7c02      	ldrb	r2, [r0, #16]
 80029b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029b4:	b932      	cbnz	r2, 80029c4 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80029b8:	f10d 0006 	add.w	r0, sp, #6
 80029bc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80029be:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80029c0:	7043      	strb	r3, [r0, #1]
 80029c2:	e7e3      	b.n	800298c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	e7f7      	b.n	80029b8 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d83a      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
 80029ce:	e8df f003 	tbb	[pc, r3]
 80029d2:	0703      	.short	0x0703
 80029d4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80029d8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	e7d1      	b.n	8002984 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80029e0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	e7cd      	b.n	8002984 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80029e8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	e7c9      	b.n	8002984 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80029f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	e7c5      	b.n	8002984 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80029f8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	e7c1      	b.n	8002984 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002a00:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	e7bd      	b.n	8002984 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002a08:	7c03      	ldrb	r3, [r0, #16]
 8002a0a:	b9db      	cbnz	r3, 8002a44 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002a0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a10:	f10d 0006 	add.w	r0, sp, #6
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	4798      	blx	r3
 8002a18:	e7b8      	b.n	800298c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002a1a:	7c03      	ldrb	r3, [r0, #16]
 8002a1c:	b993      	cbnz	r3, 8002a44 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002a1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a22:	f10d 0006 	add.w	r0, sp, #6
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e7c8      	b.n	80029c0 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002a2e:	888b      	ldrh	r3, [r1, #4]
 8002a30:	b943      	cbnz	r3, 8002a44 <USBD_StdDevReq+0x100>
 8002a32:	88cb      	ldrh	r3, [r1, #6]
 8002a34:	b933      	cbnz	r3, 8002a44 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a36:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002a3a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a3c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002a3e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002a42:	d103      	bne.n	8002a4c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff ff71 	bl	800292c <USBD_CtlError.constprop.0>
    break;
 8002a4a:	e00b      	b.n	8002a64 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002a4c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002a50:	4629      	mov	r1, r5
 8002a52:	f000 fd9b 	bl	800358c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002a56:	4620      	mov	r0, r4
 8002a58:	f000 f945 	bl	8002ce6 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002a5c:	b12d      	cbz	r5, 8002a6a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002a5e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002a60:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002a64:	2000      	movs	r0, #0
 8002a66:	b003      	add	sp, #12
 8002a68:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e7f8      	b.n	8002a60 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002a6e:	7889      	ldrb	r1, [r1, #2]
 8002a70:	4d30      	ldr	r5, [pc, #192]	; (8002b34 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002a72:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002a74:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002a76:	d8e5      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002a78:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d00c      	beq.n	8002a9a <USBD_StdDevReq+0x156>
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d1df      	bne.n	8002a44 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002a84:	b9b1      	cbnz	r1, 8002ab4 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002a8c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8002a8e:	f7ff fe5b 	bl	8002748 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002a92:	4620      	mov	r0, r4
 8002a94:	f000 f927 	bl	8002ce6 <USBD_CtlSendStatus>
 8002a98:	e7e4      	b.n	8002a64 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002a9a:	2900      	cmp	r1, #0
 8002a9c:	d0f9      	beq.n	8002a92 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002a9e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002aa0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002aa2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002aa4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff fe42 	bl	8002732 <USBD_SetClassConfig>
 8002aae:	2802      	cmp	r0, #2
 8002ab0:	d1ef      	bne.n	8002a92 <USBD_StdDevReq+0x14e>
 8002ab2:	e7c7      	b.n	8002a44 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002ab4:	6841      	ldr	r1, [r0, #4]
 8002ab6:	2901      	cmp	r1, #1
 8002ab8:	d0eb      	beq.n	8002a92 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002aba:	b2c9      	uxtb	r1, r1
 8002abc:	f7ff fe44 	bl	8002748 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002ac0:	7829      	ldrb	r1, [r5, #0]
 8002ac2:	6061      	str	r1, [r4, #4]
 8002ac4:	e7f0      	b.n	8002aa8 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002ac6:	88ca      	ldrh	r2, [r1, #6]
 8002ac8:	2a01      	cmp	r2, #1
 8002aca:	d1bb      	bne.n	8002a44 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002acc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d003      	beq.n	8002adc <USBD_StdDevReq+0x198>
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d1b5      	bne.n	8002a44 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002ad8:	1d01      	adds	r1, r0, #4
 8002ada:	e764      	b.n	80029a6 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002adc:	4601      	mov	r1, r0
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f841 3f08 	str.w	r3, [r1, #8]!
 8002ae4:	e75f      	b.n	80029a6 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002ae6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002aea:	3b02      	subs	r3, #2
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d8a9      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002af0:	2301      	movs	r3, #1
 8002af2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002af4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002af8:	b10b      	cbz	r3, 8002afe <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002afa:	2303      	movs	r3, #3
 8002afc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002afe:	2202      	movs	r2, #2
 8002b00:	f104 010c 	add.w	r1, r4, #12
 8002b04:	e74f      	b.n	80029a6 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002b06:	884b      	ldrh	r3, [r1, #2]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d1ab      	bne.n	8002a64 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002b0c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002b10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002b14:	4629      	mov	r1, r5
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4798      	blx	r3
 8002b1c:	e7b9      	b.n	8002a92 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002b1e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b22:	3b02      	subs	r3, #2
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d88d      	bhi.n	8002a44 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002b28:	884b      	ldrh	r3, [r1, #2]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d19a      	bne.n	8002a64 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e7ec      	b.n	8002b0c <USBD_StdDevReq+0x1c8>
 8002b32:	bf00      	nop
 8002b34:	200001e1 	.word	0x200001e1

08002b38 <USBD_StdItfReq>:
{
 8002b38:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002b3a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002b3e:	2b03      	cmp	r3, #3
{
 8002b40:	4604      	mov	r4, r0
 8002b42:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002b44:	d10d      	bne.n	8002b62 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002b46:	790b      	ldrb	r3, [r1, #4]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d80a      	bhi.n	8002b62 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002b4c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002b54:	88eb      	ldrh	r3, [r5, #6]
 8002b56:	b913      	cbnz	r3, 8002b5e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 f8c4 	bl	8002ce6 <USBD_CtlSendStatus>
}
 8002b5e:	2000      	movs	r0, #0
 8002b60:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002b62:	f7ff fee3 	bl	800292c <USBD_CtlError.constprop.0>
    break;
 8002b66:	e7fa      	b.n	8002b5e <USBD_StdItfReq+0x26>

08002b68 <USBD_StdEPReq>:
{
 8002b68:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002b6a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002b6c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002b6e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002b72:	2a20      	cmp	r2, #32
{
 8002b74:	4604      	mov	r4, r0
 8002b76:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002b78:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002b7a:	d105      	bne.n	8002b88 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002b7c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4798      	blx	r3
}
 8002b84:	2000      	movs	r0, #0
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002b88:	784a      	ldrb	r2, [r1, #1]
 8002b8a:	2a01      	cmp	r2, #1
 8002b8c:	d01c      	beq.n	8002bc8 <USBD_StdEPReq+0x60>
 8002b8e:	d32a      	bcc.n	8002be6 <USBD_StdEPReq+0x7e>
 8002b90:	2a03      	cmp	r2, #3
 8002b92:	d1f7      	bne.n	8002b84 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002b94:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002b98:	2a02      	cmp	r2, #2
 8002b9a:	d040      	beq.n	8002c1e <USBD_StdEPReq+0xb6>
 8002b9c:	2a03      	cmp	r2, #3
 8002b9e:	d002      	beq.n	8002ba6 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002ba0:	f7ff fec4 	bl	800292c <USBD_CtlError.constprop.0>
      break;
 8002ba4:	e7ee      	b.n	8002b84 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002ba6:	884a      	ldrh	r2, [r1, #2]
 8002ba8:	b922      	cbnz	r2, 8002bb4 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002baa:	065e      	lsls	r6, r3, #25
 8002bac:	d002      	beq.n	8002bb4 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f000 fcbc 	bl	800352c <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002bb4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002bb8:	4629      	mov	r1, r5
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f000 f890 	bl	8002ce6 <USBD_CtlSendStatus>
 8002bc6:	e7dd      	b.n	8002b84 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002bc8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002bcc:	2a02      	cmp	r2, #2
 8002bce:	d026      	beq.n	8002c1e <USBD_StdEPReq+0xb6>
 8002bd0:	2a03      	cmp	r2, #3
 8002bd2:	d1e5      	bne.n	8002ba0 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002bd4:	884a      	ldrh	r2, [r1, #2]
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d1d4      	bne.n	8002b84 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002bda:	0659      	lsls	r1, r3, #25
 8002bdc:	d0f0      	beq.n	8002bc0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002bde:	4619      	mov	r1, r3
 8002be0:	f000 fcb2 	bl	8003548 <USBD_LL_ClearStallEP>
 8002be4:	e7e6      	b.n	8002bb4 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002be6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002bea:	2a02      	cmp	r2, #2
 8002bec:	d017      	beq.n	8002c1e <USBD_StdEPReq+0xb6>
 8002bee:	2a03      	cmp	r2, #3
 8002bf0:	d1d6      	bne.n	8002ba0 <USBD_StdEPReq+0x38>
 8002bf2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002bf6:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002bfa:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002bfe:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002c00:	bf14      	ite	ne
 8002c02:	3514      	addne	r5, #20
 8002c04:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002c08:	f000 fcac 	bl	8003564 <USBD_LL_IsStallEP>
 8002c0c:	b168      	cbz	r0, 8002c2a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002c0e:	2301      	movs	r3, #1
 8002c10:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002c12:	2202      	movs	r2, #2
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	f000 f839 	bl	8002c8e <USBD_CtlSendData>
      break;
 8002c1c:	e7b2      	b.n	8002b84 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002c1e:	065a      	lsls	r2, r3, #25
 8002c20:	d0b0      	beq.n	8002b84 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002c22:	4619      	mov	r1, r3
 8002c24:	f000 fc82 	bl	800352c <USBD_LL_StallEP>
 8002c28:	e7ac      	b.n	8002b84 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002c2a:	6028      	str	r0, [r5, #0]
 8002c2c:	e7f1      	b.n	8002c12 <USBD_StdEPReq+0xaa>

08002c2e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002c2e:	780b      	ldrb	r3, [r1, #0]
 8002c30:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002c32:	784b      	ldrb	r3, [r1, #1]
 8002c34:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002c36:	78ca      	ldrb	r2, [r1, #3]
 8002c38:	788b      	ldrb	r3, [r1, #2]
 8002c3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c3e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002c40:	794a      	ldrb	r2, [r1, #5]
 8002c42:	790b      	ldrb	r3, [r1, #4]
 8002c44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c48:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002c4a:	79ca      	ldrb	r2, [r1, #7]
 8002c4c:	798b      	ldrb	r3, [r1, #6]
 8002c4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002c52:	80c3      	strh	r3, [r0, #6]
 8002c54:	4770      	bx	lr

08002c56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002c56:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002c58:	b188      	cbz	r0, 8002c7e <USBD_GetString+0x28>
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002c5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2c00      	cmp	r4, #0
 8002c66:	d1f9      	bne.n	8002c5c <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002c6e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002c70:	2303      	movs	r3, #3
 8002c72:	704b      	strb	r3, [r1, #1]
 8002c74:	3801      	subs	r0, #1
 8002c76:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002c78:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002c7c:	b905      	cbnz	r5, 8002c80 <USBD_GetString+0x2a>
 8002c7e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002c86:	3302      	adds	r3, #2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	548c      	strb	r4, [r1, r2]
 8002c8c:	e7f4      	b.n	8002c78 <USBD_GetString+0x22>

08002c8e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002c8e:	b510      	push	{r4, lr}
 8002c90:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002c92:	2202      	movs	r2, #2
 8002c94:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002c98:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002c9a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002c9c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	f000 fc82 	bl	80035a8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	bd10      	pop	{r4, pc}

08002ca8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002ca8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002caa:	4613      	mov	r3, r2
 8002cac:	460a      	mov	r2, r1
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f000 fc7a 	bl	80035a8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	bd08      	pop	{r3, pc}

08002cb8 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002cc2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002cc6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002cc8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f000 fc79 	bl	80035c4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bd10      	pop	{r4, pc}

08002cd6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002cd6:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002cd8:	4613      	mov	r3, r2
 8002cda:	460a      	mov	r2, r1
 8002cdc:	2100      	movs	r1, #0
 8002cde:	f000 fc71 	bl	80035c4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	bd08      	pop	{r3, pc}

08002ce6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002ce6:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002cee:	2300      	movs	r3, #0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f000 fc58 	bl	80035a8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	bd08      	pop	{r3, pc}

08002cfc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002cfc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002cfe:	2305      	movs	r3, #5
 8002d00:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002d04:	2300      	movs	r3, #0
 8002d06:	461a      	mov	r2, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f000 fc5b 	bl	80035c4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002d0e:	2000      	movs	r0, #0
 8002d10:	bd08      	pop	{r3, pc}
	...

08002d14 <USB_Receive_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_Receive_Callback(uint8_t* Buf)
{
	res = Buf[0];
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <USB_Receive_Callback+0x10>)
 8002d16:	7802      	ldrb	r2, [r0, #0]
 8002d18:	701a      	strb	r2, [r3, #0]
	flag = 1;
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <USB_Receive_Callback+0x14>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000484 	.word	0x20000484
 8002d28:	200001e2 	.word	0x200001e2

08002d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d2c:	b530      	push	{r4, r5, lr}
 8002d2e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d30:	2228      	movs	r2, #40	; 0x28
 8002d32:	2100      	movs	r1, #0
 8002d34:	a805      	add	r0, sp, #20
 8002d36:	f000 fcff 	bl	8003738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d3a:	2214      	movs	r2, #20
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4668      	mov	r0, sp
 8002d40:	f000 fcfa 	bl	8003738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d44:	223c      	movs	r2, #60	; 0x3c
 8002d46:	2100      	movs	r1, #0
 8002d48:	eb0d 0002 	add.w	r0, sp, r2
 8002d4c:	f000 fcf4 	bl	8003738 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d54:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d5a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d5e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d60:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d62:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d68:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d6a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6c:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6e:	f7fe fb6b 	bl	8001448 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d72:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d74:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d76:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d7a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d80:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d82:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d84:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d86:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d88:	f7fe fe06 	bl	8001998 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SystemClock_Config+0x74>)
 8002d8e:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d90:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d92:	9411      	str	r4, [sp, #68]	; 0x44
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002d94:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d96:	f7fe fed9 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002d9a:	b01f      	add	sp, #124	; 0x7c
 8002d9c:	bd30      	pop	{r4, r5, pc}
 8002d9e:	bf00      	nop
 8002da0:	00020001 	.word	0x00020001

08002da4 <USB_reset>:
 * Если перегенерировали проект в CubeMX В конец функции static void MX_GPIO_Init(void) добавьте USB_reset();
 *
 * */

void USB_reset(void)
{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	b086      	sub	sp, #24
	// инициализируем пин DP как выход
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	2214      	movs	r2, #20
 8002daa:	2100      	movs	r1, #0
 8002dac:	a801      	add	r0, sp, #4
 8002dae:	f000 fcc3 	bl	8003738 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002db2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	a901      	add	r1, sp, #4
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbe:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dc0:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f7fd fb45 	bl	8000450 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4621      	mov	r1, r4
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f7fd fc01 	bl	80005d4 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём

	// переинициализируем пин для работы с USB
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd2:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	a901      	add	r1, sp, #4
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dda:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f7fd fb37 	bl	8000450 <HAL_GPIO_Init>
	for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём
}
 8002de2:	b006      	add	sp, #24
 8002de4:	bd10      	pop	{r4, pc}
	...

08002de8 <main>:
{
 8002de8:	b500      	push	{lr}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002dec:	f7fd fa6c 	bl	80002c8 <HAL_Init>
  SystemClock_Config();
 8002df0:	f7ff ff9c 	bl	8002d2c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	2214      	movs	r2, #20
 8002df6:	2100      	movs	r1, #0
 8002df8:	eb0d 0002 	add.w	r0, sp, r2
 8002dfc:	f000 fc9c 	bl	8003738 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <main+0xf8>)
	  if(flag)
 8002e02:	4d38      	ldr	r5, [pc, #224]	; (8002ee4 <main+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e04:	695a      	ldr	r2, [r3, #20]
		  if(res == 'B') entr_bootloader();
 8002e06:	4e38      	ldr	r6, [pc, #224]	; (8002ee8 <main+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002e26:	9202      	str	r2, [sp, #8]
 8002e28:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e30:	615a      	str	r2, [r3, #20]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e38:	9203      	str	r2, [sp, #12]
 8002e3a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8002e4e:	2160      	movs	r1, #96	; 0x60
 8002e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e54:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8002e56:	f7fd fbbd 	bl	80005d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BOOT_PIN_Pin|RESET_PIN_Pin;
 8002e5a:	2360      	movs	r3, #96	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	a905      	add	r1, sp, #20
 8002e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BOOT_PIN_Pin|RESET_PIN_Pin;
 8002e64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f7fd faef 	bl	8000450 <HAL_GPIO_Init>
  USB_reset();
 8002e72:	f7ff ff97 	bl	8002da4 <USB_reset>
  MX_USB_DEVICE_Init();
 8002e76:	f000 fa27 	bl	80032c8 <MX_USB_DEVICE_Init>
  huart1.Instance = USART1;
 8002e7a:	481c      	ldr	r0, [pc, #112]	; (8002eec <main+0x104>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002e7c:	491c      	ldr	r1, [pc, #112]	; (8002ef0 <main+0x108>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e7e:	60c4      	str	r4, [r0, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002e80:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e92:	230c      	movs	r3, #12
 8002e94:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9a:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e9e:	f7ff f9c9 	bl	8002234 <HAL_UART_Init>
	  if(flag)
 8002ea2:	782b      	ldrb	r3, [r5, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0fc      	beq.n	8002ea2 <main+0xba>
		  if(res == 'B') entr_bootloader();
 8002ea8:	7833      	ldrb	r3, [r6, #0]
		  flag = 0;
 8002eaa:	702c      	strb	r4, [r5, #0]
		  if(res == 'B') entr_bootloader();
 8002eac:	2b42      	cmp	r3, #66	; 0x42
 8002eae:	d102      	bne.n	8002eb6 <main+0xce>
 8002eb0:	f000 f90a 	bl	80030c8 <entr_bootloader>
 8002eb4:	e7f5      	b.n	8002ea2 <main+0xba>
		  else if(res == 'R') boot_off_and_reset();
 8002eb6:	2b52      	cmp	r3, #82	; 0x52
 8002eb8:	d102      	bne.n	8002ec0 <main+0xd8>
 8002eba:	f000 f8d5 	bl	8003068 <boot_off_and_reset>
 8002ebe:	e7f0      	b.n	8002ea2 <main+0xba>
		  else if(res == 'E') erase_memory();
 8002ec0:	2b45      	cmp	r3, #69	; 0x45
 8002ec2:	d102      	bne.n	8002eca <main+0xe2>
 8002ec4:	f000 f93a 	bl	800313c <erase_memory>
 8002ec8:	e7eb      	b.n	8002ea2 <main+0xba>
		  else if(res == 'S') go_prog();
 8002eca:	2b53      	cmp	r3, #83	; 0x53
 8002ecc:	d102      	bne.n	8002ed4 <main+0xec>
 8002ece:	f000 f9d1 	bl	8003274 <go_prog>
 8002ed2:	e7e6      	b.n	8002ea2 <main+0xba>
		  else if(res == 'I') get_id();
 8002ed4:	2b49      	cmp	r3, #73	; 0x49
 8002ed6:	d1e4      	bne.n	8002ea2 <main+0xba>
 8002ed8:	f000 f95c 	bl	8003194 <get_id>
 8002edc:	e7e1      	b.n	8002ea2 <main+0xba>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	200001e2 	.word	0x200001e2
 8002ee8:	20000484 	.word	0x20000484
 8002eec:	20000414 	.word	0x20000414
 8002ef0:	40013800 	.word	0x40013800

08002ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_MspInit+0x34>)
{
 8002efa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	619a      	str	r2, [r3, #24]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	f002 0201 	and.w	r2, r2, #1
 8002f0a:	9200      	str	r2, [sp, #0]
 8002f0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f14:	61da      	str	r2, [r3, #28]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f1e:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f22:	f7fd fa09 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f26:	b003      	add	sp, #12
 8002f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f30:	b510      	push	{r4, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f36:	2214      	movs	r2, #20
 8002f38:	2100      	movs	r1, #0
 8002f3a:	a803      	add	r0, sp, #12
 8002f3c:	f000 fbfc 	bl	8003738 <memset>
  if(huart->Instance==USART1)
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_UART_MspInit+0x6c>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d127      	bne.n	8002f98 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f48:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f4e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f50:	4813      	ldr	r0, [pc, #76]	; (8002fa0 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	619a      	str	r2, [r3, #24]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f5e:	9201      	str	r2, [sp, #4]
 8002f60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f68:	615a      	str	r2, [r3, #20]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f74:	2330      	movs	r3, #48	; 0x30
 8002f76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f80:	2307      	movs	r3, #7
 8002f82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f84:	f7fd fa64 	bl	8000450 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2025      	movs	r0, #37	; 0x25
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	f7fd f9e5 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f92:	2025      	movs	r0, #37	; 0x25
 8002f94:	f7fd fa16 	bl	80003c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f98:	b008      	add	sp, #32
 8002f9a:	bd10      	pop	{r4, pc}
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	48000800 	.word	0x48000800

08002fa4 <NMI_Handler>:
 8002fa4:	4770      	bx	lr

08002fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa6:	e7fe      	b.n	8002fa6 <HardFault_Handler>

08002fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa8:	e7fe      	b.n	8002fa8 <MemManage_Handler>

08002faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	e7fe      	b.n	8002fac <UsageFault_Handler>

08002fae <SVC_Handler>:
 8002fae:	4770      	bx	lr

08002fb0 <DebugMon_Handler>:
 8002fb0:	4770      	bx	lr

08002fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb4:	f7fd b99a 	b.w	80002ec <HAL_IncTick>

08002fb8 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8002fba:	f7fd befb 	b.w	8000db4 <HAL_PCD_IRQHandler>
 8002fbe:	bf00      	nop
 8002fc0:	20000e7c 	.word	0x20000e7c

08002fc4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <USART1_IRQHandler+0x8>)
 8002fc6:	f7ff b9d9 	b.w	800237c <HAL_UART_IRQHandler>
 8002fca:	bf00      	nop
 8002fcc:	20000414 	.word	0x20000414

08002fd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd0:	4915      	ldr	r1, [pc, #84]	; (8003028 <SystemInit+0x58>)
 8002fd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <SystemInit+0x5c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002fe8:	6858      	ldr	r0, [r3, #4]
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <SystemInit+0x60>)
 8002fec:	4002      	ands	r2, r0
 8002fee:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ff6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003002:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800300a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	f022 020f 	bic.w	r2, r2, #15
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003014:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <SystemInit+0x64>)
 8003018:	4002      	ands	r2, r0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003024:	608b      	str	r3, [r1, #8]
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	40021000 	.word	0x40021000
 8003030:	f87fc00c 	.word	0xf87fc00c
 8003034:	ff00fccc 	.word	0xff00fccc

08003038 <on_reset>:
  }
}

////////////////////////////// on_reset //////////////////////////////////////
void on_reset()
{
 8003038:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_SET);
 800303a:	2201      	movs	r2, #1
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003042:	f7fd fac7 	bl	80005d4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8003046:	2032      	movs	r0, #50	; 0x32
 8003048:	f7fd f962 	bl	8000310 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_RESET);
 8003058:	f7fd babc 	b.w	80005d4 <HAL_GPIO_WritePin>

0800305c <on_off_boot>:

////////////////////////////// on_off_boot ///////////////////////////////////
void on_off_boot(uint8_t state)
{
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin, state);
 800305c:	4602      	mov	r2, r0
 800305e:	2120      	movs	r1, #32
 8003060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003064:	f7fd bab6 	b.w	80005d4 <HAL_GPIO_WritePin>

08003068 <boot_off_and_reset>:
}

////////////////////////////// on_off_boot ///////////////////////////////////
void boot_off_and_reset()
{
 8003068:	b508      	push	{r3, lr}
  on_off_boot(0);
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff fff6 	bl	800305c <on_off_boot>
  HAL_Delay(500);
 8003070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003074:	f7fd f94c 	bl	8000310 <HAL_Delay>
  on_reset();
 8003078:	f7ff ffde 	bl	8003038 <on_reset>
  CDC_Transmit_FS((uint8_t*)"Boot off and reset\r\n", strlen("Boot off and reset\r\n"));
 800307c:	2114      	movs	r1, #20
 800307e:	4802      	ldr	r0, [pc, #8]	; (8003088 <boot_off_and_reset+0x20>)
}
 8003080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CDC_Transmit_FS((uint8_t*)"Boot off and reset\r\n", strlen("Boot off and reset\r\n"));
 8003084:	f000 b964 	b.w	8003350 <CDC_Transmit_FS>
 8003088:	0800401a 	.word	0x0800401a

0800308c <ack_byte>:
  if(ack_byte() == 0) return 0;
  else return 1;
}

uint8_t ack_byte()
{
 800308c:	b513      	push	{r0, r1, r4, lr}
	uint8_t ack_buff = 0;
 800308e:	a902      	add	r1, sp, #8
 8003090:	2300      	movs	r3, #0
 8003092:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&ack_buff, 1);
 8003096:	2201      	movs	r2, #1
 8003098:	480a      	ldr	r0, [pc, #40]	; (80030c4 <ack_byte+0x38>)
 800309a:	f7fe fe6a 	bl	8001d72 <HAL_UART_Receive_IT>
 800309e:	f44f 74fa 	mov.w	r4, #500	; 0x1f4

	for(uint16_t i = 0; i < 500; i++)
	{
	  if(ack_buff == 'y') return 0;
 80030a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030a6:	2b79      	cmp	r3, #121	; 0x79
 80030a8:	d009      	beq.n	80030be <ack_byte+0x32>
 80030aa:	3c01      	subs	r4, #1
	  HAL_Delay(1);
 80030ac:	2001      	movs	r0, #1
 80030ae:	b2a4      	uxth	r4, r4
 80030b0:	f7fd f92e 	bl	8000310 <HAL_Delay>
	for(uint16_t i = 0; i < 500; i++)
 80030b4:	2c00      	cmp	r4, #0
 80030b6:	d1f4      	bne.n	80030a2 <ack_byte+0x16>
	}

	return 1;
 80030b8:	2001      	movs	r0, #1
}
 80030ba:	b002      	add	sp, #8
 80030bc:	bd10      	pop	{r4, pc}
	  if(ack_buff == 'y') return 0;
 80030be:	2000      	movs	r0, #0
 80030c0:	e7fb      	b.n	80030ba <ack_byte+0x2e>
 80030c2:	bf00      	nop
 80030c4:	20000414 	.word	0x20000414

080030c8 <entr_bootloader>:
{
 80030c8:	b507      	push	{r0, r1, r2, lr}
  on_off_boot(1); // подтягиваем BOOT_0 к плюсу
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff ffc6 	bl	800305c <on_off_boot>
  HAL_Delay(500);
 80030d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d4:	f7fd f91c 	bl	8000310 <HAL_Delay>
  on_reset(); // нажимаем ресет
 80030d8:	f7ff ffae 	bl	8003038 <on_reset>
  HAL_Delay(200);
 80030dc:	20c8      	movs	r0, #200	; 0xc8
 80030de:	f7fd f917 	bl	8000310 <HAL_Delay>
  uint8_t array[1] = {0x7F};
 80030e2:	a902      	add	r1, sp, #8
 80030e4:	237f      	movs	r3, #127	; 0x7f
 80030e6:	f801 3d04 	strb.w	r3, [r1, #-4]!
  HAL_UART_Transmit(&huart1, (uint8_t*)array, 1, 1000); // первый запрос (для определения скорости)
 80030ea:	2201      	movs	r2, #1
 80030ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f0:	4807      	ldr	r0, [pc, #28]	; (8003110 <entr_bootloader+0x48>)
 80030f2:	f7ff f814 	bl	800211e <HAL_UART_Transmit>
  if(ack_byte() == 0)
 80030f6:	f7ff ffc9 	bl	800308c <ack_byte>
 80030fa:	b930      	cbnz	r0, 800310a <entr_bootloader+0x42>
	  CDC_Transmit_FS((uint8_t*)"Bootloader - OK\r\n", strlen("Bootloader - OK\r\n"));
 80030fc:	4805      	ldr	r0, [pc, #20]	; (8003114 <entr_bootloader+0x4c>)
 80030fe:	2111      	movs	r1, #17
	  CDC_Transmit_FS((uint8_t*)"Bootloader - ERROR\r\n", strlen("Bootloader - ERROR\r\n"));
 8003100:	f000 f926 	bl	8003350 <CDC_Transmit_FS>
}
 8003104:	b003      	add	sp, #12
 8003106:	f85d fb04 	ldr.w	pc, [sp], #4
	  CDC_Transmit_FS((uint8_t*)"Bootloader - ERROR\r\n", strlen("Bootloader - ERROR\r\n"));
 800310a:	2114      	movs	r1, #20
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <entr_bootloader+0x50>)
 800310e:	e7f7      	b.n	8003100 <entr_bootloader+0x38>
 8003110:	20000414 	.word	0x20000414
 8003114:	0800402f 	.word	0x0800402f
 8003118:	08004041 	.word	0x08004041

0800311c <send_cmd>:
{
 800311c:	b508      	push	{r3, lr}
  HAL_UART_Transmit(&huart1, (uint8_t*)cmd_array, 2, 1000);
 800311e:	4601      	mov	r1, r0
 8003120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003124:	2202      	movs	r2, #2
 8003126:	4804      	ldr	r0, [pc, #16]	; (8003138 <send_cmd+0x1c>)
 8003128:	f7fe fff9 	bl	800211e <HAL_UART_Transmit>
  if(ack_byte() == 0) return 0;
 800312c:	f7ff ffae 	bl	800308c <ack_byte>
}
 8003130:	3000      	adds	r0, #0
 8003132:	bf18      	it	ne
 8003134:	2001      	movne	r0, #1
 8003136:	bd08      	pop	{r3, pc}
 8003138:	20000414 	.word	0x20000414

0800313c <erase_memory>:
{
 800313c:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_array[2] = {0x43, 0xBC}; // команда на стирание
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <erase_memory+0x48>)
  if(send_cmd(cmd_array) == 0)
 8003140:	4668      	mov	r0, sp
  uint8_t cmd_array[2] = {0x43, 0xBC}; // команда на стирание
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f8ad 3000 	strh.w	r3, [sp]
  if(send_cmd(cmd_array) == 0)
 8003148:	f7ff ffe8 	bl	800311c <send_cmd>
 800314c:	b9b0      	cbnz	r0, 800317c <erase_memory+0x40>
    uint8_t cmd_array[2] = {0xFF, 0x00}; // код стирания (полное)
 800314e:	23ff      	movs	r3, #255	; 0xff
 8003150:	f88d 0005 	strb.w	r0, [sp, #5]
    if(send_cmd(cmd_array) == 0)
 8003154:	a801      	add	r0, sp, #4
    uint8_t cmd_array[2] = {0xFF, 0x00}; // код стирания (полное)
 8003156:	f88d 3004 	strb.w	r3, [sp, #4]
    if(send_cmd(cmd_array) == 0)
 800315a:	f7ff ffdf 	bl	800311c <send_cmd>
 800315e:	4604      	mov	r4, r0
 8003160:	b930      	cbnz	r0, 8003170 <erase_memory+0x34>
      CDC_Transmit_FS((uint8_t*)"Erase Memory - OK\r\n", strlen("Erase Memory - OK\r\n"));
 8003162:	2113      	movs	r1, #19
 8003164:	4808      	ldr	r0, [pc, #32]	; (8003188 <erase_memory+0x4c>)
 8003166:	f000 f8f3 	bl	8003350 <CDC_Transmit_FS>
}
 800316a:	4620      	mov	r0, r4
 800316c:	b002      	add	sp, #8
 800316e:	bd10      	pop	{r4, pc}
    else CDC_Transmit_FS((uint8_t*)"Cmd cod Erase Memory - ERROR\r\n", strlen("Cmd cod Erase Memory - ERROR\r\n"));
 8003170:	4806      	ldr	r0, [pc, #24]	; (800318c <erase_memory+0x50>)
 8003172:	211e      	movs	r1, #30
  else CDC_Transmit_FS((uint8_t*)"Cmd start Erase Memory - ERROR\r\n", strlen("Cmd start Erase Memory - ERROR\r\n"));
 8003174:	f000 f8ec 	bl	8003350 <CDC_Transmit_FS>
  return 1;
 8003178:	2401      	movs	r4, #1
 800317a:	e7f6      	b.n	800316a <erase_memory+0x2e>
  else CDC_Transmit_FS((uint8_t*)"Cmd start Erase Memory - ERROR\r\n", strlen("Cmd start Erase Memory - ERROR\r\n"));
 800317c:	2120      	movs	r1, #32
 800317e:	4804      	ldr	r0, [pc, #16]	; (8003190 <erase_memory+0x54>)
 8003180:	e7f8      	b.n	8003174 <erase_memory+0x38>
 8003182:	bf00      	nop
 8003184:	08003fd8 	.word	0x08003fd8
 8003188:	08004056 	.word	0x08004056
 800318c:	0800406a 	.word	0x0800406a
 8003190:	08004089 	.word	0x08004089

08003194 <get_id>:
{
 8003194:	b530      	push	{r4, r5, lr}
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <get_id+0x80>)
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 8003198:	481f      	ldr	r0, [pc, #124]	; (8003218 <get_id+0x84>)
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 800319a:	881b      	ldrh	r3, [r3, #0]
{
 800319c:	b089      	sub	sp, #36	; 0x24
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 800319e:	2205      	movs	r2, #5
 80031a0:	a902      	add	r1, sp, #8
    uint8_t id[5] = {0,};
 80031a2:	2500      	movs	r5, #0
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 80031a4:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t id[5] = {0,};
 80031a8:	9502      	str	r5, [sp, #8]
 80031aa:	f88d 500c 	strb.w	r5, [sp, #12]
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 80031ae:	f7fe fde0 	bl	8001d72 <HAL_UART_Receive_IT>
    send_cmd(cmd_array);
 80031b2:	a801      	add	r0, sp, #4
 80031b4:	f7ff ffb2 	bl	800311c <send_cmd>
    HAL_Delay(10);
 80031b8:	200a      	movs	r0, #10
 80031ba:	f7fd f8a9 	bl	8000310 <HAL_Delay>
    if(id[0] == 'y')
 80031be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80031c2:	2b79      	cmp	r3, #121	; 0x79
 80031c4:	d122      	bne.n	800320c <get_id+0x78>
		if(id[4] == 'y')
 80031c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80031ca:	2b79      	cmp	r3, #121	; 0x79
 80031cc:	d11b      	bne.n	8003206 <get_id+0x72>
			stm_id = (stm_id << 8) | id[3];
 80031ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80031d2:	f89d 400b 	ldrb.w	r4, [sp, #11]
			char str[16] = {0,};
 80031d6:	2210      	movs	r2, #16
 80031d8:	4629      	mov	r1, r5
 80031da:	eb0d 0002 	add.w	r0, sp, r2
			stm_id = (stm_id << 8) | id[3];
 80031de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			char str[16] = {0,};
 80031e2:	f000 faa9 	bl	8003738 <memset>
			snprintf(str, 16, "ID_chip: 0x%X\r\n", stm_id);
 80031e6:	2110      	movs	r1, #16
 80031e8:	eb0d 0001 	add.w	r0, sp, r1
 80031ec:	4623      	mov	r3, r4
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <get_id+0x88>)
 80031f0:	f000 faaa 	bl	8003748 <sniprintf>
			CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80031f4:	a804      	add	r0, sp, #16
 80031f6:	f7fc ffeb 	bl	80001d0 <strlen>
 80031fa:	b281      	uxth	r1, r0
 80031fc:	a804      	add	r0, sp, #16
    else CDC_Transmit_FS((uint8_t*)"Cmd Get ID - ERROR\r\n", strlen("Cmd Get ID - ERROR\r\n"));
 80031fe:	f000 f8a7 	bl	8003350 <CDC_Transmit_FS>
}
 8003202:	b009      	add	sp, #36	; 0x24
 8003204:	bd30      	pop	{r4, r5, pc}
		else CDC_Transmit_FS((uint8_t*)"Not ID - ERROR\r\n", strlen("Not ID - ERROR\r\n"));
 8003206:	2110      	movs	r1, #16
 8003208:	4805      	ldr	r0, [pc, #20]	; (8003220 <get_id+0x8c>)
 800320a:	e7f8      	b.n	80031fe <get_id+0x6a>
    else CDC_Transmit_FS((uint8_t*)"Cmd Get ID - ERROR\r\n", strlen("Cmd Get ID - ERROR\r\n"));
 800320c:	2114      	movs	r1, #20
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <get_id+0x90>)
 8003210:	e7f5      	b.n	80031fe <get_id+0x6a>
 8003212:	bf00      	nop
 8003214:	08003fda 	.word	0x08003fda
 8003218:	20000414 	.word	0x20000414
 800321c:	080040aa 	.word	0x080040aa
 8003220:	080040ba 	.word	0x080040ba
 8003224:	080040cb 	.word	0x080040cb

08003228 <send_adress>:
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
}

///////////////////////////// send_adress ////////////////////////////////////
uint8_t send_adress(uint32_t addr)
{
 8003228:	b507      	push	{r0, r1, r2, lr}
  uint8_t buf[5] = {0,};
  buf[0] = addr >> 24;
  buf[1] = (addr >> 16) & 0xFF;
 800322a:	f3c0 4107 	ubfx	r1, r0, #16, #8
  buf[0] = addr >> 24;
 800322e:	0e02      	lsrs	r2, r0, #24
  buf[2] = (addr >> 8) & 0xFF;
 8003230:	f3c0 2307 	ubfx	r3, r0, #8, #8
  buf[0] = addr >> 24;
 8003234:	f88d 2000 	strb.w	r2, [sp]
  buf[3] = addr & 0xFF;
 8003238:	b2c0      	uxtb	r0, r0
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 800323a:	404a      	eors	r2, r1
  buf[3] = addr & 0xFF;
 800323c:	f88d 0003 	strb.w	r0, [sp, #3]
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8003240:	4050      	eors	r0, r2
 8003242:	4058      	eors	r0, r3
  buf[1] = (addr >> 16) & 0xFF;
 8003244:	f88d 1001 	strb.w	r1, [sp, #1]
  buf[2] = (addr >> 8) & 0xFF;
 8003248:	f88d 3002 	strb.w	r3, [sp, #2]
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 800324c:	f88d 0004 	strb.w	r0, [sp, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)buf, 5, 1000);
 8003250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003254:	2205      	movs	r2, #5
 8003256:	4669      	mov	r1, sp
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <send_adress+0x48>)
 800325a:	f7fe ff60 	bl	800211e <HAL_UART_Transmit>

  if(ack_byte() == 0) return 0;
 800325e:	f7ff ff15 	bl	800308c <ack_byte>
  else return 1;
}
 8003262:	3000      	adds	r0, #0
 8003264:	bf18      	it	ne
 8003266:	2001      	movne	r0, #1
 8003268:	b003      	add	sp, #12
 800326a:	f85d fb04 	ldr.w	pc, [sp], #4
 800326e:	bf00      	nop
 8003270:	20000414 	.word	0x20000414

08003274 <go_prog>:
{
 8003274:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd_array[2] = {0x21, 0xDE}; // код запуска программы
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <go_prog+0x40>)
  if(send_cmd(cmd_array) == 0)
 8003278:	a801      	add	r0, sp, #4
  uint8_t cmd_array[2] = {0x21, 0xDE}; // код запуска программы
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(send_cmd(cmd_array) == 0)
 8003280:	f7ff ff4c 	bl	800311c <send_cmd>
 8003284:	b990      	cbnz	r0, 80032ac <go_prog+0x38>
    CDC_Transmit_FS((uint8_t*)"Cmd start programm - OK\r\n", strlen("Cmd start programm - OK\r\n"));
 8003286:	2119      	movs	r1, #25
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <go_prog+0x44>)
 800328a:	f000 f861 	bl	8003350 <CDC_Transmit_FS>
    uint8_t ret_adr = send_adress(WRITE_ADDR);
 800328e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003292:	f7ff ffc9 	bl	8003228 <send_adress>
    if(ret_adr == 0)
 8003296:	b930      	cbnz	r0, 80032a6 <go_prog+0x32>
      CDC_Transmit_FS((uint8_t*)"Start programm - OK\r\n", strlen("Start programm - OK\r\n"));
 8003298:	4808      	ldr	r0, [pc, #32]	; (80032bc <go_prog+0x48>)
 800329a:	2115      	movs	r1, #21
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
 800329c:	f000 f858 	bl	8003350 <CDC_Transmit_FS>
}
 80032a0:	b003      	add	sp, #12
 80032a2:	f85d fb04 	ldr.w	pc, [sp], #4
    else CDC_Transmit_FS((uint8_t*)"Address start programm - ERROR\r\n", strlen("Address start programm - ERROR\r\n"));
 80032a6:	2120      	movs	r1, #32
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <go_prog+0x4c>)
 80032aa:	e7f7      	b.n	800329c <go_prog+0x28>
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
 80032ac:	211c      	movs	r1, #28
 80032ae:	4805      	ldr	r0, [pc, #20]	; (80032c4 <go_prog+0x50>)
 80032b0:	e7f4      	b.n	800329c <go_prog+0x28>
 80032b2:	bf00      	nop
 80032b4:	08003fdc 	.word	0x08003fdc
 80032b8:	080040e0 	.word	0x080040e0
 80032bc:	080040fa 	.word	0x080040fa
 80032c0:	08004110 	.word	0x08004110
 80032c4:	08004131 	.word	0x08004131

080032c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80032c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80032ca:	4c09      	ldr	r4, [pc, #36]	; (80032f0 <MX_USB_DEVICE_Init+0x28>)
 80032cc:	4909      	ldr	r1, [pc, #36]	; (80032f4 <MX_USB_DEVICE_Init+0x2c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff fa0d 	bl	80026f0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80032d6:	4908      	ldr	r1, [pc, #32]	; (80032f8 <MX_USB_DEVICE_Init+0x30>)
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff fa1e 	bl	800271a <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80032de:	4620      	mov	r0, r4
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <MX_USB_DEVICE_Init+0x34>)
 80032e2:	f7ff f9c6 	bl	8002672 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80032e6:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80032ec:	f7ff ba1c 	b.w	8002728 <USBD_Start>
 80032f0:	20000488 	.word	0x20000488
 80032f4:	2000012c 	.word	0x2000012c
 80032f8:	20000008 	.word	0x20000008
 80032fc:	2000011c 	.word	0x2000011c

08003300 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003300:	2000      	movs	r0, #0
 8003302:	4770      	bx	lr

08003304 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003304:	2000      	movs	r0, #0
 8003306:	4770      	bx	lr

08003308 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003308:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN 6 */
  USB_Receive_Callback(Buf);

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800330a:	4c06      	ldr	r4, [pc, #24]	; (8003324 <CDC_Receive_FS+0x1c>)
{
 800330c:	4605      	mov	r5, r0
  USB_Receive_Callback(Buf);
 800330e:	f7ff fd01 	bl	8002d14 <USB_Receive_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003312:	4629      	mov	r1, r5
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff f9bb 	bl	8002690 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800331a:	4620      	mov	r0, r4
 800331c:	f7ff f9d5 	bl	80026ca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003320:	2000      	movs	r0, #0
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000488 	.word	0x20000488

08003328 <CDC_Init_FS>:
{
 8003328:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800332a:	4c06      	ldr	r4, [pc, #24]	; (8003344 <CDC_Init_FS+0x1c>)
 800332c:	4906      	ldr	r1, [pc, #24]	; (8003348 <CDC_Init_FS+0x20>)
 800332e:	2200      	movs	r2, #0
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff f9a5 	bl	8002680 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003336:	4905      	ldr	r1, [pc, #20]	; (800334c <CDC_Init_FS+0x24>)
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff f9a9 	bl	8002690 <USBD_CDC_SetRxBuffer>
}
 800333e:	2000      	movs	r0, #0
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	20000488 	.word	0x20000488
 8003348:	20000a94 	.word	0x20000a94
 800334c:	200006ac 	.word	0x200006ac

08003350 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003350:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003352:	4c09      	ldr	r4, [pc, #36]	; (8003378 <CDC_Transmit_FS+0x28>)
 8003354:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8003358:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 800335c:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 800335e:	b943      	cbnz	r3, 8003372 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003360:	4601      	mov	r1, r0
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff f98c 	bl	8002680 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003368:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800336e:	f7ff b995 	b.w	800269c <USBD_CDC_TransmitPacket>
}
 8003372:	2001      	movs	r0, #1
 8003374:	bd10      	pop	{r4, pc}
 8003376:	bf00      	nop
 8003378:	20000488 	.word	0x20000488

0800337c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800337c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800337e:	6802      	ldr	r2, [r0, #0]
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_PCD_MspInit+0x54>)
 8003382:	429a      	cmp	r2, r3
{
 8003384:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB)
 8003386:	d121      	bne.n	80033cc <HAL_PCD_MspInit+0x50>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8003388:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800338c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003392:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003396:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800339a:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80033a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a4:	f7fd f854 	bl	8000450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_PCD_MspInit+0x58>)
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80033b0:	61d9      	str	r1, [r3, #28]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b8:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80033ba:	2014      	movs	r0, #20
 80033bc:	4622      	mov	r2, r4
 80033be:	4621      	mov	r1, r4
    __HAL_RCC_USB_CLK_ENABLE();
 80033c0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80033c2:	f7fc ffcb 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80033c6:	2014      	movs	r0, #20
 80033c8:	f7fc fffc 	bl	80003c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80033cc:	b006      	add	sp, #24
 80033ce:	bd10      	pop	{r4, pc}
 80033d0:	40005c00 	.word	0x40005c00
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80033d8:	f500 715d 	add.w	r1, r0, #884	; 0x374
 80033dc:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80033e0:	f7ff b9b9 	b.w	8002756 <USBD_LL_SetupStage>

080033e4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80033e4:	231c      	movs	r3, #28
 80033e6:	fb03 0301 	mla	r3, r3, r1, r0
 80033ea:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 80033ee:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80033f2:	f7ff b9dd 	b.w	80027b0 <USBD_LL_DataOutStage>

080033f6 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80033f6:	231c      	movs	r3, #28
 80033f8:	fb03 0301 	mla	r3, r3, r1, r0
 80033fc:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	f7ff ba07 	b.w	8002814 <USBD_LL_DataInStage>

08003406 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003406:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 800340a:	f7ff ba83 	b.w	8002914 <USBD_LL_SOF>

0800340e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003412:	2101      	movs	r1, #1
 8003414:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8003418:	f7ff fa6a 	bl	80028f0 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800341c:	f8d4 03a4 	ldr.w	r0, [r4, #932]	; 0x3a4
}
 8003420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003424:	f7ff ba45 	b.w	80028b2 <USBD_LL_Reset>

08003428 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800342c:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8003430:	f7ff fa61 	bl	80028f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003434:	69a3      	ldr	r3, [r4, #24]
 8003436:	b123      	cbz	r3, 8003442 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <HAL_PCD_SuspendCallback+0x1c>)
 800343a:	6913      	ldr	r3, [r2, #16]
 800343c:	f043 0306 	orr.w	r3, r3, #6
 8003440:	6113      	str	r3, [r2, #16]
 8003442:	bd10      	pop	{r4, pc}
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003448:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 800344c:	f7ff ba5c 	b.w	8002908 <USBD_LL_Resume>

08003450 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003450:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <USBD_LL_Init+0x7c>)
{
 8003454:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003456:	481e      	ldr	r0, [pc, #120]	; (80034d0 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003458:	2308      	movs	r3, #8
 800345a:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_FS.pData = pdev;
 800345e:	f8c0 43a4 	str.w	r4, [r0, #932]	; 0x3a4
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003462:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003464:	2202      	movs	r2, #2
  pdev->pData = &hpcd_USB_FS;
 8003466:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800346a:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800346c:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800346e:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003470:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003472:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003474:	f7fd f8b3 	bl	80005de <HAL_PCD_Init>
 8003478:	b108      	cbz	r0, 800347e <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 800347a:	f7ff fd3b 	bl	8002ef4 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800347e:	2200      	movs	r2, #0
 8003480:	4611      	mov	r1, r2
 8003482:	2318      	movs	r3, #24
 8003484:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003488:	f7fd ff93 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800348c:	2358      	movs	r3, #88	; 0x58
 800348e:	2200      	movs	r2, #0
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003496:	f7fd ff8c 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	2200      	movs	r2, #0
 800349e:	2181      	movs	r1, #129	; 0x81
 80034a0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80034a4:	f7fd ff85 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80034a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80034ac:	2200      	movs	r2, #0
 80034ae:	2101      	movs	r1, #1
 80034b0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80034b4:	f7fd ff7d 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80034b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034bc:	2200      	movs	r2, #0
 80034be:	2182      	movs	r1, #130	; 0x82
 80034c0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80034c4:	f7fd ff75 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80034c8:	2000      	movs	r0, #0
 80034ca:	bd10      	pop	{r4, pc}
 80034cc:	40005c00 	.word	0x40005c00
 80034d0:	20000e7c 	.word	0x20000e7c

080034d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80034d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80034d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034da:	f7fd f8d4 	bl	8000686 <HAL_PCD_Start>
 80034de:	2803      	cmp	r0, #3
 80034e0:	bf9a      	itte	ls
 80034e2:	4b02      	ldrls	r3, [pc, #8]	; (80034ec <USBD_LL_Start+0x18>)
 80034e4:	5c18      	ldrbls	r0, [r3, r0]
 80034e6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80034e8:	bd08      	pop	{r3, pc}
 80034ea:	bf00      	nop
 80034ec:	0800414e 	.word	0x0800414e

080034f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80034f0:	b510      	push	{r4, lr}
 80034f2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80034f4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034f8:	4613      	mov	r3, r2
 80034fa:	4622      	mov	r2, r4
 80034fc:	f7fd f8e0 	bl	80006c0 <HAL_PCD_EP_Open>
 8003500:	2803      	cmp	r0, #3
 8003502:	bf9a      	itte	ls
 8003504:	4b01      	ldrls	r3, [pc, #4]	; (800350c <USBD_LL_OpenEP+0x1c>)
 8003506:	5c18      	ldrbls	r0, [r3, r0]
 8003508:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800350a:	bd10      	pop	{r4, pc}
 800350c:	0800414e 	.word	0x0800414e

08003510 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003510:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003512:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003516:	f7fd fa6b 	bl	80009f0 <HAL_PCD_EP_Close>
 800351a:	2803      	cmp	r0, #3
 800351c:	bf9a      	itte	ls
 800351e:	4b02      	ldrls	r3, [pc, #8]	; (8003528 <USBD_LL_CloseEP+0x18>)
 8003520:	5c18      	ldrbls	r0, [r3, r0]
 8003522:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003524:	bd08      	pop	{r3, pc}
 8003526:	bf00      	nop
 8003528:	0800414e 	.word	0x0800414e

0800352c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800352c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800352e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003532:	f7fd fe89 	bl	8001248 <HAL_PCD_EP_SetStall>
 8003536:	2803      	cmp	r0, #3
 8003538:	bf9a      	itte	ls
 800353a:	4b02      	ldrls	r3, [pc, #8]	; (8003544 <USBD_LL_StallEP+0x18>)
 800353c:	5c18      	ldrbls	r0, [r3, r0]
 800353e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003540:	bd08      	pop	{r3, pc}
 8003542:	bf00      	nop
 8003544:	0800414e 	.word	0x0800414e

08003548 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003548:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800354a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800354e:	f7fd fecc 	bl	80012ea <HAL_PCD_EP_ClrStall>
 8003552:	2803      	cmp	r0, #3
 8003554:	bf9a      	itte	ls
 8003556:	4b02      	ldrls	r3, [pc, #8]	; (8003560 <USBD_LL_ClearStallEP+0x18>)
 8003558:	5c18      	ldrbls	r0, [r3, r0]
 800355a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800355c:	bd08      	pop	{r3, pc}
 800355e:	bf00      	nop
 8003560:	0800414e 	.word	0x0800414e

08003564 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003564:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003568:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800356c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003570:	bf1b      	ittet	ne
 8003572:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003576:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800357a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800357e:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003582:	bf08      	it	eq
 8003584:	f891 01ce 	ldrbeq.w	r0, [r1, #462]	; 0x1ce
  }
}
 8003588:	4770      	bx	lr
	...

0800358c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800358c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800358e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003592:	f7fd f87e 	bl	8000692 <HAL_PCD_SetAddress>
 8003596:	2803      	cmp	r0, #3
 8003598:	bf9a      	itte	ls
 800359a:	4b02      	ldrls	r3, [pc, #8]	; (80035a4 <USBD_LL_SetUSBAddress+0x18>)
 800359c:	5c18      	ldrbls	r0, [r3, r0]
 800359e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80035a0:	bd08      	pop	{r3, pc}
 80035a2:	bf00      	nop
 80035a4:	0800414e 	.word	0x0800414e

080035a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80035a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80035aa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035ae:	f7fd fb85 	bl	8000cbc <HAL_PCD_EP_Transmit>
 80035b2:	2803      	cmp	r0, #3
 80035b4:	bf9a      	itte	ls
 80035b6:	4b02      	ldrls	r3, [pc, #8]	; (80035c0 <USBD_LL_Transmit+0x18>)
 80035b8:	5c18      	ldrbls	r0, [r3, r0]
 80035ba:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80035bc:	bd08      	pop	{r3, pc}
 80035be:	bf00      	nop
 80035c0:	0800414e 	.word	0x0800414e

080035c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80035c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80035c6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035ca:	f7fd faff 	bl	8000bcc <HAL_PCD_EP_Receive>
 80035ce:	2803      	cmp	r0, #3
 80035d0:	bf9a      	itte	ls
 80035d2:	4b02      	ldrls	r3, [pc, #8]	; (80035dc <USBD_LL_PrepareReceive+0x18>)
 80035d4:	5c18      	ldrbls	r0, [r3, r0]
 80035d6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80035d8:	bd08      	pop	{r3, pc}
 80035da:	bf00      	nop
 80035dc:	0800414e 	.word	0x0800414e

080035e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80035e0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80035e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80035e6:	f7fd fb61 	bl	8000cac <HAL_PCD_EP_GetRxCount>
}
 80035ea:	bd08      	pop	{r3, pc}

080035ec <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80035ec:	4800      	ldr	r0, [pc, #0]	; (80035f0 <USBD_static_malloc+0x4>)
 80035ee:	4770      	bx	lr
 80035f0:	200001e4 	.word	0x200001e4

080035f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80035f4:	4770      	bx	lr

080035f6 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80035f6:	4770      	bx	lr

080035f8 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80035f8:	2312      	movs	r3, #18
 80035fa:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80035fc:	4800      	ldr	r0, [pc, #0]	; (8003600 <USBD_FS_DeviceDescriptor+0x8>)
 80035fe:	4770      	bx	lr
 8003600:	20000148 	.word	0x20000148

08003604 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003604:	2304      	movs	r3, #4
 8003606:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003608:	4800      	ldr	r0, [pc, #0]	; (800360c <USBD_FS_LangIDStrDescriptor+0x8>)
 800360a:	4770      	bx	lr
 800360c:	2000015c 	.word	0x2000015c

08003610 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003610:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003612:	4c04      	ldr	r4, [pc, #16]	; (8003624 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003614:	4804      	ldr	r0, [pc, #16]	; (8003628 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003616:	460a      	mov	r2, r1
 8003618:	4621      	mov	r1, r4
 800361a:	f7ff fb1c 	bl	8002c56 <USBD_GetString>
  return USBD_StrDesc;
}
 800361e:	4620      	mov	r0, r4
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	20001224 	.word	0x20001224
 8003628:	0800416b 	.word	0x0800416b

0800362c <USBD_FS_ProductStrDescriptor>:
{
 800362c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800362e:	4c04      	ldr	r4, [pc, #16]	; (8003640 <USBD_FS_ProductStrDescriptor+0x14>)
 8003630:	4804      	ldr	r0, [pc, #16]	; (8003644 <USBD_FS_ProductStrDescriptor+0x18>)
 8003632:	460a      	mov	r2, r1
 8003634:	4621      	mov	r1, r4
 8003636:	f7ff fb0e 	bl	8002c56 <USBD_GetString>
}
 800363a:	4620      	mov	r0, r4
 800363c:	bd10      	pop	{r4, pc}
 800363e:	bf00      	nop
 8003640:	20001224 	.word	0x20001224
 8003644:	0800417e 	.word	0x0800417e

08003648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003648:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800364a:	4c04      	ldr	r4, [pc, #16]	; (800365c <USBD_FS_SerialStrDescriptor+0x14>)
 800364c:	4804      	ldr	r0, [pc, #16]	; (8003660 <USBD_FS_SerialStrDescriptor+0x18>)
 800364e:	460a      	mov	r2, r1
 8003650:	4621      	mov	r1, r4
 8003652:	f7ff fb00 	bl	8002c56 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003656:	4620      	mov	r0, r4
 8003658:	bd10      	pop	{r4, pc}
 800365a:	bf00      	nop
 800365c:	20001224 	.word	0x20001224
 8003660:	08004194 	.word	0x08004194

08003664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003664:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003666:	4c04      	ldr	r4, [pc, #16]	; (8003678 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003668:	4804      	ldr	r0, [pc, #16]	; (800367c <USBD_FS_ConfigStrDescriptor+0x18>)
 800366a:	460a      	mov	r2, r1
 800366c:	4621      	mov	r1, r4
 800366e:	f7ff faf2 	bl	8002c56 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003672:	4620      	mov	r0, r4
 8003674:	bd10      	pop	{r4, pc}
 8003676:	bf00      	nop
 8003678:	20001224 	.word	0x20001224
 800367c:	08004152 	.word	0x08004152

08003680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003680:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003682:	4c04      	ldr	r4, [pc, #16]	; (8003694 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003684:	4804      	ldr	r0, [pc, #16]	; (8003698 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003686:	460a      	mov	r2, r1
 8003688:	4621      	mov	r1, r4
 800368a:	f7ff fae4 	bl	8002c56 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800368e:	4620      	mov	r0, r4
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	20001224 	.word	0x20001224
 8003698:	0800415d 	.word	0x0800415d

0800369c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80036a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80036b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
	ldr	r2, =_sbss
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80036ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <LoopForever+0x16>)
	cmp	r2, r3
 80036c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036c6:	f7ff fc83 	bl	8002fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f000 f811 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ce:	f7ff fb8b 	bl	8002de8 <main>

080036d2 <LoopForever>:

LoopForever:
    b LoopForever
 80036d2:	e7fe      	b.n	80036d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036d4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80036d8:	080041dc 	.word	0x080041dc
	ldr	r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036e0:	200001c4 	.word	0x200001c4
	ldr	r2, =_sbss
 80036e4:	200001c4 	.word	0x200001c4
	ldr	r3, = _ebss
 80036e8:	20001428 	.word	0x20001428

080036ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC1_2_IRQHandler>
	...

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4e0d      	ldr	r6, [pc, #52]	; (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f6:	1ba4      	subs	r4, r4, r6
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2500      	movs	r5, #0
 80036fc:	42a5      	cmp	r5, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4e0b      	ldr	r6, [pc, #44]	; (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	; (8003734 <__libc_init_array+0x44>)
 8003704:	f000 fc5c 	bl	8003fc0 <_init>
 8003708:	1ba4      	subs	r4, r4, r6
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2500      	movs	r5, #0
 800370e:	42a5      	cmp	r5, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003722:	4798      	blx	r3
 8003724:	3501      	adds	r5, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	080041d4 	.word	0x080041d4
 800372c:	080041d4 	.word	0x080041d4
 8003730:	080041d4 	.word	0x080041d4
 8003734:	080041d8 	.word	0x080041d8

08003738 <memset>:
 8003738:	4402      	add	r2, r0
 800373a:	4603      	mov	r3, r0
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	f803 1b01 	strb.w	r1, [r3], #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <sniprintf>:
 8003748:	b40c      	push	{r2, r3}
 800374a:	b530      	push	{r4, r5, lr}
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <sniprintf+0x64>)
 800374e:	1e0c      	subs	r4, r1, #0
 8003750:	b09d      	sub	sp, #116	; 0x74
 8003752:	681d      	ldr	r5, [r3, #0]
 8003754:	da08      	bge.n	8003768 <sniprintf+0x20>
 8003756:	238b      	movs	r3, #139	; 0x8b
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800375e:	b01d      	add	sp, #116	; 0x74
 8003760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003764:	b002      	add	sp, #8
 8003766:	4770      	bx	lr
 8003768:	f44f 7302 	mov.w	r3, #520	; 0x208
 800376c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003770:	bf14      	ite	ne
 8003772:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003776:	4623      	moveq	r3, r4
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003780:	9002      	str	r0, [sp, #8]
 8003782:	9006      	str	r0, [sp, #24]
 8003784:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800378a:	ab21      	add	r3, sp, #132	; 0x84
 800378c:	a902      	add	r1, sp, #8
 800378e:	4628      	mov	r0, r5
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f000 f869 	bl	8003868 <_svfiprintf_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	bfbc      	itt	lt
 800379a:	238b      	movlt	r3, #139	; 0x8b
 800379c:	602b      	strlt	r3, [r5, #0]
 800379e:	2c00      	cmp	r4, #0
 80037a0:	d0dd      	beq.n	800375e <sniprintf+0x16>
 80037a2:	9b02      	ldr	r3, [sp, #8]
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e7d9      	b.n	800375e <sniprintf+0x16>
 80037aa:	bf00      	nop
 80037ac:	20000160 	.word	0x20000160

080037b0 <__ssputs_r>:
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	688e      	ldr	r6, [r1, #8]
 80037b6:	429e      	cmp	r6, r3
 80037b8:	4682      	mov	sl, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	4691      	mov	r9, r2
 80037be:	4698      	mov	r8, r3
 80037c0:	d835      	bhi.n	800382e <__ssputs_r+0x7e>
 80037c2:	898a      	ldrh	r2, [r1, #12]
 80037c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037c8:	d031      	beq.n	800382e <__ssputs_r+0x7e>
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	6909      	ldr	r1, [r1, #16]
 80037ce:	1a6f      	subs	r7, r5, r1
 80037d0:	6965      	ldr	r5, [r4, #20]
 80037d2:	2302      	movs	r3, #2
 80037d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80037dc:	f108 0301 	add.w	r3, r8, #1
 80037e0:	443b      	add	r3, r7
 80037e2:	429d      	cmp	r5, r3
 80037e4:	bf38      	it	cc
 80037e6:	461d      	movcc	r5, r3
 80037e8:	0553      	lsls	r3, r2, #21
 80037ea:	d531      	bpl.n	8003850 <__ssputs_r+0xa0>
 80037ec:	4629      	mov	r1, r5
 80037ee:	f000 fb39 	bl	8003e64 <_malloc_r>
 80037f2:	4606      	mov	r6, r0
 80037f4:	b950      	cbnz	r0, 800380c <__ssputs_r+0x5c>
 80037f6:	230c      	movs	r3, #12
 80037f8:	f8ca 3000 	str.w	r3, [sl]
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800380c:	463a      	mov	r2, r7
 800380e:	6921      	ldr	r1, [r4, #16]
 8003810:	f000 fab4 	bl	8003d7c <memcpy>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800381a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	6126      	str	r6, [r4, #16]
 8003822:	6165      	str	r5, [r4, #20]
 8003824:	443e      	add	r6, r7
 8003826:	1bed      	subs	r5, r5, r7
 8003828:	6026      	str	r6, [r4, #0]
 800382a:	60a5      	str	r5, [r4, #8]
 800382c:	4646      	mov	r6, r8
 800382e:	4546      	cmp	r6, r8
 8003830:	bf28      	it	cs
 8003832:	4646      	movcs	r6, r8
 8003834:	4632      	mov	r2, r6
 8003836:	4649      	mov	r1, r9
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	f000 faaa 	bl	8003d92 <memmove>
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	1b9b      	subs	r3, r3, r6
 8003842:	60a3      	str	r3, [r4, #8]
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	441e      	add	r6, r3
 8003848:	6026      	str	r6, [r4, #0]
 800384a:	2000      	movs	r0, #0
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	462a      	mov	r2, r5
 8003852:	f000 fb65 	bl	8003f20 <_realloc_r>
 8003856:	4606      	mov	r6, r0
 8003858:	2800      	cmp	r0, #0
 800385a:	d1e1      	bne.n	8003820 <__ssputs_r+0x70>
 800385c:	6921      	ldr	r1, [r4, #16]
 800385e:	4650      	mov	r0, sl
 8003860:	f000 fab2 	bl	8003dc8 <_free_r>
 8003864:	e7c7      	b.n	80037f6 <__ssputs_r+0x46>
	...

08003868 <_svfiprintf_r>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	b09d      	sub	sp, #116	; 0x74
 800386e:	4680      	mov	r8, r0
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	898b      	ldrh	r3, [r1, #12]
 8003874:	061c      	lsls	r4, r3, #24
 8003876:	460d      	mov	r5, r1
 8003878:	4616      	mov	r6, r2
 800387a:	d50f      	bpl.n	800389c <_svfiprintf_r+0x34>
 800387c:	690b      	ldr	r3, [r1, #16]
 800387e:	b96b      	cbnz	r3, 800389c <_svfiprintf_r+0x34>
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	f000 faef 	bl	8003e64 <_malloc_r>
 8003886:	6028      	str	r0, [r5, #0]
 8003888:	6128      	str	r0, [r5, #16]
 800388a:	b928      	cbnz	r0, 8003898 <_svfiprintf_r+0x30>
 800388c:	230c      	movs	r3, #12
 800388e:	f8c8 3000 	str.w	r3, [r8]
 8003892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003896:	e0c5      	b.n	8003a24 <_svfiprintf_r+0x1bc>
 8003898:	2340      	movs	r3, #64	; 0x40
 800389a:	616b      	str	r3, [r5, #20]
 800389c:	2300      	movs	r3, #0
 800389e:	9309      	str	r3, [sp, #36]	; 0x24
 80038a0:	2320      	movs	r3, #32
 80038a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038a6:	2330      	movs	r3, #48	; 0x30
 80038a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ac:	f04f 0b01 	mov.w	fp, #1
 80038b0:	4637      	mov	r7, r6
 80038b2:	463c      	mov	r4, r7
 80038b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d13c      	bne.n	8003936 <_svfiprintf_r+0xce>
 80038bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80038c0:	d00b      	beq.n	80038da <_svfiprintf_r+0x72>
 80038c2:	4653      	mov	r3, sl
 80038c4:	4632      	mov	r2, r6
 80038c6:	4629      	mov	r1, r5
 80038c8:	4640      	mov	r0, r8
 80038ca:	f7ff ff71 	bl	80037b0 <__ssputs_r>
 80038ce:	3001      	adds	r0, #1
 80038d0:	f000 80a3 	beq.w	8003a1a <_svfiprintf_r+0x1b2>
 80038d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038d6:	4453      	add	r3, sl
 80038d8:	9309      	str	r3, [sp, #36]	; 0x24
 80038da:	783b      	ldrb	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 809c 	beq.w	8003a1a <_svfiprintf_r+0x1b2>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038e8:	9304      	str	r3, [sp, #16]
 80038ea:	9307      	str	r3, [sp, #28]
 80038ec:	9205      	str	r2, [sp, #20]
 80038ee:	9306      	str	r3, [sp, #24]
 80038f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038f4:	931a      	str	r3, [sp, #104]	; 0x68
 80038f6:	2205      	movs	r2, #5
 80038f8:	7821      	ldrb	r1, [r4, #0]
 80038fa:	4850      	ldr	r0, [pc, #320]	; (8003a3c <_svfiprintf_r+0x1d4>)
 80038fc:	f7fc fc70 	bl	80001e0 <memchr>
 8003900:	1c67      	adds	r7, r4, #1
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	b9d8      	cbnz	r0, 800393e <_svfiprintf_r+0xd6>
 8003906:	06d9      	lsls	r1, r3, #27
 8003908:	bf44      	itt	mi
 800390a:	2220      	movmi	r2, #32
 800390c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003910:	071a      	lsls	r2, r3, #28
 8003912:	bf44      	itt	mi
 8003914:	222b      	movmi	r2, #43	; 0x2b
 8003916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800391a:	7822      	ldrb	r2, [r4, #0]
 800391c:	2a2a      	cmp	r2, #42	; 0x2a
 800391e:	d016      	beq.n	800394e <_svfiprintf_r+0xe6>
 8003920:	9a07      	ldr	r2, [sp, #28]
 8003922:	2100      	movs	r1, #0
 8003924:	200a      	movs	r0, #10
 8003926:	4627      	mov	r7, r4
 8003928:	3401      	adds	r4, #1
 800392a:	783b      	ldrb	r3, [r7, #0]
 800392c:	3b30      	subs	r3, #48	; 0x30
 800392e:	2b09      	cmp	r3, #9
 8003930:	d951      	bls.n	80039d6 <_svfiprintf_r+0x16e>
 8003932:	b1c9      	cbz	r1, 8003968 <_svfiprintf_r+0x100>
 8003934:	e011      	b.n	800395a <_svfiprintf_r+0xf2>
 8003936:	2b25      	cmp	r3, #37	; 0x25
 8003938:	d0c0      	beq.n	80038bc <_svfiprintf_r+0x54>
 800393a:	4627      	mov	r7, r4
 800393c:	e7b9      	b.n	80038b2 <_svfiprintf_r+0x4a>
 800393e:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <_svfiprintf_r+0x1d4>)
 8003940:	1a80      	subs	r0, r0, r2
 8003942:	fa0b f000 	lsl.w	r0, fp, r0
 8003946:	4318      	orrs	r0, r3
 8003948:	9004      	str	r0, [sp, #16]
 800394a:	463c      	mov	r4, r7
 800394c:	e7d3      	b.n	80038f6 <_svfiprintf_r+0x8e>
 800394e:	9a03      	ldr	r2, [sp, #12]
 8003950:	1d11      	adds	r1, r2, #4
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	9103      	str	r1, [sp, #12]
 8003956:	2a00      	cmp	r2, #0
 8003958:	db01      	blt.n	800395e <_svfiprintf_r+0xf6>
 800395a:	9207      	str	r2, [sp, #28]
 800395c:	e004      	b.n	8003968 <_svfiprintf_r+0x100>
 800395e:	4252      	negs	r2, r2
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	9207      	str	r2, [sp, #28]
 8003966:	9304      	str	r3, [sp, #16]
 8003968:	783b      	ldrb	r3, [r7, #0]
 800396a:	2b2e      	cmp	r3, #46	; 0x2e
 800396c:	d10e      	bne.n	800398c <_svfiprintf_r+0x124>
 800396e:	787b      	ldrb	r3, [r7, #1]
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	f107 0101 	add.w	r1, r7, #1
 8003976:	d132      	bne.n	80039de <_svfiprintf_r+0x176>
 8003978:	9b03      	ldr	r3, [sp, #12]
 800397a:	1d1a      	adds	r2, r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	9203      	str	r2, [sp, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	bfb8      	it	lt
 8003984:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003988:	3702      	adds	r7, #2
 800398a:	9305      	str	r3, [sp, #20]
 800398c:	4c2c      	ldr	r4, [pc, #176]	; (8003a40 <_svfiprintf_r+0x1d8>)
 800398e:	7839      	ldrb	r1, [r7, #0]
 8003990:	2203      	movs	r2, #3
 8003992:	4620      	mov	r0, r4
 8003994:	f7fc fc24 	bl	80001e0 <memchr>
 8003998:	b138      	cbz	r0, 80039aa <_svfiprintf_r+0x142>
 800399a:	2340      	movs	r3, #64	; 0x40
 800399c:	1b00      	subs	r0, r0, r4
 800399e:	fa03 f000 	lsl.w	r0, r3, r0
 80039a2:	9b04      	ldr	r3, [sp, #16]
 80039a4:	4303      	orrs	r3, r0
 80039a6:	9304      	str	r3, [sp, #16]
 80039a8:	3701      	adds	r7, #1
 80039aa:	7839      	ldrb	r1, [r7, #0]
 80039ac:	4825      	ldr	r0, [pc, #148]	; (8003a44 <_svfiprintf_r+0x1dc>)
 80039ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b2:	2206      	movs	r2, #6
 80039b4:	1c7e      	adds	r6, r7, #1
 80039b6:	f7fc fc13 	bl	80001e0 <memchr>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d035      	beq.n	8003a2a <_svfiprintf_r+0x1c2>
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <_svfiprintf_r+0x1e0>)
 80039c0:	b9fb      	cbnz	r3, 8003a02 <_svfiprintf_r+0x19a>
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	3307      	adds	r3, #7
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	3308      	adds	r3, #8
 80039cc:	9303      	str	r3, [sp, #12]
 80039ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d0:	444b      	add	r3, r9
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
 80039d4:	e76c      	b.n	80038b0 <_svfiprintf_r+0x48>
 80039d6:	fb00 3202 	mla	r2, r0, r2, r3
 80039da:	2101      	movs	r1, #1
 80039dc:	e7a3      	b.n	8003926 <_svfiprintf_r+0xbe>
 80039de:	2300      	movs	r3, #0
 80039e0:	9305      	str	r3, [sp, #20]
 80039e2:	4618      	mov	r0, r3
 80039e4:	240a      	movs	r4, #10
 80039e6:	460f      	mov	r7, r1
 80039e8:	3101      	adds	r1, #1
 80039ea:	783a      	ldrb	r2, [r7, #0]
 80039ec:	3a30      	subs	r2, #48	; 0x30
 80039ee:	2a09      	cmp	r2, #9
 80039f0:	d903      	bls.n	80039fa <_svfiprintf_r+0x192>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ca      	beq.n	800398c <_svfiprintf_r+0x124>
 80039f6:	9005      	str	r0, [sp, #20]
 80039f8:	e7c8      	b.n	800398c <_svfiprintf_r+0x124>
 80039fa:	fb04 2000 	mla	r0, r4, r0, r2
 80039fe:	2301      	movs	r3, #1
 8003a00:	e7f1      	b.n	80039e6 <_svfiprintf_r+0x17e>
 8003a02:	ab03      	add	r3, sp, #12
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	462a      	mov	r2, r5
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <_svfiprintf_r+0x1e4>)
 8003a0a:	a904      	add	r1, sp, #16
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	f3af 8000 	nop.w
 8003a12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003a16:	4681      	mov	r9, r0
 8003a18:	d1d9      	bne.n	80039ce <_svfiprintf_r+0x166>
 8003a1a:	89ab      	ldrh	r3, [r5, #12]
 8003a1c:	065b      	lsls	r3, r3, #25
 8003a1e:	f53f af38 	bmi.w	8003892 <_svfiprintf_r+0x2a>
 8003a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a24:	b01d      	add	sp, #116	; 0x74
 8003a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2a:	ab03      	add	r3, sp, #12
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	462a      	mov	r2, r5
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <_svfiprintf_r+0x1e4>)
 8003a32:	a904      	add	r1, sp, #16
 8003a34:	4640      	mov	r0, r8
 8003a36:	f000 f881 	bl	8003b3c <_printf_i>
 8003a3a:	e7ea      	b.n	8003a12 <_svfiprintf_r+0x1aa>
 8003a3c:	080041a1 	.word	0x080041a1
 8003a40:	080041a7 	.word	0x080041a7
 8003a44:	080041ab 	.word	0x080041ab
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	080037b1 	.word	0x080037b1

08003a50 <_printf_common>:
 8003a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a54:	4691      	mov	r9, r2
 8003a56:	461f      	mov	r7, r3
 8003a58:	688a      	ldr	r2, [r1, #8]
 8003a5a:	690b      	ldr	r3, [r1, #16]
 8003a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bfb8      	it	lt
 8003a64:	4613      	movlt	r3, r2
 8003a66:	f8c9 3000 	str.w	r3, [r9]
 8003a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a6e:	4606      	mov	r6, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	b112      	cbz	r2, 8003a7a <_printf_common+0x2a>
 8003a74:	3301      	adds	r3, #1
 8003a76:	f8c9 3000 	str.w	r3, [r9]
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	0699      	lsls	r1, r3, #26
 8003a7e:	bf42      	ittt	mi
 8003a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a84:	3302      	addmi	r3, #2
 8003a86:	f8c9 3000 	strmi.w	r3, [r9]
 8003a8a:	6825      	ldr	r5, [r4, #0]
 8003a8c:	f015 0506 	ands.w	r5, r5, #6
 8003a90:	d107      	bne.n	8003aa2 <_printf_common+0x52>
 8003a92:	f104 0a19 	add.w	sl, r4, #25
 8003a96:	68e3      	ldr	r3, [r4, #12]
 8003a98:	f8d9 2000 	ldr.w	r2, [r9]
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	db29      	blt.n	8003af6 <_printf_common+0xa6>
 8003aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	3300      	adds	r3, #0
 8003aaa:	bf18      	it	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	0692      	lsls	r2, r2, #26
 8003ab0:	d42e      	bmi.n	8003b10 <_printf_common+0xc0>
 8003ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab6:	4639      	mov	r1, r7
 8003ab8:	4630      	mov	r0, r6
 8003aba:	47c0      	blx	r8
 8003abc:	3001      	adds	r0, #1
 8003abe:	d021      	beq.n	8003b04 <_printf_common+0xb4>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	68e5      	ldr	r5, [r4, #12]
 8003ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ac8:	f003 0306 	and.w	r3, r3, #6
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	bf08      	it	eq
 8003ad0:	1aad      	subeq	r5, r5, r2
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	bf0c      	ite	eq
 8003ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003adc:	2500      	movne	r5, #0
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	bfc4      	itt	gt
 8003ae2:	1a9b      	subgt	r3, r3, r2
 8003ae4:	18ed      	addgt	r5, r5, r3
 8003ae6:	f04f 0900 	mov.w	r9, #0
 8003aea:	341a      	adds	r4, #26
 8003aec:	454d      	cmp	r5, r9
 8003aee:	d11b      	bne.n	8003b28 <_printf_common+0xd8>
 8003af0:	2000      	movs	r0, #0
 8003af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af6:	2301      	movs	r3, #1
 8003af8:	4652      	mov	r2, sl
 8003afa:	4639      	mov	r1, r7
 8003afc:	4630      	mov	r0, r6
 8003afe:	47c0      	blx	r8
 8003b00:	3001      	adds	r0, #1
 8003b02:	d103      	bne.n	8003b0c <_printf_common+0xbc>
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b0c:	3501      	adds	r5, #1
 8003b0e:	e7c2      	b.n	8003a96 <_printf_common+0x46>
 8003b10:	18e1      	adds	r1, r4, r3
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	2030      	movs	r0, #48	; 0x30
 8003b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b1a:	4422      	add	r2, r4
 8003b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b24:	3302      	adds	r3, #2
 8003b26:	e7c4      	b.n	8003ab2 <_printf_common+0x62>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4622      	mov	r2, r4
 8003b2c:	4639      	mov	r1, r7
 8003b2e:	4630      	mov	r0, r6
 8003b30:	47c0      	blx	r8
 8003b32:	3001      	adds	r0, #1
 8003b34:	d0e6      	beq.n	8003b04 <_printf_common+0xb4>
 8003b36:	f109 0901 	add.w	r9, r9, #1
 8003b3a:	e7d7      	b.n	8003aec <_printf_common+0x9c>

08003b3c <_printf_i>:
 8003b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b40:	4617      	mov	r7, r2
 8003b42:	7e0a      	ldrb	r2, [r1, #24]
 8003b44:	b085      	sub	sp, #20
 8003b46:	2a6e      	cmp	r2, #110	; 0x6e
 8003b48:	4698      	mov	r8, r3
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003b54:	f000 80bc 	beq.w	8003cd0 <_printf_i+0x194>
 8003b58:	d81a      	bhi.n	8003b90 <_printf_i+0x54>
 8003b5a:	2a63      	cmp	r2, #99	; 0x63
 8003b5c:	d02e      	beq.n	8003bbc <_printf_i+0x80>
 8003b5e:	d80a      	bhi.n	8003b76 <_printf_i+0x3a>
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	f000 80c8 	beq.w	8003cf6 <_printf_i+0x1ba>
 8003b66:	2a58      	cmp	r2, #88	; 0x58
 8003b68:	f000 808a 	beq.w	8003c80 <_printf_i+0x144>
 8003b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b74:	e02a      	b.n	8003bcc <_printf_i+0x90>
 8003b76:	2a64      	cmp	r2, #100	; 0x64
 8003b78:	d001      	beq.n	8003b7e <_printf_i+0x42>
 8003b7a:	2a69      	cmp	r2, #105	; 0x69
 8003b7c:	d1f6      	bne.n	8003b6c <_printf_i+0x30>
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b86:	d023      	beq.n	8003bd0 <_printf_i+0x94>
 8003b88:	1d11      	adds	r1, r2, #4
 8003b8a:	6019      	str	r1, [r3, #0]
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	e027      	b.n	8003be0 <_printf_i+0xa4>
 8003b90:	2a73      	cmp	r2, #115	; 0x73
 8003b92:	f000 80b4 	beq.w	8003cfe <_printf_i+0x1c2>
 8003b96:	d808      	bhi.n	8003baa <_printf_i+0x6e>
 8003b98:	2a6f      	cmp	r2, #111	; 0x6f
 8003b9a:	d02a      	beq.n	8003bf2 <_printf_i+0xb6>
 8003b9c:	2a70      	cmp	r2, #112	; 0x70
 8003b9e:	d1e5      	bne.n	8003b6c <_printf_i+0x30>
 8003ba0:	680a      	ldr	r2, [r1, #0]
 8003ba2:	f042 0220 	orr.w	r2, r2, #32
 8003ba6:	600a      	str	r2, [r1, #0]
 8003ba8:	e003      	b.n	8003bb2 <_printf_i+0x76>
 8003baa:	2a75      	cmp	r2, #117	; 0x75
 8003bac:	d021      	beq.n	8003bf2 <_printf_i+0xb6>
 8003bae:	2a78      	cmp	r2, #120	; 0x78
 8003bb0:	d1dc      	bne.n	8003b6c <_printf_i+0x30>
 8003bb2:	2278      	movs	r2, #120	; 0x78
 8003bb4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003bb8:	496e      	ldr	r1, [pc, #440]	; (8003d74 <_printf_i+0x238>)
 8003bba:	e064      	b.n	8003c86 <_printf_i+0x14a>
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003bc2:	1d11      	adds	r1, r2, #4
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a3      	b.n	8003d18 <_printf_i+0x1dc>
 8003bd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bd4:	f102 0104 	add.w	r1, r2, #4
 8003bd8:	6019      	str	r1, [r3, #0]
 8003bda:	d0d7      	beq.n	8003b8c <_printf_i+0x50>
 8003bdc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	da03      	bge.n	8003bec <_printf_i+0xb0>
 8003be4:	222d      	movs	r2, #45	; 0x2d
 8003be6:	425b      	negs	r3, r3
 8003be8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bec:	4962      	ldr	r1, [pc, #392]	; (8003d78 <_printf_i+0x23c>)
 8003bee:	220a      	movs	r2, #10
 8003bf0:	e017      	b.n	8003c22 <_printf_i+0xe6>
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bfa:	d003      	beq.n	8003c04 <_printf_i+0xc8>
 8003bfc:	1d08      	adds	r0, r1, #4
 8003bfe:	6018      	str	r0, [r3, #0]
 8003c00:	680b      	ldr	r3, [r1, #0]
 8003c02:	e006      	b.n	8003c12 <_printf_i+0xd6>
 8003c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c08:	f101 0004 	add.w	r0, r1, #4
 8003c0c:	6018      	str	r0, [r3, #0]
 8003c0e:	d0f7      	beq.n	8003c00 <_printf_i+0xc4>
 8003c10:	880b      	ldrh	r3, [r1, #0]
 8003c12:	4959      	ldr	r1, [pc, #356]	; (8003d78 <_printf_i+0x23c>)
 8003c14:	2a6f      	cmp	r2, #111	; 0x6f
 8003c16:	bf14      	ite	ne
 8003c18:	220a      	movne	r2, #10
 8003c1a:	2208      	moveq	r2, #8
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003c22:	6865      	ldr	r5, [r4, #4]
 8003c24:	60a5      	str	r5, [r4, #8]
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	f2c0 809c 	blt.w	8003d64 <_printf_i+0x228>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	f020 0004 	bic.w	r0, r0, #4
 8003c32:	6020      	str	r0, [r4, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13f      	bne.n	8003cb8 <_printf_i+0x17c>
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	f040 8095 	bne.w	8003d68 <_printf_i+0x22c>
 8003c3e:	4675      	mov	r5, lr
 8003c40:	2a08      	cmp	r2, #8
 8003c42:	d10b      	bne.n	8003c5c <_printf_i+0x120>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	07da      	lsls	r2, r3, #31
 8003c48:	d508      	bpl.n	8003c5c <_printf_i+0x120>
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	6862      	ldr	r2, [r4, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	bfde      	ittt	le
 8003c52:	2330      	movle	r3, #48	; 0x30
 8003c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c5c:	ebae 0305 	sub.w	r3, lr, r5
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	f8cd 8000 	str.w	r8, [sp]
 8003c66:	463b      	mov	r3, r7
 8003c68:	aa03      	add	r2, sp, #12
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	f7ff feef 	bl	8003a50 <_printf_common>
 8003c72:	3001      	adds	r0, #1
 8003c74:	d155      	bne.n	8003d22 <_printf_i+0x1e6>
 8003c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c7a:	b005      	add	sp, #20
 8003c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c80:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c84:	493c      	ldr	r1, [pc, #240]	; (8003d78 <_printf_i+0x23c>)
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c8e:	f100 0504 	add.w	r5, r0, #4
 8003c92:	601d      	str	r5, [r3, #0]
 8003c94:	d001      	beq.n	8003c9a <_printf_i+0x15e>
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	e002      	b.n	8003ca0 <_printf_i+0x164>
 8003c9a:	0655      	lsls	r5, r2, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0x15a>
 8003c9e:	8803      	ldrh	r3, [r0, #0]
 8003ca0:	07d0      	lsls	r0, r2, #31
 8003ca2:	bf44      	itt	mi
 8003ca4:	f042 0220 	orrmi.w	r2, r2, #32
 8003ca8:	6022      	strmi	r2, [r4, #0]
 8003caa:	b91b      	cbnz	r3, 8003cb4 <_printf_i+0x178>
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	f022 0220 	bic.w	r2, r2, #32
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	e7b1      	b.n	8003c1c <_printf_i+0xe0>
 8003cb8:	4675      	mov	r5, lr
 8003cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cbe:	fb02 3310 	mls	r3, r2, r0, r3
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1f5      	bne.n	8003cba <_printf_i+0x17e>
 8003cce:	e7b7      	b.n	8003c40 <_printf_i+0x104>
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	6949      	ldr	r1, [r1, #20]
 8003cd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cda:	d004      	beq.n	8003ce6 <_printf_i+0x1aa>
 8003cdc:	1d10      	adds	r0, r2, #4
 8003cde:	6018      	str	r0, [r3, #0]
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	6019      	str	r1, [r3, #0]
 8003ce4:	e007      	b.n	8003cf6 <_printf_i+0x1ba>
 8003ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cea:	f102 0004 	add.w	r0, r2, #4
 8003cee:	6018      	str	r0, [r3, #0]
 8003cf0:	6813      	ldr	r3, [r2, #0]
 8003cf2:	d0f6      	beq.n	8003ce2 <_printf_i+0x1a6>
 8003cf4:	8019      	strh	r1, [r3, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	4675      	mov	r5, lr
 8003cfc:	e7b1      	b.n	8003c62 <_printf_i+0x126>
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	1d11      	adds	r1, r2, #4
 8003d02:	6019      	str	r1, [r3, #0]
 8003d04:	6815      	ldr	r5, [r2, #0]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7fc fa68 	bl	80001e0 <memchr>
 8003d10:	b108      	cbz	r0, 8003d16 <_printf_i+0x1da>
 8003d12:	1b40      	subs	r0, r0, r5
 8003d14:	6060      	str	r0, [r4, #4]
 8003d16:	6863      	ldr	r3, [r4, #4]
 8003d18:	6123      	str	r3, [r4, #16]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d20:	e79f      	b.n	8003c62 <_printf_i+0x126>
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	462a      	mov	r2, r5
 8003d26:	4639      	mov	r1, r7
 8003d28:	4630      	mov	r0, r6
 8003d2a:	47c0      	blx	r8
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d0a2      	beq.n	8003c76 <_printf_i+0x13a>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	079b      	lsls	r3, r3, #30
 8003d34:	d507      	bpl.n	8003d46 <_printf_i+0x20a>
 8003d36:	2500      	movs	r5, #0
 8003d38:	f104 0919 	add.w	r9, r4, #25
 8003d3c:	68e3      	ldr	r3, [r4, #12]
 8003d3e:	9a03      	ldr	r2, [sp, #12]
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	429d      	cmp	r5, r3
 8003d44:	db05      	blt.n	8003d52 <_printf_i+0x216>
 8003d46:	68e0      	ldr	r0, [r4, #12]
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	4298      	cmp	r0, r3
 8003d4c:	bfb8      	it	lt
 8003d4e:	4618      	movlt	r0, r3
 8003d50:	e793      	b.n	8003c7a <_printf_i+0x13e>
 8003d52:	2301      	movs	r3, #1
 8003d54:	464a      	mov	r2, r9
 8003d56:	4639      	mov	r1, r7
 8003d58:	4630      	mov	r0, r6
 8003d5a:	47c0      	blx	r8
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d08a      	beq.n	8003c76 <_printf_i+0x13a>
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7eb      	b.n	8003d3c <_printf_i+0x200>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1a7      	bne.n	8003cb8 <_printf_i+0x17c>
 8003d68:	780b      	ldrb	r3, [r1, #0]
 8003d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d72:	e765      	b.n	8003c40 <_printf_i+0x104>
 8003d74:	080041c3 	.word	0x080041c3
 8003d78:	080041b2 	.word	0x080041b2

08003d7c <memcpy>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	1e43      	subs	r3, r0, #1
 8003d80:	440a      	add	r2, r1
 8003d82:	4291      	cmp	r1, r2
 8003d84:	d100      	bne.n	8003d88 <memcpy+0xc>
 8003d86:	bd10      	pop	{r4, pc}
 8003d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d90:	e7f7      	b.n	8003d82 <memcpy+0x6>

08003d92 <memmove>:
 8003d92:	4288      	cmp	r0, r1
 8003d94:	b510      	push	{r4, lr}
 8003d96:	eb01 0302 	add.w	r3, r1, r2
 8003d9a:	d803      	bhi.n	8003da4 <memmove+0x12>
 8003d9c:	1e42      	subs	r2, r0, #1
 8003d9e:	4299      	cmp	r1, r3
 8003da0:	d10c      	bne.n	8003dbc <memmove+0x2a>
 8003da2:	bd10      	pop	{r4, pc}
 8003da4:	4298      	cmp	r0, r3
 8003da6:	d2f9      	bcs.n	8003d9c <memmove+0xa>
 8003da8:	1881      	adds	r1, r0, r2
 8003daa:	1ad2      	subs	r2, r2, r3
 8003dac:	42d3      	cmn	r3, r2
 8003dae:	d100      	bne.n	8003db2 <memmove+0x20>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003db6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003dba:	e7f7      	b.n	8003dac <memmove+0x1a>
 8003dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dc4:	e7eb      	b.n	8003d9e <memmove+0xc>
	...

08003dc8 <_free_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4605      	mov	r5, r0
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d045      	beq.n	8003e5c <_free_r+0x94>
 8003dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd4:	1f0c      	subs	r4, r1, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bfb8      	it	lt
 8003dda:	18e4      	addlt	r4, r4, r3
 8003ddc:	f000 f8d6 	bl	8003f8c <__malloc_lock>
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <_free_r+0x98>)
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	4610      	mov	r0, r2
 8003de6:	b933      	cbnz	r3, 8003df6 <_free_r+0x2e>
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	6014      	str	r4, [r2, #0]
 8003dec:	4628      	mov	r0, r5
 8003dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df2:	f000 b8cc 	b.w	8003f8e <__malloc_unlock>
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	d90c      	bls.n	8003e14 <_free_r+0x4c>
 8003dfa:	6821      	ldr	r1, [r4, #0]
 8003dfc:	1862      	adds	r2, r4, r1
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	bf04      	itt	eq
 8003e02:	681a      	ldreq	r2, [r3, #0]
 8003e04:	685b      	ldreq	r3, [r3, #4]
 8003e06:	6063      	str	r3, [r4, #4]
 8003e08:	bf04      	itt	eq
 8003e0a:	1852      	addeq	r2, r2, r1
 8003e0c:	6022      	streq	r2, [r4, #0]
 8003e0e:	6004      	str	r4, [r0, #0]
 8003e10:	e7ec      	b.n	8003dec <_free_r+0x24>
 8003e12:	4613      	mov	r3, r2
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	b10a      	cbz	r2, 8003e1c <_free_r+0x54>
 8003e18:	42a2      	cmp	r2, r4
 8003e1a:	d9fa      	bls.n	8003e12 <_free_r+0x4a>
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	1858      	adds	r0, r3, r1
 8003e20:	42a0      	cmp	r0, r4
 8003e22:	d10b      	bne.n	8003e3c <_free_r+0x74>
 8003e24:	6820      	ldr	r0, [r4, #0]
 8003e26:	4401      	add	r1, r0
 8003e28:	1858      	adds	r0, r3, r1
 8003e2a:	4282      	cmp	r2, r0
 8003e2c:	6019      	str	r1, [r3, #0]
 8003e2e:	d1dd      	bne.n	8003dec <_free_r+0x24>
 8003e30:	6810      	ldr	r0, [r2, #0]
 8003e32:	6852      	ldr	r2, [r2, #4]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	4401      	add	r1, r0
 8003e38:	6019      	str	r1, [r3, #0]
 8003e3a:	e7d7      	b.n	8003dec <_free_r+0x24>
 8003e3c:	d902      	bls.n	8003e44 <_free_r+0x7c>
 8003e3e:	230c      	movs	r3, #12
 8003e40:	602b      	str	r3, [r5, #0]
 8003e42:	e7d3      	b.n	8003dec <_free_r+0x24>
 8003e44:	6820      	ldr	r0, [r4, #0]
 8003e46:	1821      	adds	r1, r4, r0
 8003e48:	428a      	cmp	r2, r1
 8003e4a:	bf04      	itt	eq
 8003e4c:	6811      	ldreq	r1, [r2, #0]
 8003e4e:	6852      	ldreq	r2, [r2, #4]
 8003e50:	6062      	str	r2, [r4, #4]
 8003e52:	bf04      	itt	eq
 8003e54:	1809      	addeq	r1, r1, r0
 8003e56:	6021      	streq	r1, [r4, #0]
 8003e58:	605c      	str	r4, [r3, #4]
 8003e5a:	e7c7      	b.n	8003dec <_free_r+0x24>
 8003e5c:	bd38      	pop	{r3, r4, r5, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000404 	.word	0x20000404

08003e64 <_malloc_r>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	1ccd      	adds	r5, r1, #3
 8003e68:	f025 0503 	bic.w	r5, r5, #3
 8003e6c:	3508      	adds	r5, #8
 8003e6e:	2d0c      	cmp	r5, #12
 8003e70:	bf38      	it	cc
 8003e72:	250c      	movcc	r5, #12
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	4606      	mov	r6, r0
 8003e78:	db01      	blt.n	8003e7e <_malloc_r+0x1a>
 8003e7a:	42a9      	cmp	r1, r5
 8003e7c:	d903      	bls.n	8003e86 <_malloc_r+0x22>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	2000      	movs	r0, #0
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	f000 f881 	bl	8003f8c <__malloc_lock>
 8003e8a:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <_malloc_r+0xb4>)
 8003e8c:	6814      	ldr	r4, [r2, #0]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	b991      	cbnz	r1, 8003eb8 <_malloc_r+0x54>
 8003e92:	4c22      	ldr	r4, [pc, #136]	; (8003f1c <_malloc_r+0xb8>)
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	b91b      	cbnz	r3, 8003ea0 <_malloc_r+0x3c>
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f867 	bl	8003f6c <_sbrk_r>
 8003e9e:	6020      	str	r0, [r4, #0]
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f000 f862 	bl	8003f6c <_sbrk_r>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d126      	bne.n	8003efa <_malloc_r+0x96>
 8003eac:	230c      	movs	r3, #12
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f000 f86c 	bl	8003f8e <__malloc_unlock>
 8003eb6:	e7e4      	b.n	8003e82 <_malloc_r+0x1e>
 8003eb8:	680b      	ldr	r3, [r1, #0]
 8003eba:	1b5b      	subs	r3, r3, r5
 8003ebc:	d41a      	bmi.n	8003ef4 <_malloc_r+0x90>
 8003ebe:	2b0b      	cmp	r3, #11
 8003ec0:	d90f      	bls.n	8003ee2 <_malloc_r+0x7e>
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	50cd      	str	r5, [r1, r3]
 8003ec6:	18cc      	adds	r4, r1, r3
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f000 f860 	bl	8003f8e <__malloc_unlock>
 8003ece:	f104 000b 	add.w	r0, r4, #11
 8003ed2:	1d23      	adds	r3, r4, #4
 8003ed4:	f020 0007 	bic.w	r0, r0, #7
 8003ed8:	1ac3      	subs	r3, r0, r3
 8003eda:	d01b      	beq.n	8003f14 <_malloc_r+0xb0>
 8003edc:	425a      	negs	r2, r3
 8003ede:	50e2      	str	r2, [r4, r3]
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	428c      	cmp	r4, r1
 8003ee4:	bf0d      	iteet	eq
 8003ee6:	6863      	ldreq	r3, [r4, #4]
 8003ee8:	684b      	ldrne	r3, [r1, #4]
 8003eea:	6063      	strne	r3, [r4, #4]
 8003eec:	6013      	streq	r3, [r2, #0]
 8003eee:	bf18      	it	ne
 8003ef0:	460c      	movne	r4, r1
 8003ef2:	e7e9      	b.n	8003ec8 <_malloc_r+0x64>
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	6849      	ldr	r1, [r1, #4]
 8003ef8:	e7ca      	b.n	8003e90 <_malloc_r+0x2c>
 8003efa:	1cc4      	adds	r4, r0, #3
 8003efc:	f024 0403 	bic.w	r4, r4, #3
 8003f00:	42a0      	cmp	r0, r4
 8003f02:	d005      	beq.n	8003f10 <_malloc_r+0xac>
 8003f04:	1a21      	subs	r1, r4, r0
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f830 	bl	8003f6c <_sbrk_r>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d0cd      	beq.n	8003eac <_malloc_r+0x48>
 8003f10:	6025      	str	r5, [r4, #0]
 8003f12:	e7d9      	b.n	8003ec8 <_malloc_r+0x64>
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	bf00      	nop
 8003f18:	20000404 	.word	0x20000404
 8003f1c:	20000408 	.word	0x20000408

08003f20 <_realloc_r>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	4607      	mov	r7, r0
 8003f24:	4614      	mov	r4, r2
 8003f26:	460e      	mov	r6, r1
 8003f28:	b921      	cbnz	r1, 8003f34 <_realloc_r+0x14>
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f30:	f7ff bf98 	b.w	8003e64 <_malloc_r>
 8003f34:	b922      	cbnz	r2, 8003f40 <_realloc_r+0x20>
 8003f36:	f7ff ff47 	bl	8003dc8 <_free_r>
 8003f3a:	4625      	mov	r5, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f40:	f000 f826 	bl	8003f90 <_malloc_usable_size_r>
 8003f44:	4284      	cmp	r4, r0
 8003f46:	d90f      	bls.n	8003f68 <_realloc_r+0x48>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ff8a 	bl	8003e64 <_malloc_r>
 8003f50:	4605      	mov	r5, r0
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d0f2      	beq.n	8003f3c <_realloc_r+0x1c>
 8003f56:	4631      	mov	r1, r6
 8003f58:	4622      	mov	r2, r4
 8003f5a:	f7ff ff0f 	bl	8003d7c <memcpy>
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4638      	mov	r0, r7
 8003f62:	f7ff ff31 	bl	8003dc8 <_free_r>
 8003f66:	e7e9      	b.n	8003f3c <_realloc_r+0x1c>
 8003f68:	4635      	mov	r5, r6
 8003f6a:	e7e7      	b.n	8003f3c <_realloc_r+0x1c>

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4c06      	ldr	r4, [pc, #24]	; (8003f88 <_sbrk_r+0x1c>)
 8003f70:	2300      	movs	r3, #0
 8003f72:	4605      	mov	r5, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	f000 f814 	bl	8003fa4 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	20001424 	.word	0x20001424

08003f8c <__malloc_lock>:
 8003f8c:	4770      	bx	lr

08003f8e <__malloc_unlock>:
 8003f8e:	4770      	bx	lr

08003f90 <_malloc_usable_size_r>:
 8003f90:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f1a0 0004 	sub.w	r0, r0, #4
 8003f9a:	bfbc      	itt	lt
 8003f9c:	580b      	ldrlt	r3, [r1, r0]
 8003f9e:	18c0      	addlt	r0, r0, r3
 8003fa0:	4770      	bx	lr
	...

08003fa4 <_sbrk>:
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <_sbrk+0x14>)
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	4602      	mov	r2, r0
 8003faa:	b909      	cbnz	r1, 8003fb0 <_sbrk+0xc>
 8003fac:	4903      	ldr	r1, [pc, #12]	; (8003fbc <_sbrk+0x18>)
 8003fae:	6019      	str	r1, [r3, #0]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	4402      	add	r2, r0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	4770      	bx	lr
 8003fb8:	2000040c 	.word	0x2000040c
 8003fbc:	20001428 	.word	0x20001428

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
