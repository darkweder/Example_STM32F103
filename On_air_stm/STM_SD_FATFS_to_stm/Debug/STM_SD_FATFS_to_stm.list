
STM_SD_FATFS_to_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08006958  08006958  00016958  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
  7 .bss          0000175c  200001d8  200001d8  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001934  20001934  000201d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c9d0  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005839  00000000  00000000  0004cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d3c8  00000000  00000000  00052411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001020  00000000  00000000  0005f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001660  00000000  00000000  00060800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a724  00000000  00000000  00061e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004cfc  00000000  00000000  0006c584  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00071280  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030b8  00000000  00000000  000712fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006940 	.word	0x08006940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006940 	.word	0x08006940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000282:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <HAL_InitTick+0x3c>)
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <HAL_InitTick+0x40>)
{
 8000286:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000288:	7818      	ldrb	r0, [r3, #0]
 800028a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000292:	6810      	ldr	r0, [r2, #0]
 8000294:	fbb0 f0f3 	udiv	r0, r0, r3
 8000298:	f000 f8a0 	bl	80003dc <HAL_SYSTICK_Config>
 800029c:	4604      	mov	r4, r0
 800029e:	b958      	cbnz	r0, 80002b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002a0:	2d0f      	cmp	r5, #15
 80002a2:	d809      	bhi.n	80002b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a4:	4602      	mov	r2, r0
 80002a6:	4629      	mov	r1, r5
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002ac:	f000 f856 	bl	800035c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_InitTick+0x44>)
 80002b2:	4620      	mov	r0, r4
 80002b4:	601d      	str	r5, [r3, #0]
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	20000118 	.word	0x20000118
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000004 	.word	0x20000004

080002c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <HAL_Init+0x20>)
{
 80002ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	6813      	ldr	r3, [r2, #0]
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 f82f 	bl	8000338 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffd0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002e0:	f005 f948 	bl	8005574 <HAL_MspInit>
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	40022000 	.word	0x40022000

080002ec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ec:	4a03      	ldr	r2, [pc, #12]	; (80002fc <HAL_IncTick+0x10>)
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <HAL_IncTick+0x14>)
 80002f0:	6811      	ldr	r1, [r2, #0]
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	440b      	add	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000454 	.word	0x20000454
 8000300:	20000000 	.word	0x20000000

08000304 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000304:	4b01      	ldr	r3, [pc, #4]	; (800030c <HAL_GetTick+0x8>)
 8000306:	6818      	ldr	r0, [r3, #0]
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000454 	.word	0x20000454

08000310 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000310:	b538      	push	{r3, r4, r5, lr}
 8000312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000314:	f7ff fff6 	bl	8000304 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000318:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800031a:	bf1c      	itt	ne
 800031c:	4b05      	ldrne	r3, [pc, #20]	; (8000334 <HAL_Delay+0x24>)
 800031e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000320:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000322:	bf18      	it	ne
 8000324:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000326:	f7ff ffed 	bl	8000304 <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	4284      	cmp	r4, r0
 800032e:	d8fa      	bhi.n	8000326 <HAL_Delay+0x16>
  {
  }
}
 8000330:	bd38      	pop	{r3, r4, r5, pc}
 8000332:	bf00      	nop
 8000334:	20000000 	.word	0x20000000

08000338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000340:	041b      	lsls	r3, r3, #16
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000348:	0200      	lsls	r0, r0, #8
 800034a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000352:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000354:	60d3      	str	r3, [r2, #12]
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800035e:	b530      	push	{r4, r5, lr}
 8000360:	68dc      	ldr	r4, [r3, #12]
 8000362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000366:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800036c:	2b04      	cmp	r3, #4
 800036e:	bf28      	it	cs
 8000370:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	f04f 0501 	mov.w	r5, #1
 8000378:	fa05 f303 	lsl.w	r3, r5, r3
 800037c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000380:	bf8c      	ite	hi
 8000382:	3c03      	subhi	r4, #3
 8000384:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000386:	4019      	ands	r1, r3
 8000388:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038a:	fa05 f404 	lsl.w	r4, r5, r4
 800038e:	3c01      	subs	r4, #1
 8000390:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000392:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	ea42 0201 	orr.w	r2, r2, r1
 8000398:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	bfaf      	iteee	ge
 800039e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	f000 000f 	andlt.w	r0, r0, #15
 80003a6:	4b06      	ldrlt	r3, [pc, #24]	; (80003c0 <HAL_NVIC_SetPriority+0x64>)
 80003a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003aa:	bfa5      	ittet	ge
 80003ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000ed14 	.word	0xe000ed14

080003c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003c4:	0942      	lsrs	r2, r0, #5
 80003c6:	2301      	movs	r3, #1
 80003c8:	f000 001f 	and.w	r0, r0, #31
 80003cc:	fa03 f000 	lsl.w	r0, r3, r0
 80003d0:	4b01      	ldr	r3, [pc, #4]	; (80003d8 <HAL_NVIC_EnableIRQ+0x14>)
 80003d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100

080003dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003dc:	3801      	subs	r0, #1
 80003de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003e2:	d20a      	bcs.n	80003fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	21f0      	movs	r1, #240	; 0xf0
 80003ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000e010 	.word	0xe000e010
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000408:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800040c:	2a02      	cmp	r2, #2
{  
 800040e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000410:	d003      	beq.n	800041a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000412:	2204      	movs	r2, #4
 8000414:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000416:	2001      	movs	r0, #1
 8000418:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800041a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800041c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800041e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000420:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000422:	f021 010e 	bic.w	r1, r1, #14
 8000426:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000428:	6811      	ldr	r1, [r2, #0]
 800042a:	f021 0101 	bic.w	r1, r1, #1
 800042e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000430:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000432:	2101      	movs	r1, #1
 8000434:	fa01 f202 	lsl.w	r2, r1, r2
 8000438:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800043a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800043c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000440:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000444:	b113      	cbz	r3, 800044c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000446:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000448:	4620      	mov	r0, r4
 800044a:	bd10      	pop	{r4, pc}
 800044c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800044e:	bd10      	pop	{r4, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000454:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80005d0 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800045c:	4a5a      	ldr	r2, [pc, #360]	; (80005c8 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800045e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000460:	fa38 f403 	lsrs.w	r4, r8, r3
 8000464:	d102      	bne.n	800046c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000466:	b003      	add	sp, #12
 8000468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800046c:	2401      	movs	r4, #1
 800046e:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000472:	ea18 050a 	ands.w	r5, r8, sl
 8000476:	f000 809c 	beq.w	80005b2 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800047a:	684c      	ldr	r4, [r1, #4]
 800047c:	f024 0b10 	bic.w	fp, r4, #16
 8000480:	f1bb 0f02 	cmp.w	fp, #2
 8000484:	d114      	bne.n	80004b0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000486:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800048a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800048e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000492:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000496:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800049a:	270f      	movs	r7, #15
 800049c:	fa07 f70c 	lsl.w	r7, r7, ip
 80004a0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004a4:	690e      	ldr	r6, [r1, #16]
 80004a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80004aa:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80004ac:	f8ce 6020 	str.w	r6, [lr, #32]
 80004b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b4:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80004b6:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80004bc:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004be:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004c2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004c4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004cc:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d0:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80004d4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d6:	d811      	bhi.n	80004fc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80004d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004da:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004de:	68ce      	ldr	r6, [r1, #12]
 80004e0:	fa06 fe0c 	lsl.w	lr, r6, ip
 80004e4:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80004e8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80004ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004ec:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004f0:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80004f4:	409e      	lsls	r6, r3
 80004f6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80004fa:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80004fc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004fe:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000500:	688e      	ldr	r6, [r1, #8]
 8000502:	fa06 f60c 	lsl.w	r6, r6, ip
 8000506:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000508:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800050a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800050c:	d551      	bpl.n	80005b2 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000512:	f046 0601 	orr.w	r6, r6, #1
 8000516:	f8c9 6018 	str.w	r6, [r9, #24]
 800051a:	f8d9 6018 	ldr.w	r6, [r9, #24]
 800051e:	f023 0703 	bic.w	r7, r3, #3
 8000522:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000526:	f006 0601 	and.w	r6, r6, #1
 800052a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800052e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000530:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000534:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000536:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000538:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800053c:	f04f 0e0f 	mov.w	lr, #15
 8000540:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000544:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000548:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800054c:	d033      	beq.n	80005b6 <HAL_GPIO_Init+0x166>
 800054e:	4e1f      	ldr	r6, [pc, #124]	; (80005cc <HAL_GPIO_Init+0x17c>)
 8000550:	42b0      	cmp	r0, r6
 8000552:	d032      	beq.n	80005ba <HAL_GPIO_Init+0x16a>
 8000554:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000558:	42b0      	cmp	r0, r6
 800055a:	d030      	beq.n	80005be <HAL_GPIO_Init+0x16e>
 800055c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000560:	42b0      	cmp	r0, r6
 8000562:	d02e      	beq.n	80005c2 <HAL_GPIO_Init+0x172>
 8000564:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000568:	42b0      	cmp	r0, r6
 800056a:	bf14      	ite	ne
 800056c:	2605      	movne	r6, #5
 800056e:	2604      	moveq	r6, #4
 8000570:	fa06 f60c 	lsl.w	r6, r6, ip
 8000574:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000578:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800057a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800057c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800057e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000582:	bf0c      	ite	eq
 8000584:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000586:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000588:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800058a:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800058c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000590:	bf0c      	ite	eq
 8000592:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000594:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000596:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000598:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800059a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800059e:	bf0c      	ite	eq
 80005a0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005a2:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80005a4:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80005a6:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005a8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80005aa:	bf54      	ite	pl
 80005ac:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80005ae:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80005b0:	60d6      	str	r6, [r2, #12]
    position++;
 80005b2:	3301      	adds	r3, #1
 80005b4:	e754      	b.n	8000460 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005b6:	2600      	movs	r6, #0
 80005b8:	e7da      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005ba:	2601      	movs	r6, #1
 80005bc:	e7d8      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005be:	2602      	movs	r6, #2
 80005c0:	e7d6      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005c2:	2603      	movs	r6, #3
 80005c4:	e7d4      	b.n	8000570 <HAL_GPIO_Init+0x120>
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	48000400 	.word	0x48000400
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005d4:	b10a      	cbz	r2, 80005da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005d6:	6181      	str	r1, [r0, #24]
 80005d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005da:	6281      	str	r1, [r0, #40]	; 0x28
 80005dc:	4770      	bx	lr

080005de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80005de:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80005e0:	4604      	mov	r4, r0
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d04d      	beq.n	8000682 <HAL_PCD_Init+0xa4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80005e6:	f890 3371 	ldrb.w	r3, [r0, #881]	; 0x371
 80005ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80005ee:	b91b      	cbnz	r3, 80005f8 <HAL_PCD_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80005f0:	f880 2370 	strb.w	r2, [r0, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80005f4:	f005 fb0c 	bl	8005c10 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80005f8:	2303      	movs	r3, #3
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80005fa:	2100      	movs	r1, #0
 80005fc:	6860      	ldr	r0, [r4, #4]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80005fe:	f884 3371 	strb.w	r3, [r4, #881]	; 0x371
 8000602:	460a      	mov	r2, r1
 8000604:	f104 0328 	add.w	r3, r4, #40	; 0x28
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000608:	2501      	movs	r5, #1
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800060a:	4281      	cmp	r1, r0
 800060c:	f103 031c 	add.w	r3, r3, #28
 8000610:	d11b      	bne.n	800064a <HAL_PCD_Init+0x6c>
 8000612:	2000      	movs	r0, #0
 8000614:	f504 72e6 	add.w	r2, r4, #460	; 0x1cc
 8000618:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800061a:	4281      	cmp	r1, r0
 800061c:	f102 021c 	add.w	r2, r2, #28
 8000620:	d121      	bne.n	8000666 <HAL_PCD_Init+0x88>
   hpcd->OUT_ep[i].xfer_len = 0U;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000622:	6822      	ldr	r2, [r4, #0]
 8000624:	2101      	movs	r1, #1
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000626:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800062a:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
 hpcd->Instance->CNTR = 0U;
 800062e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0U;
 8000632:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000636:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800063a:	f8a2 0040 	strh.w	r0, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 800063e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 8000642:	2000      	movs	r0, #0
  hpcd->State= HAL_PCD_STATE_READY;
 8000644:	f884 1371 	strb.w	r1, [r4, #881]	; 0x371
 return HAL_OK;
 8000648:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 800064a:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1U;
 800064e:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000652:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000656:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800065a:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0U;
 800065e:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000662:	3101      	adds	r1, #1
 8000664:	e7d1      	b.n	800060a <HAL_PCD_Init+0x2c>
   hpcd->OUT_ep[i].num = i;
 8000666:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0U;
 800066a:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 800066e:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000672:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000676:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800067a:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800067e:	3001      	adds	r0, #1
 8000680:	e7cb      	b.n	800061a <HAL_PCD_Init+0x3c>
    return HAL_ERROR;
 8000682:	2001      	movs	r0, #1
}
 8000684:	bd38      	pop	{r3, r4, r5, pc}

08000686 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000686:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1U);
 8000688:	2101      	movs	r1, #1
 800068a:	f005 fbfe 	bl	8005e8a <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 800068e:	2000      	movs	r0, #0
 8000690:	bd08      	pop	{r3, pc}

08000692 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000692:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8000696:	2b01      	cmp	r3, #1
 8000698:	d00f      	beq.n	80006ba <HAL_PCD_SetAddress+0x28>
 800069a:	2301      	movs	r3, #1
 800069c:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

   if(address == 0U) 
 80006a0:	b941      	cbnz	r1, 80006b4 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80006a2:	6803      	ldr	r3, [r0, #0]
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 80006aa:	2300      	movs	r3, #0
 80006ac:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 80006b0:	4618      	mov	r0, r3
 80006b2:	4770      	bx	lr
     hpcd->USB_Address = address;
 80006b4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80006b8:	e7f7      	b.n	80006aa <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 80006ba:	2002      	movs	r0, #2
  return HAL_OK;
}
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80006c2:	b24c      	sxtb	r4, r1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80006ca:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006ce:	bfb5      	itete	lt
 80006d0:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006d4:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80006d8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80006da:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006de:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7FU;
 80006e0:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80006e2:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80006e4:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 80006e6:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
  ep->maxpacket = ep_mps;
 80006ea:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	f000 817a 	beq.w	80009e6 <HAL_PCD_EP_Open+0x326>
 80006f2:	2301      	movs	r3, #1
 80006f4:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 80006f8:	78cd      	ldrb	r5, [r1, #3]
 80006fa:	780c      	ldrb	r4, [r1, #0]
 80006fc:	6803      	ldr	r3, [r0, #0]
 80006fe:	2d03      	cmp	r5, #3
 8000700:	d810      	bhi.n	8000724 <HAL_PCD_EP_Open+0x64>
 8000702:	e8df f005 	tbb	[pc, r5]
 8000706:	6b02      	.short	0x6b02
 8000708:	5f55      	.short	0x5f55
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800070a:	b224      	sxth	r4, r4
 800070c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8000710:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 8000714:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8000718:	042d      	lsls	r5, r5, #16
 800071a:	0c2d      	lsrs	r5, r5, #16
 800071c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000720:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000724:	780d      	ldrb	r5, [r1, #0]
 8000726:	b22f      	sxth	r7, r5
 8000728:	f640 740f 	movw	r4, #3855	; 0xf0f
 800072c:	f833 6027 	ldrh.w	r6, [r3, r7, lsl #2]
 8000730:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8000734:	4026      	ands	r6, r4
 8000736:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800073a:	4335      	orrs	r5, r6
 800073c:	f823 5027 	strh.w	r5, [r3, r7, lsl #2]
  
  if (ep->doublebuffer == 0U) 
 8000740:	7a8d      	ldrb	r5, [r1, #10]
 8000742:	780f      	ldrb	r7, [r1, #0]
 8000744:	2d00      	cmp	r5, #0
 8000746:	f040 809b 	bne.w	8000880 <HAL_PCD_EP_Open+0x1c0>
  {
    if (ep->is_in)
 800074a:	784d      	ldrb	r5, [r1, #1]
 800074c:	888e      	ldrh	r6, [r1, #4]
 800074e:	2d00      	cmp	r5, #0
 8000750:	d050      	beq.n	80007f4 <HAL_PCD_EP_Open+0x134>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000752:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8000756:	b2ad      	uxth	r5, r5
 8000758:	eb05 05c7 	add.w	r5, r5, r7, lsl #3
 800075c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8000760:	f026 0601 	bic.w	r6, r6, #1
 8000764:	f8a5 6400 	strh.w	r6, [r5, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000768:	780d      	ldrb	r5, [r1, #0]
 800076a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800076e:	0652      	lsls	r2, r2, #25
 8000770:	d508      	bpl.n	8000784 <HAL_PCD_EP_Open+0xc4>
 8000772:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000776:	4014      	ands	r4, r2
 8000778:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800077c:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8000780:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000784:	7809      	ldrb	r1, [r1, #0]
 8000786:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800078a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800078e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000792:	0412      	lsls	r2, r2, #16
 8000794:	0c12      	lsrs	r2, r2, #16
 8000796:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800079a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800079e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80007a2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80007a6:	2300      	movs	r3, #0
 80007a8:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return ret;
 80007ac:	4618      	mov	r0, r3
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80007b0:	b224      	sxth	r4, r4
 80007b2:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007b6:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007ba:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007be:	042d      	lsls	r5, r5, #16
 80007c0:	0c2d      	lsrs	r5, r5, #16
 80007c2:	e7ad      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80007c4:	b224      	sxth	r4, r4
 80007c6:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007ca:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007ce:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007d2:	042d      	lsls	r5, r5, #16
 80007d4:	0c2d      	lsrs	r5, r5, #16
 80007d6:	f445 65c0 	orr.w	r5, r5, #1536	; 0x600
 80007da:	e7a1      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80007dc:	b224      	sxth	r4, r4
 80007de:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80007e2:	f425 45ec 	bic.w	r5, r5, #30208	; 0x7600
 80007e6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80007ea:	042d      	lsls	r5, r5, #16
 80007ec:	0c2d      	lsrs	r5, r5, #16
 80007ee:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80007f2:	e795      	b.n	8000720 <HAL_PCD_EP_Open+0x60>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80007f4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80007f8:	2408      	movs	r4, #8
 80007fa:	b2ad      	uxth	r5, r5
 80007fc:	fb14 5507 	smlabb	r5, r4, r7, r5
 8000800:	3504      	adds	r5, #4
 8000802:	f503 6e80 	add.w	lr, r3, #1024	; 0x400
 8000806:	f026 0601 	bic.w	r6, r6, #1
 800080a:	f82e 6015 	strh.w	r6, [lr, r5, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 800080e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8000812:	780e      	ldrb	r6, [r1, #0]
 8000814:	b2ad      	uxth	r5, r5
 8000816:	fb14 5406 	smlabb	r4, r4, r6, r5
 800081a:	2a3e      	cmp	r2, #62	; 0x3e
 800081c:	f104 0406 	add.w	r4, r4, #6
 8000820:	d928      	bls.n	8000874 <HAL_PCD_EP_Open+0x1b4>
 8000822:	0955      	lsrs	r5, r2, #5
 8000824:	06d7      	lsls	r7, r2, #27
 8000826:	bf08      	it	eq
 8000828:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 800082c:	4a6f      	ldr	r2, [pc, #444]	; (80009ec <HAL_PCD_EP_Open+0x32c>)
 800082e:	bf08      	it	eq
 8000830:	b2ad      	uxtheq	r5, r5
 8000832:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8000836:	f82e 5014 	strh.w	r5, [lr, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800083a:	780c      	ldrb	r4, [r1, #0]
 800083c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000840:	0452      	lsls	r2, r2, #17
 8000842:	d50b      	bpl.n	800085c <HAL_PCD_EP_Open+0x19c>
 8000844:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000848:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800084c:	0512      	lsls	r2, r2, #20
 800084e:	0d12      	lsrs	r2, r2, #20
 8000850:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000858:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800085c:	7809      	ldrb	r1, [r1, #0]
 800085e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800086a:	0412      	lsls	r2, r2, #16
 800086c:	0c12      	lsrs	r2, r2, #16
 800086e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000872:	e792      	b.n	800079a <HAL_PCD_EP_Open+0xda>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000874:	0855      	lsrs	r5, r2, #1
 8000876:	07d6      	lsls	r6, r2, #31
 8000878:	bf48      	it	mi
 800087a:	3501      	addmi	r5, #1
 800087c:	02ad      	lsls	r5, r5, #10
 800087e:	e7da      	b.n	8000836 <HAL_PCD_EP_Open+0x176>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8000880:	b23d      	sxth	r5, r7
 8000882:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000886:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	0d12      	lsrs	r2, r2, #20
 800088e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8000892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000896:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800089a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800089e:	b2b7      	uxth	r7, r6
 80008a0:	780e      	ldrb	r6, [r1, #0]
 80008a2:	2208      	movs	r2, #8
 80008a4:	fb12 7606 	smlabb	r6, r2, r6, r7
 80008a8:	88cf      	ldrh	r7, [r1, #6]
 80008aa:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 80008ae:	f027 0701 	bic.w	r7, r7, #1
 80008b2:	f825 7016 	strh.w	r7, [r5, r6, lsl #1]
 80008b6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80008ba:	780f      	ldrb	r7, [r1, #0]
 80008bc:	b2b6      	uxth	r6, r6
 80008be:	fb12 6207 	smlabb	r2, r2, r7, r6
 80008c2:	890e      	ldrh	r6, [r1, #8]
 80008c4:	3204      	adds	r2, #4
 80008c6:	f026 0601 	bic.w	r6, r6, #1
 80008ca:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 80008ce:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in==0U)
 80008d0:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80008d2:	b212      	sxth	r2, r2
    if (ep->is_in==0U)
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d145      	bne.n	8000964 <HAL_PCD_EP_Open+0x2a4>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80008d8:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80008dc:	046f      	lsls	r7, r5, #17
 80008de:	d508      	bpl.n	80008f2 <HAL_PCD_EP_Open+0x232>
 80008e0:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80008e4:	402c      	ands	r4, r5
 80008e6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80008ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80008ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80008f2:	780c      	ldrb	r4, [r1, #0]
 80008f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80008f8:	0656      	lsls	r6, r2, #25
 80008fa:	d50b      	bpl.n	8000914 <HAL_PCD_EP_Open+0x254>
 80008fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000900:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000904:	0512      	lsls	r2, r2, #20
 8000906:	0d12      	lsrs	r2, r2, #20
 8000908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800090c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000910:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000914:	780c      	ldrb	r4, [r1, #0]
 8000916:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800091a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800091e:	0512      	lsls	r2, r2, #20
 8000920:	0d12      	lsrs	r2, r2, #20
 8000922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000926:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800092a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800092e:	780d      	ldrb	r5, [r1, #0]
 8000930:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000934:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000938:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800093c:	0412      	lsls	r2, r2, #16
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000944:	f248 0480 	movw	r4, #32896	; 0x8080
 8000948:	4322      	orrs	r2, r4
 800094a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800094e:	7809      	ldrb	r1, [r1, #0]
 8000950:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000954:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800095c:	0412      	lsls	r2, r2, #16
 800095e:	0c12      	lsrs	r2, r2, #16
 8000960:	4322      	orrs	r2, r4
 8000962:	e71e      	b.n	80007a2 <HAL_PCD_EP_Open+0xe2>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000964:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8000968:	046d      	lsls	r5, r5, #17
 800096a:	d508      	bpl.n	800097e <HAL_PCD_EP_Open+0x2be>
 800096c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8000970:	402c      	ands	r4, r5
 8000972:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000976:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800097a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800097e:	780c      	ldrb	r4, [r1, #0]
 8000980:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000984:	0652      	lsls	r2, r2, #25
 8000986:	d50b      	bpl.n	80009a0 <HAL_PCD_EP_Open+0x2e0>
 8000988:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800098c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000990:	0512      	lsls	r2, r2, #20
 8000992:	0d12      	lsrs	r2, r2, #20
 8000994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000998:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800099c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80009a0:	780c      	ldrb	r4, [r1, #0]
 80009a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80009a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009aa:	0512      	lsls	r2, r2, #20
 80009ac:	0d12      	lsrs	r2, r2, #20
 80009ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80009ba:	780d      	ldrb	r5, [r1, #0]
 80009bc:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80009c0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009c8:	0412      	lsls	r2, r2, #16
 80009ca:	0c12      	lsrs	r2, r2, #16
 80009cc:	f248 0480 	movw	r4, #32896	; 0x8080
 80009d0:	4322      	orrs	r2, r4
 80009d2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80009d6:	7809      	ldrb	r1, [r1, #0]
 80009d8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80009dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009e4:	e7ba      	b.n	800095c <HAL_PCD_EP_Open+0x29c>
  __HAL_LOCK(hpcd); 
 80009e6:	2002      	movs	r0, #2
}
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	ffff8000 	.word	0xffff8000

080009f0 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80009f0:	b24b      	sxtb	r3, r1
 80009f2:	2b00      	cmp	r3, #0
{  
 80009f4:	b530      	push	{r4, r5, lr}
 80009f6:	f04f 021c 	mov.w	r2, #28
 80009fa:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80009fe:	bfb5      	itete	lt
 8000a00:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000a04:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000a08:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000a0a:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a0e:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000a10:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000a12:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000a14:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f000 80d4 	beq.w	8000bc6 <HAL_PCD_EP_Close+0x1d6>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8000a24:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0U) 
 8000a26:	7a8d      	ldrb	r5, [r1, #10]
 8000a28:	784c      	ldrb	r4, [r1, #1]
 8000a2a:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000a2c:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0U) 
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d13c      	bne.n	8000aac <HAL_PCD_EP_Close+0xbc>
    if (ep->is_in)
 8000a32:	b31c      	cbz	r4, 8000a7c <HAL_PCD_EP_Close+0x8c>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000a34:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a38:	0664      	lsls	r4, r4, #25
 8000a3a:	d50b      	bpl.n	8000a54 <HAL_PCD_EP_Close+0x64>
 8000a3c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a40:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000a44:	0524      	lsls	r4, r4, #20
 8000a46:	0d24      	lsrs	r4, r4, #20
 8000a48:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000a4c:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8000a50:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS) 
 8000a54:	7809      	ldrb	r1, [r1, #0]
 8000a56:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000a5a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a62:	0412      	lsls	r2, r2, #16
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a6e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8000a72:	2300      	movs	r3, #0
 8000a74:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  return HAL_OK;
 8000a78:	4618      	mov	r0, r3
 8000a7a:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000a7c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a80:	0465      	lsls	r5, r4, #17
 8000a82:	d50b      	bpl.n	8000a9c <HAL_PCD_EP_Close+0xac>
 8000a84:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000a88:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000a8c:	0524      	lsls	r4, r4, #20
 8000a8e:	0d24      	lsrs	r4, r4, #20
 8000a90:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000a94:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000a98:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a9c:	7809      	ldrb	r1, [r1, #0]
 8000a9e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000aa6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000aaa:	e7da      	b.n	8000a62 <HAL_PCD_EP_Close+0x72>
    if (ep->is_in==0U)
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d146      	bne.n	8000b3e <HAL_PCD_EP_Close+0x14e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000ab0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000ab4:	0464      	lsls	r4, r4, #17
 8000ab6:	d50b      	bpl.n	8000ad0 <HAL_PCD_EP_Close+0xe0>
 8000ab8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000abc:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000ac0:	0524      	lsls	r4, r4, #20
 8000ac2:	0d24      	lsrs	r4, r4, #20
 8000ac4:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000ac8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000acc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000ad0:	780c      	ldrb	r4, [r1, #0]
 8000ad2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000ad6:	0655      	lsls	r5, r2, #25
 8000ad8:	d50b      	bpl.n	8000af2 <HAL_PCD_EP_Close+0x102>
 8000ada:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000ade:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ae2:	0512      	lsls	r2, r2, #20
 8000ae4:	0d12      	lsrs	r2, r2, #20
 8000ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000aea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000aee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000af2:	780c      	ldrb	r4, [r1, #0]
 8000af4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000af8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000afc:	0512      	lsls	r2, r2, #20
 8000afe:	0d12      	lsrs	r2, r2, #20
 8000b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b04:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000b08:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000b0c:	780d      	ldrb	r5, [r1, #0]
 8000b0e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	f248 0480 	movw	r4, #32896	; 0x8080
 8000b22:	4322      	orrs	r2, r4
 8000b24:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000b28:	7809      	ldrb	r1, [r1, #0]
 8000b2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000b2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000b36:	0412      	lsls	r2, r2, #16
 8000b38:	0c12      	lsrs	r2, r2, #16
 8000b3a:	4322      	orrs	r2, r4
 8000b3c:	e797      	b.n	8000a6e <HAL_PCD_EP_Close+0x7e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000b3e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000b42:	0464      	lsls	r4, r4, #17
 8000b44:	d50b      	bpl.n	8000b5e <HAL_PCD_EP_Close+0x16e>
 8000b46:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8000b4a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8000b4e:	0524      	lsls	r4, r4, #20
 8000b50:	0d24      	lsrs	r4, r4, #20
 8000b52:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8000b56:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8000b5a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000b5e:	780c      	ldrb	r4, [r1, #0]
 8000b60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b64:	0652      	lsls	r2, r2, #25
 8000b66:	d50b      	bpl.n	8000b80 <HAL_PCD_EP_Close+0x190>
 8000b68:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b70:	0512      	lsls	r2, r2, #20
 8000b72:	0d12      	lsrs	r2, r2, #20
 8000b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b78:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000b7c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000b80:	780c      	ldrb	r4, [r1, #0]
 8000b82:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8000b86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b8a:	0512      	lsls	r2, r2, #20
 8000b8c:	0d12      	lsrs	r2, r2, #20
 8000b8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b96:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000b9a:	780d      	ldrb	r5, [r1, #0]
 8000b9c:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8000ba0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba8:	0412      	lsls	r2, r2, #16
 8000baa:	0c12      	lsrs	r2, r2, #16
 8000bac:	f248 0480 	movw	r4, #32896	; 0x8080
 8000bb0:	4322      	orrs	r2, r4
 8000bb2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000bb6:	7809      	ldrb	r1, [r1, #0]
 8000bb8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8000bbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000bc4:	e7b7      	b.n	8000b36 <HAL_PCD_EP_Close+0x146>
  __HAL_LOCK(hpcd); 
 8000bc6:	2002      	movs	r0, #2
}
 8000bc8:	bd30      	pop	{r4, r5, pc}
	...

08000bcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000bd2:	241c      	movs	r4, #28
 8000bd4:	fb04 0501 	mla	r5, r4, r1, r0
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000bd8:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;  
 8000bda:	f8c5 21dc 	str.w	r2, [r5, #476]	; 0x1dc
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;

  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000bde:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
  ep->xfer_len = len;
 8000be2:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
  if (ep->xfer_len > ep->maxpacket)
 8000be6:	4293      	cmp	r3, r2
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000be8:	bf86      	itte	hi
 8000bea:	1a9b      	subhi	r3, r3, r2
 8000bec:	f8c5 31e0 	strhi.w	r3, [r5, #480]	; 0x1e0
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
 8000bf0:	461a      	movls	r2, r3
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 8000bf2:	fb04 0301 	mla	r3, r4, r1, r0
  ep->xfer_count = 0U;
 8000bf6:	f8c5 61e4 	str.w	r6, [r5, #484]	; 0x1e4
  ep->is_in = 0U;
 8000bfa:	f885 61cd 	strb.w	r6, [r5, #461]	; 0x1cd
  ep->num = ep_addr & 0x7FU;
 8000bfe:	f885 11cc 	strb.w	r1, [r5, #460]	; 0x1cc
    ep->xfer_len =0U;
 8000c02:	bf98      	it	ls
 8000c04:	f8c5 61e0 	strls.w	r6, [r5, #480]	; 0x1e0
  if (ep->doublebuffer == 0U) 
 8000c08:	f893 51d6 	ldrb.w	r5, [r3, #470]	; 0x1d6
 8000c0c:	6804      	ldr	r4, [r0, #0]
 8000c0e:	bb85      	cbnz	r5, 8000c72 <HAL_PCD_EP_Receive+0xa6>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000c10:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000c14:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000c18:	b2ad      	uxth	r5, r5
 8000c1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000c1e:	2a3e      	cmp	r2, #62	; 0x3e
 8000c20:	f103 0306 	add.w	r3, r3, #6
 8000c24:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8000c28:	d935      	bls.n	8000c96 <HAL_PCD_EP_Receive+0xca>
 8000c2a:	f3c2 154f 	ubfx	r5, r2, #5, #16
 8000c2e:	06d2      	lsls	r2, r2, #27
 8000c30:	bf08      	it	eq
 8000c32:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_PCD_EP_Receive+0xdc>)
 8000c38:	bf08      	it	eq
 8000c3a:	b2ad      	uxtheq	r5, r5
 8000c3c:	ea42 2585 	orr.w	r5, r2, r5, lsl #10
 8000c40:	f826 5013 	strh.w	r5, [r6, r3, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000c44:	231c      	movs	r3, #28
 8000c46:	fb03 0001 	mla	r0, r3, r1, r0
 8000c4a:	f890 21cc 	ldrb.w	r2, [r0, #460]	; 0x1cc
 8000c4e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8000c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c5a:	041b      	lsls	r3, r3, #16
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]

  return HAL_OK;
}
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000c72:	f893 51cd 	ldrb.w	r5, [r3, #461]	; 0x1cd
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0ca      	beq.n	8000c10 <HAL_PCD_EP_Receive+0x44>
 8000c7a:	2d01      	cmp	r5, #1
 8000c7c:	d1e2      	bne.n	8000c44 <HAL_PCD_EP_Receive+0x78>
 8000c7e:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8000c82:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8000c86:	b2ad      	uxth	r5, r5
 8000c88:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8000c8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000c90:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8000c94:	e7d6      	b.n	8000c44 <HAL_PCD_EP_Receive+0x78>
 8000c96:	f3c2 054f 	ubfx	r5, r2, #1, #16
 8000c9a:	07d2      	lsls	r2, r2, #31
 8000c9c:	bf44      	itt	mi
 8000c9e:	3501      	addmi	r5, #1
 8000ca0:	b2ad      	uxthmi	r5, r5
 8000ca2:	02ad      	lsls	r5, r5, #10
 8000ca4:	e7cc      	b.n	8000c40 <HAL_PCD_EP_Receive+0x74>
 8000ca6:	bf00      	nop
 8000ca8:	ffff8000 	.word	0xffff8000

08000cac <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000cac:	231c      	movs	r3, #28
 8000cae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000cb2:	fb03 0101 	mla	r1, r3, r1, r0
}
 8000cb6:	f8b1 01e4 	ldrh.w	r0, [r1, #484]	; 0x1e4
 8000cba:	4770      	bx	lr

08000cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	f001 077f 	and.w	r7, r1, #127	; 0x7f
  uint16_t pmabuffer = 0U;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000cc2:	241c      	movs	r4, #28
 8000cc4:	fb04 0107 	mla	r1, r4, r7, r0
{
 8000cc8:	4605      	mov	r5, r0
  ep->xfer_count = 0U;
  ep->is_in = 1U;
  ep->num = ep_addr & 0x7FU;

  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000cca:	6b4e      	ldr	r6, [r1, #52]	; 0x34
  ep->xfer_len = len;
 8000ccc:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->xfer_len > ep->maxpacket)
 8000cce:	42b3      	cmp	r3, r6
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000cd0:	bf88      	it	hi
 8000cd2:	1b9b      	subhi	r3, r3, r6
  ep->xfer_buff = pBuf;  
 8000cd4:	638a      	str	r2, [r1, #56]	; 0x38
  ep->is_in = 1U;
 8000cd6:	f04f 0001 	mov.w	r0, #1
  ep->xfer_count = 0U;
 8000cda:	f04f 0200 	mov.w	r2, #0
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8000cde:	fb04 5407 	mla	r4, r4, r7, r5
  ep->xfer_count = 0U;
 8000ce2:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 8000ce4:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8000ce8:	f881 7028 	strb.w	r7, [r1, #40]	; 0x28
    ep->xfer_len-=len; 
 8000cec:	bf8e      	itee	hi
 8000cee:	63cb      	strhi	r3, [r1, #60]	; 0x3c
    ep->xfer_len =0U;
 8000cf0:	63ca      	strls	r2, [r1, #60]	; 0x3c
 8000cf2:	461e      	movls	r6, r3
  if (ep->doublebuffer == 0U) 
 8000cf4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8000cf8:	b2b6      	uxth	r6, r6
 8000cfa:	bb4b      	cbnz	r3, 8000d50 <HAL_PCD_EP_Transmit+0x94>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8000cfc:	4633      	mov	r3, r6
 8000cfe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000d00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d02:	6828      	ldr	r0, [r5, #0]
 8000d04:	f000 fb70 	bl	80013e8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8000d08:	682a      	ldr	r2, [r5, #0]
 8000d0a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d0e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000d18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000d1c:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000d20:	231c      	movs	r3, #28
 8000d22:	fb03 5707 	mla	r7, r3, r7, r5
 8000d26:	682a      	ldr	r2, [r5, #0]
 8000d28:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8000d2c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d38:	041b      	lsls	r3, r3, #16
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000d50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000d54:	6828      	ldr	r0, [r5, #0]
 8000d56:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8000d5a:	065b      	lsls	r3, r3, #25
      pmabuffer = ep->pmaaddr1;
 8000d5c:	bf4c      	ite	mi
 8000d5e:	8e22      	ldrhmi	r2, [r4, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8000d60:	8de2      	ldrhpl	r2, [r4, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000d62:	241c      	movs	r4, #28
 8000d64:	fb04 5407 	mla	r4, r4, r7, r5
 8000d68:	4633      	mov	r3, r6
 8000d6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d6c:	f000 fb3c 	bl	80013e8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8000d70:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8000d74:	682a      	ldr	r2, [r5, #0]
 8000d76:	b973      	cbnz	r3, 8000d96 <HAL_PCD_EP_Transmit+0xda>
 8000d78:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d7c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d84:	051b      	lsls	r3, r3, #20
 8000d86:	0d1b      	lsrs	r3, r3, #20
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d90:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d94:	e7c4      	b.n	8000d20 <HAL_PCD_EP_Transmit+0x64>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d1c2      	bne.n	8000d20 <HAL_PCD_EP_Transmit+0x64>
 8000d9a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8000d9e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000da6:	051b      	lsls	r3, r3, #20
 8000da8:	0d1b      	lsrs	r3, r3, #20
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db2:	e7ed      	b.n	8000d90 <HAL_PCD_EP_Transmit+0xd4>

08000db4 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dba:	041b      	lsls	r3, r3, #16
{
 8000dbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000dc2:	d472      	bmi.n	8000eaa <HAL_PCD_IRQHandler+0xf6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dca:	0557      	lsls	r7, r2, #21
 8000dcc:	d50a      	bpl.n	8000de4 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dce:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8000dd2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000dd8:	f004 ff63 	bl	8005ca2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff fc57 	bl	8000692 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dea:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000dec:	bf44      	itt	mi
 8000dee:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8000df2:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000df6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000dfa:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000dfc:	bf44      	itt	mi
 8000dfe:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8000e02:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000e06:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e0a:	04d6      	lsls	r6, r2, #19
 8000e0c:	d517      	bpl.n	8000e3e <HAL_PCD_IRQHandler+0x8a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e0e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	0c12      	lsrs	r2, r2, #16
 8000e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e1e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e22:	f022 0208 	bic.w	r2, r2, #8
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	0c12      	lsrs	r2, r2, #16
 8000e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f004 ff54 	bl	8005cdc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8000e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e44:	0515      	lsls	r5, r2, #20
 8000e46:	d518      	bpl.n	8000e7a <HAL_PCD_IRQHandler+0xc6>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e48:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f042 0208 	orr.w	r2, r2, #8
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e56:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8000e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000e5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000e62:	b292      	uxth	r2, r2
 8000e64:	f042 0204 	orr.w	r2, r2, #4
 8000e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e70:	04d8      	lsls	r0, r3, #19
 8000e72:	d402      	bmi.n	8000e7a <HAL_PCD_IRQHandler+0xc6>
      HAL_PCD_SuspendCallback(hpcd);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f004 ff21 	bl	8005cbc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e80:	0591      	lsls	r1, r2, #22
 8000e82:	d506      	bpl.n	8000e92 <HAL_PCD_IRQHandler+0xde>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000e84:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f004 ff04 	bl	8005c9a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e98:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000e9a:	bf44      	itt	mi
 8000e9c:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8000ea0:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0U;
 8000eaa:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8000eac:	4fc6      	ldr	r7, [pc, #792]	; (80011c8 <HAL_PCD_IRQHandler+0x414>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8000eae:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80011cc <HAL_PCD_IRQHandler+0x418>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000eb2:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80011d0 <HAL_PCD_IRQHandler+0x41c>
  __IO uint16_t wEPVal = 0U;
 8000eb6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	0419      	lsls	r1, r3, #16
 8000ec4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ec8:	f57f af7c 	bpl.w	8000dc4 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ecc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0U)
 8000ed0:	f016 060f 	ands.w	r6, r6, #15
 8000ed4:	f040 80aa 	bne.w	800102c <HAL_PCD_IRQHandler+0x278>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ed8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000edc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ede:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ee2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ee4:	d126      	bne.n	8000f34 <HAL_PCD_IRQHandler+0x180>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ee6:	403b      	ands	r3, r7
 8000ee8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000eea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000eee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ef8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8000efc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000efe:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 8000f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f06:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000f08:	4413      	add	r3, r2
 8000f0a:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f004 febc 	bl	8005c8a <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000f12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0cf      	beq.n	8000eba <HAL_PCD_IRQHandler+0x106>
 8000f1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d1cc      	bne.n	8000eba <HAL_PCD_IRQHandler+0x106>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000f20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f24:	6821      	ldr	r1, [r4, #0]
 8000f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f2e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000f32:	e7c2      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000f34:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000f38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f3c:	051e      	lsls	r6, r3, #20
 8000f3e:	d51f      	bpl.n	8000f80 <HAL_PCD_IRQHandler+0x1cc>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f44:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8000f52:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8000f56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f5e:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 8000f62:	f504 715d 	add.w	r1, r4, #884	; 0x374
 8000f66:	f000 fa52 	bl	800140e <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000f6a:	6822      	ldr	r2, [r4, #0]
 8000f6c:	8813      	ldrh	r3, [r2, #0]
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f72:	051b      	lsls	r3, r3, #20
 8000f74:	0d1b      	lsrs	r3, r3, #20
 8000f76:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f004 fe77 	bl	8005c6c <HAL_PCD_SetupStageCallback>
 8000f7e:	e79c      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000f80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f84:	041d      	lsls	r5, r3, #16
 8000f86:	d598      	bpl.n	8000eba <HAL_PCD_IRQHandler+0x106>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f88:	8803      	ldrh	r3, [r0, #0]
 8000f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8e:	051b      	lsls	r3, r3, #20
 8000f90:	0d1b      	lsrs	r3, r3, #20
 8000f92:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f98:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000fa6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fae:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
          if (ep->xfer_count != 0U)
 8000fb2:	b163      	cbz	r3, 8000fce <HAL_PCD_IRQHandler+0x21a>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000fb4:	f8b4 21d0 	ldrh.w	r2, [r4, #464]	; 0x1d0
 8000fb8:	f8d4 11dc 	ldr.w	r1, [r4, #476]	; 0x1dc
 8000fbc:	f000 fa27 	bl	800140e <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000fc0:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 8000fc4:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8000fc8:	4413      	add	r3, r2
 8000fca:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f004 fe51 	bl	8005c78 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
 8000fdc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000fe0:	283e      	cmp	r0, #62	; 0x3e
 8000fe2:	b289      	uxth	r1, r1
 8000fe4:	f101 0106 	add.w	r1, r1, #6
 8000fe8:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 8000fec:	d916      	bls.n	800101c <HAL_PCD_IRQHandler+0x268>
 8000fee:	f3c0 134f 	ubfx	r3, r0, #5, #16
 8000ff2:	06c0      	lsls	r0, r0, #27
 8000ff4:	bf04      	itt	eq
 8000ff6:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8000ffa:	b29b      	uxtheq	r3, r3
 8000ffc:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001000:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001004:	8813      	ldrh	r3, [r2, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	ea03 0308 	and.w	r3, r3, r8
 800100c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	8013      	strh	r3, [r2, #0]
 800101a:	e74e      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 800101c:	f3c0 034f 	ubfx	r3, r0, #1, #16
 8001020:	07c6      	lsls	r6, r0, #31
 8001022:	bf44      	itt	mi
 8001024:	3301      	addmi	r3, #1
 8001026:	b29b      	uxthmi	r3, r3
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	e7e9      	b.n	8001000 <HAL_PCD_IRQHandler+0x24c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800102c:	fa0f fa86 	sxth.w	sl, r6
 8001030:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800103a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800103e:	041d      	lsls	r5, r3, #16
 8001040:	d540      	bpl.n	80010c4 <HAL_PCD_IRQHandler+0x310>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001042:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8001046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800104a:	051b      	lsls	r3, r3, #20
 800104c:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0U)
 800104e:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001050:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 8001054:	fb01 4106 	mla	r1, r1, r6, r4
 8001058:	f891 31d6 	ldrb.w	r3, [r1, #470]	; 0x1d6
 800105c:	2b00      	cmp	r3, #0
 800105e:	d173      	bne.n	8001148 <HAL_PCD_IRQHandler+0x394>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001060:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001064:	f891 21cc 	ldrb.w	r2, [r1, #460]	; 0x1cc
 8001068:	b29b      	uxth	r3, r3
 800106a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800106e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001072:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 8001076:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800107a:	b135      	cbz	r5, 800108a <HAL_PCD_IRQHandler+0x2d6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800107c:	f8b1 21d0 	ldrh.w	r2, [r1, #464]	; 0x1d0
 8001080:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 8001084:	462b      	mov	r3, r5
 8001086:	f000 f9c2 	bl	800140e <PCD_ReadPMA>
        ep->xfer_count+=count;
 800108a:	211c      	movs	r1, #28
 800108c:	fb01 4106 	mla	r1, r1, r6, r4
 8001090:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
        ep->xfer_buff+=count;
 8001094:	f8d1 21dc 	ldr.w	r2, [r1, #476]	; 0x1dc
        ep->xfer_count+=count;
 8001098:	442b      	add	r3, r5
 800109a:	f8c1 31e4 	str.w	r3, [r1, #484]	; 0x1e4
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800109e:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
        ep->xfer_buff+=count;
 80010a2:	442a      	add	r2, r5
 80010a4:	f8c1 21dc 	str.w	r2, [r1, #476]	; 0x1dc
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010a8:	b123      	cbz	r3, 80010b4 <HAL_PCD_IRQHandler+0x300>
 80010aa:	f8d1 01d8 	ldr.w	r0, [r1, #472]	; 0x1d8
 80010ae:	4285      	cmp	r5, r0
 80010b0:	f080 8084 	bcs.w	80011bc <HAL_PCD_IRQHandler+0x408>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80010b4:	231c      	movs	r3, #28
 80010b6:	fb03 4306 	mla	r3, r3, r6, r4
 80010ba:	4620      	mov	r0, r4
 80010bc:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 80010c0:	f004 fdda 	bl	8005c78 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80010c8:	0618      	lsls	r0, r3, #24
 80010ca:	f57f aef6 	bpl.w	8000eba <HAL_PCD_IRQHandler+0x106>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0U)
 80010d8:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80010da:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0U)
 80010de:	fb01 4106 	mla	r1, r1, r6, r4
 80010e2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d174      	bne.n	80011d4 <HAL_PCD_IRQHandler+0x420>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010ee:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010fc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001104:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0U)
 8001106:	b11b      	cbz	r3, 8001110 <HAL_PCD_IRQHandler+0x35c>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001108:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800110a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800110c:	f000 f96c 	bl	80013e8 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	211c      	movs	r1, #28
 8001114:	fb01 4606 	mla	r6, r1, r6, r4
 8001118:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800111c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001120:	b29b      	uxth	r3, r3
 8001122:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001126:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800112a:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800112c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001130:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001132:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001136:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001138:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 800113a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800113c:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0U)
 800113e:	2b00      	cmp	r3, #0
 8001140:	d17f      	bne.n	8001242 <HAL_PCD_IRQHandler+0x48e>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001142:	f004 fda2 	bl	8005c8a <HAL_PCD_DataInStageCallback>
 8001146:	e6b8      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001148:	f891 51cc 	ldrb.w	r5, [r1, #460]	; 0x1cc
 800114c:	b22b      	sxth	r3, r5
 800114e:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001152:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001156:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800115a:	b292      	uxth	r2, r2
 800115c:	f04f 0308 	mov.w	r3, #8
 8001160:	fb13 2305 	smlabb	r3, r3, r5, r2
 8001164:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001168:	d01e      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x3f4>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800116a:	f8b3 5404 	ldrh.w	r5, [r3, #1028]	; 0x404
 800116e:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001172:	b135      	cbz	r5, 8001182 <HAL_PCD_IRQHandler+0x3ce>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001174:	f8b1 21d2 	ldrh.w	r2, [r1, #466]	; 0x1d2
 8001178:	462b      	mov	r3, r5
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800117a:	f8d1 11dc 	ldr.w	r1, [r1, #476]	; 0x1dc
 800117e:	f000 f946 	bl	800140e <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001182:	231c      	movs	r3, #28
 8001184:	fb03 4306 	mla	r3, r3, r6, r4
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	f893 11cc 	ldrb.w	r1, [r3, #460]	; 0x1cc
 800118e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001196:	051b      	lsls	r3, r3, #20
 8001198:	0d1b      	lsrs	r3, r3, #20
 800119a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011a2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80011a6:	e770      	b.n	800108a <HAL_PCD_IRQHandler+0x2d6>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80011a8:	f8b3 540c 	ldrh.w	r5, [r3, #1036]	; 0x40c
 80011ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d0e6      	beq.n	8001182 <HAL_PCD_IRQHandler+0x3ce>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80011b4:	462b      	mov	r3, r5
 80011b6:	f8b1 21d4 	ldrh.w	r2, [r1, #468]	; 0x1d4
 80011ba:	e7de      	b.n	800117a <HAL_PCD_IRQHandler+0x3c6>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80011bc:	f891 11cc 	ldrb.w	r1, [r1, #460]	; 0x1cc
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff fd03 	bl	8000bcc <HAL_PCD_EP_Receive>
 80011c6:	e77d      	b.n	80010c4 <HAL_PCD_IRQHandler+0x310>
 80011c8:	ffff8f0f 	.word	0xffff8f0f
 80011cc:	ffffbf8f 	.word	0xffffbf8f
 80011d0:	ffff8000 	.word	0xffff8000
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011d4:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 80011d8:	b22b      	sxth	r3, r5
 80011da:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011de:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011e2:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f04f 0308 	mov.w	r3, #8
 80011ec:	fb13 2305 	smlabb	r3, r3, r5, r2
 80011f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80011f4:	d01c      	beq.n	8001230 <HAL_PCD_IRQHandler+0x47c>
 80011f6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80011fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80011fe:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8001200:	b11b      	cbz	r3, 800120a <HAL_PCD_IRQHandler+0x456>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001202:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001204:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001206:	f000 f8ef 	bl	80013e8 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 800120a:	231c      	movs	r3, #28
 800120c:	fb03 4306 	mla	r3, r3, r6, r4
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001216:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800121a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800121e:	051b      	lsls	r3, r3, #20
 8001220:	0d1b      	lsrs	r3, r3, #20
 8001222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800122e:	e76f      	b.n	8001110 <HAL_PCD_IRQHandler+0x35c>
 8001230:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001234:	f3c3 0309 	ubfx	r3, r3, #0, #10
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001238:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0U)
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0e5      	beq.n	800120a <HAL_PCD_IRQHandler+0x456>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800123e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001240:	e7e0      	b.n	8001204 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001242:	f7ff fd3b 	bl	8000cbc <HAL_PCD_EP_Transmit>
 8001246:	e638      	b.n	8000eba <HAL_PCD_IRQHandler+0x106>

08001248 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001248:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 800124c:	2b01      	cmp	r3, #1
{
 800124e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001250:	d049      	beq.n	80012e6 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80U & ep_addr) == 0x80U)
 8001252:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 8001254:	2301      	movs	r3, #1
 8001256:	221c      	movs	r2, #28
 8001258:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  if ((0x80U & ep_addr) == 0x80U)
 800125c:	2c00      	cmp	r4, #0
 800125e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001262:	bfb5      	itete	lt
 8001264:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001268:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800126c:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800126e:	f502 72e6 	addge.w	r2, r2, #460	; 0x1cc
  }
  
  ep->is_stall = 1U;
 8001272:	2101      	movs	r1, #1
 8001274:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7FU;
 8001276:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001278:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7FU;
 800127a:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800127c:	7053      	strb	r3, [r2, #1]
 800127e:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0U)
 8001280:	b9a1      	cbnz	r1, 80012ac <HAL_PCD_EP_SetStall+0x64>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL) 
 8001282:	8813      	ldrh	r3, [r2, #0]
 8001284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001294:	f083 0310 	eor.w	r3, r3, #16
 8001298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 80012a2:	2300      	movs	r3, #0
 80012a4:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
  
  return HAL_OK;
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	b209      	sxth	r1, r1
    if (ep->is_in)
 80012ae:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80012b0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 80012b4:	da0e      	bge.n	80012d4 <HAL_PCD_EP_SetStall+0x8c>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL) 
 80012b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ce:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012d2:	e7e6      	b.n	80012a2 <HAL_PCD_EP_SetStall+0x5a>
 80012d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012e4:	e7ef      	b.n	80012c6 <HAL_PCD_EP_SetStall+0x7e>
  __HAL_LOCK(hpcd); 
 80012e6:	2002      	movs	r0, #2
}
 80012e8:	bd10      	pop	{r4, pc}

080012ea <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80012ea:	b24b      	sxtb	r3, r1
 80012ec:	2b00      	cmp	r3, #0
{
 80012ee:	b510      	push	{r4, lr}
 80012f0:	f04f 021c 	mov.w	r2, #28
 80012f4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012f8:	bfb5      	itete	lt
 80012fa:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012fe:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001302:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001304:	f501 71e6 	addge.w	r1, r1, #460	; 0x1cc
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7FU;
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001308:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 800130a:	2200      	movs	r2, #0
 800130c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800130e:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001310:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8001312:	f890 3370 	ldrb.w	r3, [r0, #880]	; 0x370
 8001316:	2b01      	cmp	r3, #1
 8001318:	d049      	beq.n	80013ae <HAL_PCD_EP_ClrStall+0xc4>
 800131a:	2301      	movs	r3, #1
 800131c:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
 8001320:	780b      	ldrb	r3, [r1, #0]
  
  if (ep->is_in)
 8001322:	784c      	ldrb	r4, [r1, #1]
 8001324:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001326:	b21b      	sxth	r3, r3
  if (ep->is_in)
 8001328:	b32c      	cbz	r4, 8001376 <HAL_PCD_EP_ClrStall+0x8c>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800132a:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800132e:	0664      	lsls	r4, r4, #25
 8001330:	d50b      	bpl.n	800134a <HAL_PCD_EP_ClrStall+0x60>
 8001332:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8001336:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800133a:	0524      	lsls	r4, r4, #20
 800133c:	0d24      	lsrs	r4, r4, #20
 800133e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001342:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8001346:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800134a:	7809      	ldrb	r1, [r1, #0]
 800134c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800136c:	2300      	movs	r3, #0
 800136e:	f880 3370 	strb.w	r3, [r0, #880]	; 0x370
    
  return HAL_OK;
 8001372:	4618      	mov	r0, r3
 8001374:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001376:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800137a:	0464      	lsls	r4, r4, #17
 800137c:	d50b      	bpl.n	8001396 <HAL_PCD_EP_ClrStall+0xac>
 800137e:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8001382:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8001386:	0524      	lsls	r4, r4, #20
 8001388:	0d24      	lsrs	r4, r4, #20
 800138a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800138e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001392:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001396:	7809      	ldrb	r1, [r1, #0]
 8001398:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800139c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	0c1b      	lsrs	r3, r3, #16
 80013a8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013ac:	e7d8      	b.n	8001360 <HAL_PCD_EP_ClrStall+0x76>
  __HAL_LOCK(hpcd); 
 80013ae:	2002      	movs	r0, #2
}
 80013b0:	bd10      	pop	{r4, pc}

080013b2 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80013b2:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80013b6:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013b8:	bf18      	it	ne
 80013ba:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80013be:	f04f 041c 	mov.w	r4, #28
 80013c2:	bf15      	itete	ne
 80013c4:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013c8:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013cc:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80013ce:	f500 70e6 	addeq.w	r0, r0, #460	; 0x1cc
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80013d2:	b91a      	cbnz	r2, 80013dc <HAL_PCDEx_PMAConfig+0x2a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80013d4:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80013d6:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 80013d8:	2000      	movs	r0, #0
 80013da:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 80013dc:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 80013de:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80013e0:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 80013e2:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80013e4:	8103      	strh	r3, [r0, #8]
 80013e6:	e7f7      	b.n	80013d8 <HAL_PCDEx_PMAConfig+0x26>

080013e8 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80013e8:	3301      	adds	r3, #1
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80013ea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80013ee:	f023 0301 	bic.w	r3, r3, #1
{
 80013f2:	b530      	push	{r4, r5, lr}
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80013f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80013f8:	440b      	add	r3, r1
  
  for (i = n; i != 0; i--)
 80013fa:	460c      	mov	r4, r1
 80013fc:	429c      	cmp	r4, r3
 80013fe:	d100      	bne.n	8001402 <PCD_WritePMA+0x1a>
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001400:	bd30      	pop	{r4, r5, pc}
    *pdwVal++ = temp2;
 8001402:	1a60      	subs	r0, r4, r1
 8001404:	8825      	ldrh	r5, [r4, #0]
 8001406:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
 800140a:	3402      	adds	r4, #2
 800140c:	e7f6      	b.n	80013fc <PCD_WritePMA+0x14>

0800140e <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800140e:	b570      	push	{r4, r5, r6, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8001410:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8001414:	085d      	lsrs	r5, r3, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8001416:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800141a:	1c8c      	adds	r4, r1, #2
  
  for (i = n; i != 0U; i--)
 800141c:	462e      	mov	r6, r5
 800141e:	b936      	cbnz	r6, 800142e <PCD_ReadPMA+0x20>
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
    pdwVal++;
  }

  if (wNBytes % 2)
 8001420:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal++;
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001422:	bf44      	itt	mi
 8001424:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
 8001428:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal++;
 800142e:	1a60      	subs	r0, r4, r1
 8001430:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  for (i = n; i != 0U; i--)
 8001434:	3e01      	subs	r6, #1
    temp = *pdwVal++;
 8001436:	f830 0c04 	ldrh.w	r0, [r0, #-4]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800143a:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800143e:	0a00      	lsrs	r0, r0, #8
 8001440:	f804 0c01 	strb.w	r0, [r4, #-1]
 8001444:	3402      	adds	r4, #2
 8001446:	e7ea      	b.n	800141e <PCD_ReadPMA+0x10>

08001448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	4605      	mov	r5, r0
 800144e:	b918      	cbnz	r0, 8001458 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001452:	b002      	add	sp, #8
 8001454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001458:	6803      	ldr	r3, [r0, #0]
 800145a:	07da      	lsls	r2, r3, #31
 800145c:	d411      	bmi.n	8001482 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	079b      	lsls	r3, r3, #30
 8001462:	f100 8085 	bmi.w	8001570 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	071c      	lsls	r4, r3, #28
 800146a:	f100 80f6 	bmi.w	800165a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	0758      	lsls	r0, r3, #29
 8001472:	f100 813f 	bmi.w	80016f4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001476:	69ea      	ldr	r2, [r5, #28]
 8001478:	2a00      	cmp	r2, #0
 800147a:	f040 81d6 	bne.w	800182a <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800147e:	2000      	movs	r0, #0
 8001480:	e7e7      	b.n	8001452 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001482:	4cba      	ldr	r4, [pc, #744]	; (800176c <HAL_RCC_OscConfig+0x324>)
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d007      	beq.n	800149e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148e:	6863      	ldr	r3, [r4, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d116      	bne.n	80014c6 <HAL_RCC_OscConfig+0x7e>
 8001498:	6863      	ldr	r3, [r4, #4]
 800149a:	03df      	lsls	r7, r3, #15
 800149c:	d513      	bpl.n	80014c6 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	6821      	ldr	r1, [r4, #0]
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2201      	movs	r2, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	420b      	tst	r3, r1
 80014bc:	d0cf      	beq.n	800145e <HAL_RCC_OscConfig+0x16>
 80014be:	686b      	ldr	r3, [r5, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1cc      	bne.n	800145e <HAL_RCC_OscConfig+0x16>
 80014c4:	e7c4      	b.n	8001450 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	686a      	ldr	r2, [r5, #4]
 80014c8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80014cc:	d125      	bne.n	800151a <HAL_RCC_OscConfig+0xd2>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014d8:	68a9      	ldr	r1, [r5, #8]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	430b      	orrs	r3, r1
 80014e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	b352      	cbz	r2, 800153a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 80014e4:	f7fe ff0e 	bl	8000304 <HAL_GetTick>
 80014e8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80014ec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	2701      	movs	r7, #1
 80014f0:	fa96 f3a6 	rbit	r3, r6
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	fa96 f3a6 	rbit	r3, r6
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	fa07 f303 	lsl.w	r3, r7, r3
 8001506:	4213      	tst	r3, r2
 8001508:	d1a9      	bne.n	800145e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150a:	f7fe fefb 	bl	8000304 <HAL_GetTick>
 800150e:	eba0 0008 	sub.w	r0, r0, r8
 8001512:	2864      	cmp	r0, #100	; 0x64
 8001514:	d9ec      	bls.n	80014f0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8001516:	2003      	movs	r0, #3
 8001518:	e79b      	b.n	8001452 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	b932      	cbnz	r2, 800152c <HAL_RCC_OscConfig+0xe4>
 800151e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001522:	6023      	str	r3, [r4, #0]
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	e7d3      	b.n	80014d4 <HAL_RCC_OscConfig+0x8c>
 800152c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001530:	d1f5      	bne.n	800151e <HAL_RCC_OscConfig+0xd6>
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	e7c9      	b.n	80014ce <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800153a:	f7fe fee3 	bl	8000304 <HAL_GetTick>
 800153e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001542:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001544:	2701      	movs	r7, #1
 8001546:	fa96 f3a6 	rbit	r3, r6
 800154a:	6822      	ldr	r2, [r4, #0]
 800154c:	fa96 f3a6 	rbit	r3, r6
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa07 f303 	lsl.w	r3, r7, r3
 800155c:	4213      	tst	r3, r2
 800155e:	f43f af7e 	beq.w	800145e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7fe fecf 	bl	8000304 <HAL_GetTick>
 8001566:	eba0 0008 	sub.w	r0, r0, r8
 800156a:	2864      	cmp	r0, #100	; 0x64
 800156c:	d9eb      	bls.n	8001546 <HAL_RCC_OscConfig+0xfe>
 800156e:	e7d2      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001570:	4c7e      	ldr	r4, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x324>)
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	f013 0f0c 	tst.w	r3, #12
 8001578:	d007      	beq.n	800158a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d122      	bne.n	80015ca <HAL_RCC_OscConfig+0x182>
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	03de      	lsls	r6, r3, #15
 8001588:	d41f      	bmi.n	80015ca <HAL_RCC_OscConfig+0x182>
 800158a:	2302      	movs	r3, #2
 800158c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2201      	movs	r2, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	420b      	tst	r3, r1
 80015a6:	d003      	beq.n	80015b0 <HAL_RCC_OscConfig+0x168>
 80015a8:	692b      	ldr	r3, [r5, #16]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f47f af50 	bne.w	8001450 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	23f8      	movs	r3, #248	; 0xf8
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	fab3 f283 	clz	r2, r3
 80015bc:	696b      	ldr	r3, [r5, #20]
 80015be:	4093      	lsls	r3, r2
 80015c0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	6023      	str	r3, [r4, #0]
 80015c8:	e74d      	b.n	8001466 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	692a      	ldr	r2, [r5, #16]
 80015cc:	2601      	movs	r6, #1
 80015ce:	b30a      	cbz	r2, 8001614 <HAL_RCC_OscConfig+0x1cc>
 80015d0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	2702      	movs	r7, #2
 80015e4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80015e6:	f7fe fe8d 	bl	8000304 <HAL_GetTick>
 80015ea:	4680      	mov	r8, r0
 80015ec:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	fa97 f3a7 	rbit	r3, r7
 80015f6:	fab3 f383 	clz	r3, r3
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	fa06 f303 	lsl.w	r3, r6, r3
 8001602:	4213      	tst	r3, r2
 8001604:	d1d4      	bne.n	80015b0 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7fe fe7d 	bl	8000304 <HAL_GetTick>
 800160a:	eba0 0008 	sub.w	r0, r0, r8
 800160e:	2802      	cmp	r0, #2
 8001610:	d9ec      	bls.n	80015ec <HAL_RCC_OscConfig+0x1a4>
 8001612:	e780      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 8001614:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	2702      	movs	r7, #2
 8001628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800162a:	f7fe fe6b 	bl	8000304 <HAL_GetTick>
 800162e:	4680      	mov	r8, r0
 8001630:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	fa97 f3a7 	rbit	r3, r7
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	fa06 f303 	lsl.w	r3, r6, r3
 8001646:	4213      	tst	r3, r2
 8001648:	f43f af0d 	beq.w	8001466 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7fe fe5a 	bl	8000304 <HAL_GetTick>
 8001650:	eba0 0008 	sub.w	r0, r0, r8
 8001654:	2802      	cmp	r0, #2
 8001656:	d9eb      	bls.n	8001630 <HAL_RCC_OscConfig+0x1e8>
 8001658:	e75d      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	69aa      	ldr	r2, [r5, #24]
 800165c:	4e43      	ldr	r6, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x324>)
 800165e:	4944      	ldr	r1, [pc, #272]	; (8001770 <HAL_RCC_OscConfig+0x328>)
 8001660:	2401      	movs	r4, #1
 8001662:	b31a      	cbz	r2, 80016ac <HAL_RCC_OscConfig+0x264>
 8001664:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	440b      	add	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	2702      	movs	r7, #2
 8001672:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001674:	f7fe fe46 	bl	8000304 <HAL_GetTick>
 8001678:	4680      	mov	r8, r0
 800167a:	fa97 f3a7 	rbit	r3, r7
 800167e:	fa97 f3a7 	rbit	r3, r7
 8001682:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001688:	fa97 f3a7 	rbit	r3, r7
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa04 f303 	lsl.w	r3, r4, r3
 8001698:	4213      	tst	r3, r2
 800169a:	f47f aee8 	bne.w	800146e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7fe fe31 	bl	8000304 <HAL_GetTick>
 80016a2:	eba0 0008 	sub.w	r0, r0, r8
 80016a6:	2802      	cmp	r0, #2
 80016a8:	d9e7      	bls.n	800167a <HAL_RCC_OscConfig+0x232>
 80016aa:	e734      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 80016ac:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	440b      	add	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	2702      	movs	r7, #2
 80016ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016bc:	f7fe fe22 	bl	8000304 <HAL_GetTick>
 80016c0:	4680      	mov	r8, r0
 80016c2:	fa97 f3a7 	rbit	r3, r7
 80016c6:	fa97 f3a7 	rbit	r3, r7
 80016ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ce:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80016d0:	fa97 f3a7 	rbit	r3, r7
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa04 f303 	lsl.w	r3, r4, r3
 80016e0:	4213      	tst	r3, r2
 80016e2:	f43f aec4 	beq.w	800146e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7fe fe0d 	bl	8000304 <HAL_GetTick>
 80016ea:	eba0 0008 	sub.w	r0, r0, r8
 80016ee:	2802      	cmp	r0, #2
 80016f0:	d9e7      	bls.n	80016c2 <HAL_RCC_OscConfig+0x27a>
 80016f2:	e710      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f4:	4c1d      	ldr	r4, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x324>)
 80016f6:	69e3      	ldr	r3, [r4, #28]
 80016f8:	00d9      	lsls	r1, r3, #3
 80016fa:	d434      	bmi.n	8001766 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	69e3      	ldr	r3, [r4, #28]
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	61e3      	str	r3, [r4, #28]
 8001704:	69e3      	ldr	r3, [r4, #28]
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800170e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4f18      	ldr	r7, [pc, #96]	; (8001774 <HAL_RCC_OscConfig+0x32c>)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	05da      	lsls	r2, r3, #23
 8001716:	d52f      	bpl.n	8001778 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	68eb      	ldr	r3, [r5, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d13d      	bne.n	800179a <HAL_RCC_OscConfig+0x352>
 800171e:	6a23      	ldr	r3, [r4, #32]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001726:	f7fe fded 	bl	8000304 <HAL_GetTick>
 800172a:	2702      	movs	r7, #2
 800172c:	4682      	mov	sl, r0
 800172e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	f04f 0801 	mov.w	r8, #1
 8001734:	fa97 f3a7 	rbit	r3, r7
 8001738:	fa97 f3a7 	rbit	r3, r7
 800173c:	2b00      	cmp	r3, #0
 800173e:	d06c      	beq.n	800181a <HAL_RCC_OscConfig+0x3d2>
 8001740:	6a22      	ldr	r2, [r4, #32]
 8001742:	fa99 f3a9 	rbit	r3, r9
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa08 f303 	lsl.w	r3, r8, r3
 8001752:	4213      	tst	r3, r2
 8001754:	d058      	beq.n	8001808 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8001756:	2e00      	cmp	r6, #0
 8001758:	f43f ae8d 	beq.w	8001476 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	69e3      	ldr	r3, [r4, #28]
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	61e3      	str	r3, [r4, #28]
 8001764:	e687      	b.n	8001476 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2600      	movs	r6, #0
 8001768:	e7d2      	b.n	8001710 <HAL_RCC_OscConfig+0x2c8>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	10908120 	.word	0x10908120
 8001774:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001780:	f7fe fdc0 	bl	8000304 <HAL_GetTick>
 8001784:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	05db      	lsls	r3, r3, #23
 800178a:	d4c5      	bmi.n	8001718 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7fe fdba 	bl	8000304 <HAL_GetTick>
 8001790:	eba0 0008 	sub.w	r0, r0, r8
 8001794:	2864      	cmp	r0, #100	; 0x64
 8001796:	d9f6      	bls.n	8001786 <HAL_RCC_OscConfig+0x33e>
 8001798:	e6bd      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	bb3b      	cbnz	r3, 80017ec <HAL_RCC_OscConfig+0x3a4>
 800179c:	6a23      	ldr	r3, [r4, #32]
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6223      	str	r3, [r4, #32]
 80017a4:	6a23      	ldr	r3, [r4, #32]
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017ac:	f7fe fdaa 	bl	8000304 <HAL_GetTick>
 80017b0:	2702      	movs	r7, #2
 80017b2:	4682      	mov	sl, r0
 80017b4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	f04f 0801 	mov.w	r8, #1
 80017ba:	fa97 f3a7 	rbit	r3, r7
 80017be:	fa97 f3a7 	rbit	r3, r7
 80017c2:	b373      	cbz	r3, 8001822 <HAL_RCC_OscConfig+0x3da>
 80017c4:	6a22      	ldr	r2, [r4, #32]
 80017c6:	fa99 f3a9 	rbit	r3, r9
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	fa08 f303 	lsl.w	r3, r8, r3
 80017d6:	4213      	tst	r3, r2
 80017d8:	d0bd      	beq.n	8001756 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe fd93 	bl	8000304 <HAL_GetTick>
 80017de:	f241 3388 	movw	r3, #5000	; 0x1388
 80017e2:	eba0 000a 	sub.w	r0, r0, sl
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d9e7      	bls.n	80017ba <HAL_RCC_OscConfig+0x372>
 80017ea:	e694      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	6a23      	ldr	r3, [r4, #32]
 80017f0:	d103      	bne.n	80017fa <HAL_RCC_OscConfig+0x3b2>
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6223      	str	r3, [r4, #32]
 80017f8:	e791      	b.n	800171e <HAL_RCC_OscConfig+0x2d6>
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	6223      	str	r3, [r4, #32]
 8001800:	6a23      	ldr	r3, [r4, #32]
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	e78d      	b.n	8001724 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7fe fd7c 	bl	8000304 <HAL_GetTick>
 800180c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001810:	eba0 000a 	sub.w	r0, r0, sl
 8001814:	4298      	cmp	r0, r3
 8001816:	d98d      	bls.n	8001734 <HAL_RCC_OscConfig+0x2ec>
 8001818:	e67d      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 800181a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001820:	e78f      	b.n	8001742 <HAL_RCC_OscConfig+0x2fa>
 8001822:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001828:	e7cd      	b.n	80017c6 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182a:	4c41      	ldr	r4, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x4e8>)
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	f43f ae0c 	beq.w	8001450 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	2a02      	cmp	r2, #2
 800183a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800183e:	d152      	bne.n	80018e6 <HAL_RCC_OscConfig+0x49e>
 8001840:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800184c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001856:	f7fe fd55 	bl	8000304 <HAL_GetTick>
 800185a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800185e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	2601      	movs	r6, #1
 8001862:	fa97 f3a7 	rbit	r3, r7
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	fa97 f3a7 	rbit	r3, r7
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa06 f303 	lsl.w	r3, r6, r3
 8001878:	4213      	tst	r3, r2
 800187a:	d12d      	bne.n	80018d8 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	6862      	ldr	r2, [r4, #4]
 800187e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001880:	6a29      	ldr	r1, [r5, #32]
 8001882:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001886:	430b      	orrs	r3, r1
 8001888:	4313      	orrs	r3, r2
 800188a:	6063      	str	r3, [r4, #4]
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80018a6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80018a8:	f7fe fd2c 	bl	8000304 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80018ae:	4607      	mov	r7, r0
 80018b0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	fa95 f3a5 	rbit	r3, r5
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	fa06 f303 	lsl.w	r3, r6, r3
 80018c6:	4213      	tst	r3, r2
 80018c8:	f47f add9 	bne.w	800147e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe fd1a 	bl	8000304 <HAL_GetTick>
 80018d0:	1bc0      	subs	r0, r0, r7
 80018d2:	2802      	cmp	r0, #2
 80018d4:	d9ec      	bls.n	80018b0 <HAL_RCC_OscConfig+0x468>
 80018d6:	e61e      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe fd14 	bl	8000304 <HAL_GetTick>
 80018dc:	eba0 0008 	sub.w	r0, r0, r8
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9be      	bls.n	8001862 <HAL_RCC_OscConfig+0x41a>
 80018e4:	e617      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 80018e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018fc:	f7fe fd02 	bl	8000304 <HAL_GetTick>
 8001900:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001904:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	2601      	movs	r6, #1
 8001908:	fa95 f3a5 	rbit	r3, r5
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	fa95 f3a5 	rbit	r3, r5
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	fa06 f303 	lsl.w	r3, r6, r3
 800191e:	4213      	tst	r3, r2
 8001920:	f43f adad 	beq.w	800147e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7fe fcee 	bl	8000304 <HAL_GetTick>
 8001928:	1bc0      	subs	r0, r0, r7
 800192a:	2802      	cmp	r0, #2
 800192c:	d9ec      	bls.n	8001908 <HAL_RCC_OscConfig+0x4c0>
 800192e:	e5f2      	b.n	8001516 <HAL_RCC_OscConfig+0xce>
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001936:	4c13      	ldr	r4, [pc, #76]	; (8001984 <HAL_RCC_GetSysClockFreq+0x50>)
 8001938:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193a:	f001 030c 	and.w	r3, r1, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11e      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x4c>
 8001942:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001946:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800194a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_RCC_GetSysClockFreq+0x54>)
 8001958:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800195a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800195c:	220f      	movs	r2, #15
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	40d3      	lsrs	r3, r2
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_RCC_GetSysClockFreq+0x58>)
 800196e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001970:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001972:	bf4a      	itet	mi
 8001974:	4b06      	ldrmi	r3, [pc, #24]	; (8001990 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001976:	4b07      	ldrpl	r3, [pc, #28]	; (8001994 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001978:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800197c:	4358      	muls	r0, r3
 800197e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001982:	bd10      	pop	{r4, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	08006962 	.word	0x08006962
 800198c:	08006972 	.word	0x08006972
 8001990:	007a1200 	.word	0x007a1200
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_ClockConfig>:
{
 8001998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800199c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	b910      	cbnz	r0, 80019a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_RCC_ClockConfig+0x144>)
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	428b      	cmp	r3, r1
 80019b2:	d32e      	bcc.n	8001a12 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	0791      	lsls	r1, r2, #30
 80019b8:	d436      	bmi.n	8001a28 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ba:	07d2      	lsls	r2, r2, #31
 80019bc:	d43c      	bmi.n	8001a38 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019be:	4a47      	ldr	r2, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x144>)
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	429d      	cmp	r5, r3
 80019c8:	d375      	bcc.n	8001ab6 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	4d44      	ldr	r5, [pc, #272]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 80019ce:	f012 0f04 	tst.w	r2, #4
 80019d2:	d17c      	bne.n	8001ace <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	0713      	lsls	r3, r2, #28
 80019d6:	d506      	bpl.n	80019e6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d8:	686b      	ldr	r3, [r5, #4]
 80019da:	6922      	ldr	r2, [r4, #16]
 80019dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019e4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019e6:	f7ff ffa5 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80019ea:	686b      	ldr	r3, [r5, #4]
 80019ec:	22f0      	movs	r2, #240	; 0xf0
 80019ee:	fa92 f2a2 	rbit	r2, r2
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019fa:	40d3      	lsrs	r3, r2
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x14c>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	40d8      	lsrs	r0, r3
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_ClockConfig+0x150>)
 8001a04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7fe fc3a 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	6813      	ldr	r3, [r2, #0]
 8001a14:	f023 0307 	bic.w	r3, r3, #7
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d1bd      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xa>
 8001a26:	e7c5      	b.n	80019b4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	492d      	ldr	r1, [pc, #180]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 8001a2a:	68a0      	ldr	r0, [r4, #8]
 8001a2c:	684b      	ldr	r3, [r1, #4]
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a32:	4303      	orrs	r3, r0
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e7c0      	b.n	80019ba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	6862      	ldr	r2, [r4, #4]
 8001a3a:	4e29      	ldr	r6, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x148>)
 8001a3c:	2a01      	cmp	r2, #1
 8001a3e:	d127      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
 8001a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a44:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a48:	6831      	ldr	r1, [r6, #0]
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	d0a1      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	6873      	ldr	r3, [r6, #4]
 8001a60:	f023 0303 	bic.w	r3, r3, #3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001a68:	f7fe fc4c 	bl	8000304 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	6873      	ldr	r3, [r6, #4]
 8001a74:	6862      	ldr	r2, [r4, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a7e:	d09e      	beq.n	80019be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7fe fc40 	bl	8000304 <HAL_GetTick>
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	4540      	cmp	r0, r8
 8001a88:	d9f3      	bls.n	8001a72 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001a8a:	2003      	movs	r0, #3
}
 8001a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	2a02      	cmp	r2, #2
 8001a92:	bf0c      	ite	eq
 8001a94:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a98:	2302      	movne	r3, #2
 8001a9a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	6830      	ldr	r0, [r6, #0]
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	4203      	tst	r3, r0
 8001ab4:	e7d2      	b.n	8001a5c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
 8001abc:	432b      	orrs	r3, r5
 8001abe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	f47f af6b 	bne.w	80019a2 <HAL_RCC_ClockConfig+0xa>
 8001acc:	e77d      	b.n	80019ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	686b      	ldr	r3, [r5, #4]
 8001ad0:	68e1      	ldr	r1, [r4, #12]
 8001ad2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	606b      	str	r3, [r5, #4]
 8001ada:	e77b      	b.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08006ca7 	.word	0x08006ca7
 8001ae8:	20000118 	.word	0x20000118

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	fa92 f2a2 	rbit	r2, r2
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b00:	40d3      	lsrs	r3, r2
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b08:	6810      	ldr	r0, [r2, #0]
}    
 8001b0a:	40d8      	lsrs	r0, r3
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08006cb7 	.word	0x08006cb7
 8001b18:	20000118 	.word	0x20000118

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	fa92 f2a2 	rbit	r2, r2
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b30:	40d3      	lsrs	r3, r2
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001b38:	6810      	ldr	r0, [r2, #0]
} 
 8001b3a:	40d8      	lsrs	r0, r3
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08006cb7 	.word	0x08006cb7
 8001b48:	20000118 	.word	0x20000118

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b4c:	6803      	ldr	r3, [r0, #0]
{
 8001b4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b52:	03dd      	lsls	r5, r3, #15
{
 8001b54:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b56:	d523      	bpl.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b58:	4d7c      	ldr	r5, [pc, #496]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b5a:	69eb      	ldr	r3, [r5, #28]
 8001b5c:	00d8      	lsls	r0, r3, #3
 8001b5e:	f100 8098 	bmi.w	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	69eb      	ldr	r3, [r5, #28]
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61eb      	str	r3, [r5, #28]
 8001b6a:	69eb      	ldr	r3, [r5, #28]
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b74:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4f76      	ldr	r7, [pc, #472]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	05d9      	lsls	r1, r3, #23
 8001b7c:	f140 808b 	bpl.w	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b80:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b86:	f040 809b 	bne.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b8a:	6a2b      	ldr	r3, [r5, #32]
 8001b8c:	6862      	ldr	r2, [r4, #4]
 8001b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b92:	4313      	orrs	r3, r2
 8001b94:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b96:	b11e      	cbz	r6, 8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	69eb      	ldr	r3, [r5, #28]
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	07c7      	lsls	r7, r0, #31
 8001ba4:	d506      	bpl.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ba8:	68a1      	ldr	r1, [r4, #8]
 8001baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bac:	f023 0303 	bic.w	r3, r3, #3
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb4:	0786      	lsls	r6, r0, #30
 8001bb6:	d506      	bpl.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bb8:	4a64      	ldr	r2, [pc, #400]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bba:	68e1      	ldr	r1, [r4, #12]
 8001bbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bc6:	0745      	lsls	r5, r0, #29
 8001bc8:	d506      	bpl.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bcc:	6921      	ldr	r1, [r4, #16]
 8001bce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bd0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bd8:	0681      	lsls	r1, r0, #26
 8001bda:	d506      	bpl.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bdc:	4a5b      	ldr	r2, [pc, #364]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bde:	69e1      	ldr	r1, [r4, #28]
 8001be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001be2:	f023 0310 	bic.w	r3, r3, #16
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bea:	0382      	lsls	r2, r0, #14
 8001bec:	d506      	bpl.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001bee:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001bf0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bf2:	6853      	ldr	r3, [r2, #4]
 8001bf4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bfc:	0643      	lsls	r3, r0, #25
 8001bfe:	d506      	bpl.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c02:	6a21      	ldr	r1, [r4, #32]
 8001c04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c06:	f023 0320 	bic.w	r3, r3, #32
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c0e:	0707      	lsls	r7, r0, #28
 8001c10:	d506      	bpl.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c12:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c14:	6961      	ldr	r1, [r4, #20]
 8001c16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c20:	06c6      	lsls	r6, r0, #27
 8001c22:	d506      	bpl.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c24:	4a49      	ldr	r2, [pc, #292]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c26:	69a1      	ldr	r1, [r4, #24]
 8001c28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001c32:	0585      	lsls	r5, r0, #22
 8001c34:	d506      	bpl.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c36:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c3a:	6853      	ldr	r3, [r2, #4]
 8001c3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c44:	0601      	lsls	r1, r0, #24
 8001c46:	d506      	bpl.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c4e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001c52:	430b      	orrs	r3, r1
 8001c54:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001c56:	05c2      	lsls	r2, r0, #23
 8001c58:	d506      	bpl.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c60:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001c64:	430b      	orrs	r3, r1
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c68:	04c3      	lsls	r3, r0, #19
 8001c6a:	d506      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c76:	430b      	orrs	r3, r1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001c7a:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001c7e:	d01c      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e013      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2600      	movs	r6, #0
 8001c94:	e76f      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fb31 	bl	8000304 <HAL_GetTick>
 8001ca2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	05da      	lsls	r2, r3, #23
 8001ca8:	f53f af6a 	bmi.w	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cac:	f7fe fb2a 	bl	8000304 <HAL_GetTick>
 8001cb0:	eba0 0008 	sub.w	r0, r0, r8
 8001cb4:	2864      	cmp	r0, #100	; 0x64
 8001cb6:	d9f5      	bls.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8001cb8:	2003      	movs	r0, #3
}
 8001cba:	b002      	add	sp, #8
 8001cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc0:	6862      	ldr	r2, [r4, #4]
 8001cc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f43f af5f 	beq.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ccc:	6a29      	ldr	r1, [r5, #32]
 8001cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001cd6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cda:	f8df e078 	ldr.w	lr, [pc, #120]	; 8001d54 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	4472      	add	r2, lr
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	2701      	movs	r7, #1
 8001ce8:	6017      	str	r7, [r2, #0]
 8001cea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	4473      	add	r3, lr
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfa:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001cfc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfe:	f57f af44 	bpl.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001d02:	f7fe faff 	bl	8000304 <HAL_GetTick>
 8001d06:	f04f 0802 	mov.w	r8, #2
 8001d0a:	4682      	mov	sl, r0
 8001d0c:	46c1      	mov	r9, r8
 8001d0e:	fa98 f3a8 	rbit	r3, r8
 8001d12:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	b1a3      	cbz	r3, 8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001d18:	6a2a      	ldr	r2, [r5, #32]
 8001d1a:	fa99 f3a9 	rbit	r3, r9
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa07 f303 	lsl.w	r3, r7, r3
 8001d2a:	4213      	tst	r3, r2
 8001d2c:	f47f af2d 	bne.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe fae8 	bl	8000304 <HAL_GetTick>
 8001d34:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d38:	eba0 000a 	sub.w	r0, r0, sl
 8001d3c:	4298      	cmp	r0, r3
 8001d3e:	d9e6      	bls.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8001d40:	e7ba      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d48:	e7e7      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
 8001d54:	10908100 	.word	0x10908100

08001d58 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d62:	6842      	ldr	r2, [r0, #4]
 8001d64:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001d68:	d10a      	bne.n	8001d80 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001d6a:	6882      	ldr	r2, [r0, #8]
 8001d6c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d70:	d002      	beq.n	8001d78 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d72:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001d76:	d103      	bne.n	8001d80 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001d82:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d86:	d107      	bne.n	8001d98 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001da4:	2003      	movs	r0, #3
 8001da6:	4770      	bx	lr

08001da8 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	4605      	mov	r5, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	6898      	ldr	r0, [r3, #8]
 8001db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001db8:	d00d      	beq.n	8001dd6 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	1c62      	adds	r2, r4, #1
 8001dbc:	d0f9      	beq.n	8001db2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001dbe:	b924      	cbnz	r4, 8001dca <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 8001dc0:	4628      	mov	r0, r5
}
 8001dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001dc6:	f7ff bfc7 	b.w	8001d58 <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001dca:	f7fe fa9b 	bl	8000304 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	4284      	cmp	r4, r0
 8001dd2:	d8ed      	bhi.n	8001db0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001dd4:	e7f4      	b.n	8001dc0 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}

08001dd8 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dda:	4606      	mov	r6, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	4615      	mov	r5, r2
 8001de0:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001de2:	6831      	ldr	r1, [r6, #0]
 8001de4:	6888      	ldr	r0, [r1, #8]
 8001de6:	4020      	ands	r0, r4
 8001de8:	d00e      	beq.n	8001e08 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001dea:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001dee:	bf01      	itttt	eq
 8001df0:	7b0a      	ldrbeq	r2, [r1, #12]
 8001df2:	b2d2      	uxtbeq	r2, r2
 8001df4:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001df8:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8001dfc:	1c6b      	adds	r3, r5, #1
 8001dfe:	d0f1      	beq.n	8001de4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001e00:	b925      	cbnz	r5, 8001e0c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7ff ffa8 	bl	8001d58 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001e08:	b003      	add	sp, #12
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001e0c:	f7fe fa7a 	bl	8000304 <HAL_GetTick>
 8001e10:	1bc0      	subs	r0, r0, r7
 8001e12:	4285      	cmp	r5, r0
 8001e14:	d8e5      	bhi.n	8001de2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001e16:	e7f4      	b.n	8001e02 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08001e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e1a:	4613      	mov	r3, r2
{
 8001e1c:	460d      	mov	r5, r1
 8001e1e:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e20:	460a      	mov	r2, r1
 8001e22:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001e26:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e28:	f7ff ffd6 	bl	8001dd8 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001e2c:	b128      	cbz	r0, 8001e3a <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001e36:	2003      	movs	r0, #3
 8001e38:	e00f      	b.n	8001e5a <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e3a:	4632      	mov	r2, r6
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff ffb2 	bl	8001da8 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1f2      	bne.n	8001e2e <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e48:	4633      	mov	r3, r6
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff ffc1 	bl	8001dd8 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d1e9      	bne.n	8001e2e <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}

08001e5c <HAL_SPI_Init>:
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001e5e:	4604      	mov	r4, r0
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d04e      	beq.n	8001f02 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e68:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001e6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e70:	b91b      	cbnz	r3, 8001e7a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001e72:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001e76:	f003 fb95 	bl	80055a4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e7a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001e7c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e7e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001e82:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e84:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e8a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001e8e:	600b      	str	r3, [r1, #0]
 8001e90:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e94:	d932      	bls.n	8001efc <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e96:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e98:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9c:	bf18      	it	ne
 8001e9e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ea0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ea2:	b92b      	cbnz	r3, 8001eb0 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ea4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001ea8:	bf8c      	ite	hi
 8001eaa:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001eac:	2301      	movls	r3, #1
 8001eae:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001eb0:	68a6      	ldr	r6, [r4, #8]
 8001eb2:	6863      	ldr	r3, [r4, #4]
 8001eb4:	69a5      	ldr	r5, [r4, #24]
 8001eb6:	4333      	orrs	r3, r6
 8001eb8:	6926      	ldr	r6, [r4, #16]
 8001eba:	4333      	orrs	r3, r6
 8001ebc:	6966      	ldr	r6, [r4, #20]
 8001ebe:	4333      	orrs	r3, r6
 8001ec0:	69e6      	ldr	r6, [r4, #28]
 8001ec2:	4333      	orrs	r3, r6
 8001ec4:	6a26      	ldr	r6, [r4, #32]
 8001ec6:	4333      	orrs	r3, r6
 8001ec8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eca:	4333      	orrs	r3, r6
 8001ecc:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001ed0:	4333      	orrs	r3, r6
 8001ed2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001eda:	0c2d      	lsrs	r5, r5, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	f005 0504 	and.w	r5, r5, #4
 8001ee2:	432a      	orrs	r2, r5
 8001ee4:	4302      	orrs	r2, r0
 8001ee6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ee8:	69cb      	ldr	r3, [r1, #28]
 8001eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eee:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ef4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001efc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f00:	e7cc      	b.n	8001e9c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	bd70      	pop	{r4, r5, r6, pc}

08001f06 <HAL_SPI_Transmit>:
{
 8001f06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f0a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001f0c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001f10:	2b01      	cmp	r3, #1
{
 8001f12:	4604      	mov	r4, r0
 8001f14:	460d      	mov	r5, r1
 8001f16:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001f18:	f000 80b1 	beq.w	800207e <HAL_SPI_Transmit+0x178>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001f22:	f7fe f9ef 	bl	8000304 <HAL_GetTick>
 8001f26:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001f28:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001f2c:	b2c0      	uxtb	r0, r0
 8001f2e:	2801      	cmp	r0, #1
 8001f30:	f040 80a3 	bne.w	800207a <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	d057      	beq.n	8001fe8 <HAL_SPI_Transmit+0xe2>
 8001f38:	f1b8 0f00 	cmp.w	r8, #0
 8001f3c:	d054      	beq.n	8001fe8 <HAL_SPI_Transmit+0xe2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f48:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001f4a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001f4e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f52:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f56:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f58:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5a:	68a3      	ldr	r3, [r4, #8]
 8001f5c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f5e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001f64:	bf08      	it	eq
 8001f66:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001f68:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001f6c:	bf04      	itt	eq
 8001f6e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001f72:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f74:	6803      	ldr	r3, [r0, #0]
 8001f76:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001f78:	bf5e      	ittt	pl
 8001f7a:	6803      	ldrpl	r3, [r0, #0]
 8001f7c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001f80:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f82:	68e3      	ldr	r3, [r4, #12]
 8001f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	d93e      	bls.n	800200a <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f8c:	b11b      	cbz	r3, 8001f96 <HAL_SPI_Transmit+0x90>
 8001f8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001f96:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001f9a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001f9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001fa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b9a3      	cbnz	r3, 8001fd4 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001faa:	463a      	mov	r2, r7
 8001fac:	4631      	mov	r1, r6
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff ff32 	bl	8001e18 <SPI_EndRxTxTransaction>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d15d      	bne.n	8002074 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fb8:	68a3      	ldr	r3, [r4, #8]
 8001fba:	b933      	cbnz	r3, 8001fca <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	9201      	str	r2, [sp, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fca:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001fcc:	3000      	adds	r0, #0
 8001fce:	bf18      	it	ne
 8001fd0:	2001      	movne	r0, #1
 8001fd2:	e009      	b.n	8001fe8 <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	0790      	lsls	r0, r2, #30
 8001fda:	d503      	bpl.n	8001fe4 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001fdc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	e7db      	b.n	8001f9c <HAL_SPI_Transmit+0x96>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001fe4:	b94e      	cbnz	r6, 8001ffa <HAL_SPI_Transmit+0xf4>
          errorcode = HAL_TIMEOUT;
 8001fe6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001ff4:	b002      	add	sp, #8
 8001ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001ffa:	1c71      	adds	r1, r6, #1
 8001ffc:	d0d2      	beq.n	8001fa4 <HAL_SPI_Transmit+0x9e>
 8001ffe:	f7fe f981 	bl	8000304 <HAL_GetTick>
 8002002:	1bc0      	subs	r0, r0, r7
 8002004:	4286      	cmp	r6, r0
 8002006:	d8cd      	bhi.n	8001fa4 <HAL_SPI_Transmit+0x9e>
 8002008:	e7ed      	b.n	8001fe6 <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800200a:	b11b      	cbz	r3, 8002014 <HAL_SPI_Transmit+0x10e>
 800200c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10a      	bne.n	800202a <HAL_SPI_Transmit+0x124>
      if (hspi->TxXferCount > 1U)
 8002014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d916      	bls.n	800204a <HAL_SPI_Transmit+0x144>
        hspi->Instance->DR = *((uint16_t *)pData);
 800201c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002020:	60c3      	str	r3, [r0, #12]
          hspi->TxXferCount -= 2U;
 8002022:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002024:	3b02      	subs	r3, #2
 8002026:	b29b      	uxth	r3, r3
 8002028:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800202a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0bb      	beq.n	8001faa <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	0792      	lsls	r2, r2, #30
 8002038:	d512      	bpl.n	8002060 <HAL_SPI_Transmit+0x15a>
        if (hspi->TxXferCount > 1U)
 800203a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800203c:	b292      	uxth	r2, r2
 800203e:	2a01      	cmp	r2, #1
 8002040:	d90b      	bls.n	800205a <HAL_SPI_Transmit+0x154>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002042:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e7eb      	b.n	8002022 <HAL_SPI_Transmit+0x11c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800204a:	782b      	ldrb	r3, [r5, #0]
 800204c:	7303      	strb	r3, [r0, #12]
          hspi->TxXferCount--;
 800204e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002050:	3b01      	subs	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002056:	3501      	adds	r5, #1
 8002058:	e7e7      	b.n	800202a <HAL_SPI_Transmit+0x124>
 800205a:	782a      	ldrb	r2, [r5, #0]
 800205c:	731a      	strb	r2, [r3, #12]
 800205e:	e7f6      	b.n	800204e <HAL_SPI_Transmit+0x148>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002060:	2e00      	cmp	r6, #0
 8002062:	d0c0      	beq.n	8001fe6 <HAL_SPI_Transmit+0xe0>
 8002064:	1c73      	adds	r3, r6, #1
 8002066:	d0e0      	beq.n	800202a <HAL_SPI_Transmit+0x124>
 8002068:	f7fe f94c 	bl	8000304 <HAL_GetTick>
 800206c:	1bc0      	subs	r0, r0, r7
 800206e:	4286      	cmp	r6, r0
 8002070:	d8db      	bhi.n	800202a <HAL_SPI_Transmit+0x124>
 8002072:	e7b8      	b.n	8001fe6 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002074:	2320      	movs	r3, #32
 8002076:	6623      	str	r3, [r4, #96]	; 0x60
 8002078:	e79e      	b.n	8001fb8 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 800207a:	2002      	movs	r0, #2
 800207c:	e7b4      	b.n	8001fe8 <HAL_SPI_Transmit+0xe2>
  __HAL_LOCK(hspi);
 800207e:	2002      	movs	r0, #2
 8002080:	e7b8      	b.n	8001ff4 <HAL_SPI_Transmit+0xee>

08002082 <HAL_SPI_TransmitReceive>:
{
 8002082:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002086:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002088:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800208c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002090:	2b01      	cmp	r3, #1
{
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 8002098:	f000 811c 	beq.w	80022d4 <HAL_SPI_TransmitReceive+0x252>
 800209c:	2301      	movs	r3, #1
 800209e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80020a2:	f7fe f92f 	bl	8000304 <HAL_GetTick>
  tmp  = hspi->State;
 80020a6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 80020aa:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80020ac:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80020ae:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80020b0:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80020b2:	d00a      	beq.n	80020ca <HAL_SPI_TransmitReceive+0x48>
 80020b4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80020b8:	f040 8108 	bne.w	80022cc <HAL_SPI_TransmitReceive+0x24a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80020bc:	68a2      	ldr	r2, [r4, #8]
 80020be:	2a00      	cmp	r2, #0
 80020c0:	f040 8104 	bne.w	80022cc <HAL_SPI_TransmitReceive+0x24a>
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	f040 8101 	bne.w	80022cc <HAL_SPI_TransmitReceive+0x24a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020ca:	2d00      	cmp	r5, #0
 80020cc:	f000 8100 	beq.w	80022d0 <HAL_SPI_TransmitReceive+0x24e>
 80020d0:	2e00      	cmp	r6, #0
 80020d2:	f000 80fd 	beq.w	80022d0 <HAL_SPI_TransmitReceive+0x24e>
 80020d6:	2f00      	cmp	r7, #0
 80020d8:	f000 80fa 	beq.w	80022d0 <HAL_SPI_TransmitReceive+0x24e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020dc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020e0:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020e2:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020e4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020e6:	bf1c      	itt	ne
 80020e8:	2305      	movne	r3, #5
 80020ea:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ee:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80020f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80020f6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80020f8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80020fc:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80020fe:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002102:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002104:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002106:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002108:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800210a:	d804      	bhi.n	8002116 <HAL_SPI_TransmitReceive+0x94>
 800210c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002110:	b292      	uxth	r2, r2
 8002112:	2a01      	cmp	r2, #1
 8002114:	d92e      	bls.n	8002174 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800211c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002122:	bf5e      	ittt	pl
 8002124:	681a      	ldrpl	r2, [r3, #0]
 8002126:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800212a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800212c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002130:	d958      	bls.n	80021e4 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002132:	b119      	cbz	r1, 800213c <HAL_SPI_TransmitReceive+0xba>
 8002134:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002136:	b292      	uxth	r2, r2
 8002138:	2a01      	cmp	r2, #1
 800213a:	d106      	bne.n	800214a <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800213c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002140:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002142:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002144:	3b01      	subs	r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800214a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800214c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800214e:	b29b      	uxth	r3, r3
 8002150:	b9a3      	cbnz	r3, 800217c <HAL_SPI_TransmitReceive+0xfa>
 8002152:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002156:	b29b      	uxth	r3, r3
 8002158:	b983      	cbnz	r3, 800217c <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800215a:	464a      	mov	r2, r9
 800215c:	4641      	mov	r1, r8
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fe5a 	bl	8001e18 <SPI_EndRxTxTransaction>
 8002164:	2800      	cmp	r0, #0
 8002166:	f040 80ae 	bne.w	80022c6 <HAL_SPI_TransmitReceive+0x244>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800216a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800216c:	3000      	adds	r0, #0
 800216e:	bf18      	it	ne
 8002170:	2001      	movne	r0, #1
 8002172:	e02f      	b.n	80021d4 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800217a:	e7cf      	b.n	800211c <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800217c:	b177      	cbz	r7, 800219c <HAL_SPI_TransmitReceive+0x11a>
 800217e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	b15b      	cbz	r3, 800219c <HAL_SPI_TransmitReceive+0x11a>
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	0792      	lsls	r2, r2, #30
 800218a:	d507      	bpl.n	800219c <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800218c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002190:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002194:	3b01      	subs	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800219a:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800219c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	b16b      	cbz	r3, 80021c0 <HAL_SPI_TransmitReceive+0x13e>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	07d0      	lsls	r0, r2, #31
 80021aa:	d509      	bpl.n	80021c0 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80021b2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80021be:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80021c0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80021c4:	d0c2      	beq.n	800214c <HAL_SPI_TransmitReceive+0xca>
 80021c6:	f7fe f89d 	bl	8000304 <HAL_GetTick>
 80021ca:	eba0 0009 	sub.w	r0, r0, r9
 80021ce:	4580      	cmp	r8, r0
 80021d0:	d8bc      	bhi.n	800214c <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80021da:	2300      	movs	r3, #0
 80021dc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80021e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021e4:	b119      	cbz	r1, 80021ee <HAL_SPI_TransmitReceive+0x16c>
 80021e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80021e8:	b292      	uxth	r2, r2
 80021ea:	2a01      	cmp	r2, #1
 80021ec:	d10a      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x182>
      if (hspi->TxXferCount > 1U)
 80021ee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80021f0:	b292      	uxth	r2, r2
 80021f2:	2a01      	cmp	r2, #1
 80021f4:	d94d      	bls.n	8002292 <HAL_SPI_TransmitReceive+0x210>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80021f6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80021fa:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80021fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021fe:	3b02      	subs	r3, #2
 8002200:	b29b      	uxth	r3, r3
 8002202:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002204:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	b923      	cbnz	r3, 8002216 <HAL_SPI_TransmitReceive+0x194>
 800220c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0a1      	beq.n	800215a <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002216:	b197      	cbz	r7, 800223e <HAL_SPI_TransmitReceive+0x1bc>
 8002218:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	b17b      	cbz	r3, 800223e <HAL_SPI_TransmitReceive+0x1bc>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	0791      	lsls	r1, r2, #30
 8002224:	d50b      	bpl.n	800223e <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8002226:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002228:	b292      	uxth	r2, r2
 800222a:	2a01      	cmp	r2, #1
 800222c:	d939      	bls.n	80022a2 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800222e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002232:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002234:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002236:	3b02      	subs	r3, #2
 8002238:	b29b      	uxth	r3, r3
 800223a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800223c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800223e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002242:	b29b      	uxth	r3, r3
 8002244:	b1db      	cbz	r3, 800227e <HAL_SPI_TransmitReceive+0x1fc>
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	07d2      	lsls	r2, r2, #31
 800224c:	d517      	bpl.n	800227e <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->RxXferCount > 1U)
 800224e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002252:	b292      	uxth	r2, r2
 8002254:	2a01      	cmp	r2, #1
 8002256:	d92c      	bls.n	80022b2 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 800225e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002262:	3a02      	subs	r2, #2
 8002264:	b292      	uxth	r2, r2
 8002266:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800226a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800226e:	b292      	uxth	r2, r2
 8002270:	2a01      	cmp	r2, #1
 8002272:	d803      	bhi.n	800227c <HAL_SPI_TransmitReceive+0x1fa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800227a:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800227c:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800227e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002282:	d0c0      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x184>
 8002284:	f7fe f83e 	bl	8000304 <HAL_GetTick>
 8002288:	eba0 0009 	sub.w	r0, r0, r9
 800228c:	4580      	cmp	r8, r0
 800228e:	d8ba      	bhi.n	8002206 <HAL_SPI_TransmitReceive+0x184>
 8002290:	e79f      	b.n	80021d2 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002292:	782a      	ldrb	r2, [r5, #0]
 8002294:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002296:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002298:	3b01      	subs	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800229e:	3501      	adds	r5, #1
 80022a0:	e7b0      	b.n	8002204 <HAL_SPI_TransmitReceive+0x182>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80022a2:	782a      	ldrb	r2, [r5, #0]
 80022a4:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80022a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80022ae:	3501      	adds	r5, #1
 80022b0:	e7c4      	b.n	800223c <HAL_SPI_TransmitReceive+0x1ba>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022b2:	7b1b      	ldrb	r3, [r3, #12]
 80022b4:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 80022b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022c2:	3601      	adds	r6, #1
 80022c4:	e7da      	b.n	800227c <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c6:	2320      	movs	r3, #32
 80022c8:	6623      	str	r3, [r4, #96]	; 0x60
 80022ca:	e74e      	b.n	800216a <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 80022cc:	2002      	movs	r0, #2
 80022ce:	e781      	b.n	80021d4 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e77f      	b.n	80021d4 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 80022d4:	2002      	movs	r0, #2
}
 80022d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080022da <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022da:	6803      	ldr	r3, [r0, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	2320      	movs	r3, #32
 80022ee:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80022f2:	4770      	bx	lr

080022f4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80022f4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d135      	bne.n	8002368 <HAL_UART_Receive_IT+0x74>
    if((pData == NULL ) || (Size == 0U))
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d031      	beq.n	8002364 <HAL_UART_Receive_IT+0x70>
 8002300:	b382      	cbz	r2, 8002364 <HAL_UART_Receive_IT+0x70>
    __HAL_LOCK(huart);
 8002302:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002306:	2b01      	cmp	r3, #1
 8002308:	d02e      	beq.n	8002368 <HAL_UART_Receive_IT+0x74>
 800230a:	2301      	movs	r3, #1
 800230c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8002310:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8002312:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002318:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800231c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002320:	d119      	bne.n	8002356 <HAL_UART_Receive_IT+0x62>
 8002322:	6903      	ldr	r3, [r0, #16]
 8002324:	b9ab      	cbnz	r3, 8002352 <HAL_UART_Receive_IT+0x5e>
 8002326:	f240 13ff 	movw	r3, #511	; 0x1ff
 800232a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002330:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002332:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002334:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002338:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 800233a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233e:	6891      	ldr	r1, [r2, #8]
 8002340:	f041 0101 	orr.w	r1, r1, #1
 8002344:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002346:	6811      	ldr	r1, [r2, #0]
 8002348:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800234c:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800234e:	4618      	mov	r0, r3
 8002350:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002352:	23ff      	movs	r3, #255	; 0xff
 8002354:	e7e9      	b.n	800232a <HAL_UART_Receive_IT+0x36>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1e9      	bne.n	800232e <HAL_UART_Receive_IT+0x3a>
 800235a:	6903      	ldr	r3, [r0, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f8      	beq.n	8002352 <HAL_UART_Receive_IT+0x5e>
 8002360:	237f      	movs	r3, #127	; 0x7f
 8002362:	e7e2      	b.n	800232a <HAL_UART_Receive_IT+0x36>
      return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
 8002366:	4770      	bx	lr
    return HAL_BUSY;
 8002368:	2002      	movs	r0, #2
}
 800236a:	4770      	bx	lr

0800236c <HAL_UART_TxCpltCallback>:
 800236c:	4770      	bx	lr

0800236e <HAL_UART_RxCpltCallback>:
 800236e:	4770      	bx	lr

08002370 <HAL_UART_ErrorCallback>:
 8002370:	4770      	bx	lr

08002372 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002372:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002374:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800237c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002380:	f7ff fff6 	bl	8002370 <HAL_UART_ErrorCallback>
 8002384:	bd08      	pop	{r3, pc}
	...

08002388 <UART_SetConfig>:
{
 8002388:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238a:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800238c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002390:	6829      	ldr	r1, [r5, #0]
{
 8002392:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002394:	6900      	ldr	r0, [r0, #16]
 8002396:	4302      	orrs	r2, r0
 8002398:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800239a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a6:	430a      	orrs	r2, r1
 80023a8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	686a      	ldr	r2, [r5, #4]
 80023ac:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023b4:	430a      	orrs	r2, r1
 80023b6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023b8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <UART_SetConfig+0x1f8>)
 80023c8:	4295      	cmp	r5, r2
 80023ca:	d112      	bne.n	80023f2 <UART_SetConfig+0x6a>
 80023cc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80023d0:	496c      	ldr	r1, [pc, #432]	; (8002584 <UART_SetConfig+0x1fc>)
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023dc:	5c8a      	ldrb	r2, [r1, r2]
 80023de:	d066      	beq.n	80024ae <UART_SetConfig+0x126>
    switch (clocksource)
 80023e0:	2a08      	cmp	r2, #8
 80023e2:	d819      	bhi.n	8002418 <UART_SetConfig+0x90>
 80023e4:	e8df f002 	tbb	[pc, r2]
 80023e8:	189e92c2 	.word	0x189e92c2
 80023ec:	181818a9 	.word	0x181818a9
 80023f0:	ac          	.byte	0xac
 80023f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	4a65      	ldr	r2, [pc, #404]	; (8002588 <UART_SetConfig+0x200>)
 80023f4:	4295      	cmp	r5, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0xba>
 80023f8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002402:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002406:	f000 80a0 	beq.w	800254a <UART_SetConfig+0x1c2>
 800240a:	d807      	bhi.n	800241c <UART_SetConfig+0x94>
 800240c:	2a00      	cmp	r2, #0
 800240e:	f000 80aa 	beq.w	8002566 <UART_SetConfig+0x1de>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002416:	d076      	beq.n	8002506 <UART_SetConfig+0x17e>
        ret = HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  return ret;
 800241a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002420:	f000 8099 	beq.w	8002556 <UART_SetConfig+0x1ce>
 8002424:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002428:	d1f3      	bne.n	8002412 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d179      	bne.n	8002524 <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002430:	6860      	ldr	r0, [r4, #4]
 8002432:	0843      	lsrs	r3, r0, #1
 8002434:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002438:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800243c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002440:	e054      	b.n	80024ec <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	4a52      	ldr	r2, [pc, #328]	; (800258c <UART_SetConfig+0x204>)
 8002444:	4295      	cmp	r5, r2
 8002446:	d10e      	bne.n	8002466 <UART_SetConfig+0xde>
 8002448:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800244c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002452:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002456:	d078      	beq.n	800254a <UART_SetConfig+0x1c2>
 8002458:	d9d8      	bls.n	800240c <UART_SetConfig+0x84>
 800245a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800245e:	d07a      	beq.n	8002556 <UART_SetConfig+0x1ce>
 8002460:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002464:	e7e0      	b.n	8002428 <UART_SetConfig+0xa0>
 8002466:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <UART_SetConfig+0x208>)
 8002468:	4295      	cmp	r5, r2
 800246a:	d10e      	bne.n	800248a <UART_SetConfig+0x102>
 800246c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002472:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002476:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800247a:	d066      	beq.n	800254a <UART_SetConfig+0x1c2>
 800247c:	d9c6      	bls.n	800240c <UART_SetConfig+0x84>
 800247e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002482:	d068      	beq.n	8002556 <UART_SetConfig+0x1ce>
 8002484:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002488:	e7ce      	b.n	8002428 <UART_SetConfig+0xa0>
 800248a:	4a42      	ldr	r2, [pc, #264]	; (8002594 <UART_SetConfig+0x20c>)
 800248c:	4295      	cmp	r5, r2
 800248e:	d1c0      	bne.n	8002412 <UART_SetConfig+0x8a>
 8002490:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002496:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800249a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800249e:	d054      	beq.n	800254a <UART_SetConfig+0x1c2>
 80024a0:	d9b4      	bls.n	800240c <UART_SetConfig+0x84>
 80024a2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80024a6:	d056      	beq.n	8002556 <UART_SetConfig+0x1ce>
 80024a8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80024ac:	e7bc      	b.n	8002428 <UART_SetConfig+0xa0>
    switch (clocksource)
 80024ae:	2a08      	cmp	r2, #8
 80024b0:	d829      	bhi.n	8002506 <UART_SetConfig+0x17e>
 80024b2:	a301      	add	r3, pc, #4	; (adr r3, 80024b8 <UART_SetConfig+0x130>)
 80024b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	08002501 	.word	0x08002501
 80024c0:	08002431 	.word	0x08002431
 80024c4:	08002507 	.word	0x08002507
 80024c8:	08002551 	.word	0x08002551
 80024cc:	08002507 	.word	0x08002507
 80024d0:	08002507 	.word	0x08002507
 80024d4:	08002507 	.word	0x08002507
 80024d8:	0800255d 	.word	0x0800255d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024dc:	f7ff fb06 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	084a      	lsrs	r2, r1, #1
 80024e4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80024e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ee:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80024f0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80024f4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002500:	f7ff fb0c 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002504:	e7ec      	b.n	80024e0 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002508:	2300      	movs	r3, #0
 800250a:	e7f1      	b.n	80024f0 <UART_SetConfig+0x168>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800250c:	f7ff fb06 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002516:	fbb0 f0f3 	udiv	r0, r0, r3
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <UART_SetConfig+0x1f8>)
 800251c:	b280      	uxth	r0, r0
 800251e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	2000      	movs	r0, #0
        break;
 8002522:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002524:	6862      	ldr	r2, [r4, #4]
 8002526:	0853      	lsrs	r3, r2, #1
 8002528:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800252c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002530:	fbb3 f3f2 	udiv	r3, r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	60eb      	str	r3, [r5, #12]
 8002538:	e7f2      	b.n	8002520 <UART_SetConfig+0x198>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800253a:	f7ff f9fb 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 800253e:	e017      	b.n	8002570 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002540:	6862      	ldr	r2, [r4, #4]
 8002542:	0853      	lsrs	r3, r2, #1
 8002544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002548:	e7f2      	b.n	8002530 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d1f4      	bne.n	800253a <UART_SetConfig+0x1b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002550:	f7ff f9f0 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 8002554:	e7c4      	b.n	80024e0 <UART_SetConfig+0x158>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d1f1      	bne.n	8002540 <UART_SetConfig+0x1b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800255c:	6860      	ldr	r0, [r4, #4]
 800255e:	0843      	lsrs	r3, r0, #1
 8002560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002564:	e76a      	b.n	800243c <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256a:	d0b7      	beq.n	80024dc <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800256c:	f7ff fabe 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	b280      	uxth	r0, r0
 800257c:	60e8      	str	r0, [r5, #12]
 800257e:	e7cf      	b.n	8002520 <UART_SetConfig+0x198>
 8002580:	40013800 	.word	0x40013800
 8002584:	08006982 	.word	0x08006982
 8002588:	40004400 	.word	0x40004400
 800258c:	40004800 	.word	0x40004800
 8002590:	40004c00 	.word	0x40004c00
 8002594:	40005000 	.word	0x40005000

08002598 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002598:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259a:	07da      	lsls	r2, r3, #31
{
 800259c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800259e:	d506      	bpl.n	80025ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025a0:	6801      	ldr	r1, [r0, #0]
 80025a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025a4:	684a      	ldr	r2, [r1, #4]
 80025a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025aa:	4322      	orrs	r2, r4
 80025ac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025ae:	079c      	lsls	r4, r3, #30
 80025b0:	d506      	bpl.n	80025c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b2:	6801      	ldr	r1, [r0, #0]
 80025b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025b6:	684a      	ldr	r2, [r1, #4]
 80025b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025bc:	4322      	orrs	r2, r4
 80025be:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c0:	0759      	lsls	r1, r3, #29
 80025c2:	d506      	bpl.n	80025d2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025c4:	6801      	ldr	r1, [r0, #0]
 80025c6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025c8:	684a      	ldr	r2, [r1, #4]
 80025ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ce:	4322      	orrs	r2, r4
 80025d0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d2:	071a      	lsls	r2, r3, #28
 80025d4:	d506      	bpl.n	80025e4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d6:	6801      	ldr	r1, [r0, #0]
 80025d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80025da:	684a      	ldr	r2, [r1, #4]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e0:	4322      	orrs	r2, r4
 80025e2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e4:	06dc      	lsls	r4, r3, #27
 80025e6:	d506      	bpl.n	80025f6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025e8:	6801      	ldr	r1, [r0, #0]
 80025ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025ec:	688a      	ldr	r2, [r1, #8]
 80025ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f2:	4322      	orrs	r2, r4
 80025f4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025f6:	0699      	lsls	r1, r3, #26
 80025f8:	d506      	bpl.n	8002608 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fa:	6801      	ldr	r1, [r0, #0]
 80025fc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80025fe:	688a      	ldr	r2, [r1, #8]
 8002600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002604:	4322      	orrs	r2, r4
 8002606:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002608:	065a      	lsls	r2, r3, #25
 800260a:	d50f      	bpl.n	800262c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800260c:	6801      	ldr	r1, [r0, #0]
 800260e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002610:	684a      	ldr	r2, [r1, #4]
 8002612:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002616:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002618:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800261c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800261e:	d105      	bne.n	800262c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002620:	684a      	ldr	r2, [r1, #4]
 8002622:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002624:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002628:	4322      	orrs	r2, r4
 800262a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	d506      	bpl.n	800263e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002630:	6802      	ldr	r2, [r0, #0]
 8002632:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002634:	6853      	ldr	r3, [r2, #4]
 8002636:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800263a:	430b      	orrs	r3, r1
 800263c:	6053      	str	r3, [r2, #4]
 800263e:	bd10      	pop	{r4, pc}

08002640 <UART_WaitOnFlagUntilTimeout>:
{
 8002640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002644:	9d06      	ldr	r5, [sp, #24]
 8002646:	4604      	mov	r4, r0
 8002648:	460f      	mov	r7, r1
 800264a:	4616      	mov	r6, r2
 800264c:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264e:	6821      	ldr	r1, [r4, #0]
 8002650:	69ca      	ldr	r2, [r1, #28]
 8002652:	ea37 0302 	bics.w	r3, r7, r2
 8002656:	bf0c      	ite	eq
 8002658:	2201      	moveq	r2, #1
 800265a:	2200      	movne	r2, #0
 800265c:	42b2      	cmp	r2, r6
 800265e:	d002      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002660:	2000      	movs	r0, #0
}
 8002662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002666:	1c6b      	adds	r3, r5, #1
 8002668:	d0f2      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800266a:	b99d      	cbnz	r5, 8002694 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002674:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800267e:	2320      	movs	r3, #32
 8002680:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002684:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002688:	2300      	movs	r3, #0
 800268a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800268e:	2003      	movs	r0, #3
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002694:	f7fd fe36 	bl	8000304 <HAL_GetTick>
 8002698:	eba0 0008 	sub.w	r0, r0, r8
 800269c:	4285      	cmp	r5, r0
 800269e:	d2d6      	bcs.n	800264e <UART_WaitOnFlagUntilTimeout+0xe>
 80026a0:	e7e4      	b.n	800266c <UART_WaitOnFlagUntilTimeout+0x2c>

080026a2 <HAL_UART_Transmit>:
{
 80026a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026a6:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80026a8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026ac:	2b20      	cmp	r3, #32
{
 80026ae:	4604      	mov	r4, r0
 80026b0:	460d      	mov	r5, r1
 80026b2:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80026b4:	d14c      	bne.n	8002750 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d048      	beq.n	800274c <HAL_UART_Transmit+0xaa>
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	d046      	beq.n	800274c <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80026be:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d044      	beq.n	8002750 <HAL_UART_Transmit+0xae>
 80026c6:	2301      	movs	r3, #1
 80026c8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d0:	2321      	movs	r3, #33	; 0x21
 80026d2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80026d6:	f7fd fe15 	bl	8000304 <HAL_GetTick>
    huart->TxXferSize = Size;
 80026da:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80026de:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80026e0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80026e4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80026e8:	b292      	uxth	r2, r2
 80026ea:	b962      	cbnz	r2, 8002706 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ec:	9700      	str	r7, [sp, #0]
 80026ee:	4633      	mov	r3, r6
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff ffa4 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 80026f8:	b998      	cbnz	r0, 8002722 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80026fa:	2320      	movs	r3, #32
 80026fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002700:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002704:	e00e      	b.n	8002724 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002706:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270a:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002714:	2200      	movs	r2, #0
 8002716:	4633      	mov	r3, r6
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff ff90 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 8002720:	b118      	cbz	r0, 800272a <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002722:	2003      	movs	r0, #3
}
 8002724:	b002      	add	sp, #8
 8002726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272a:	68a3      	ldr	r3, [r4, #8]
 800272c:	6822      	ldr	r2, [r4, #0]
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d107      	bne.n	8002744 <HAL_UART_Transmit+0xa2>
 8002734:	6923      	ldr	r3, [r4, #16]
 8002736:	b92b      	cbnz	r3, 8002744 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002738:	f835 3b02 	ldrh.w	r3, [r5], #2
 800273c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002740:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002742:	e7cf      	b.n	80026e4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002744:	782b      	ldrb	r3, [r5, #0]
 8002746:	8513      	strh	r3, [r2, #40]	; 0x28
 8002748:	3501      	adds	r5, #1
 800274a:	e7cb      	b.n	80026e4 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	e7e9      	b.n	8002724 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002750:	2002      	movs	r0, #2
 8002752:	e7e7      	b.n	8002724 <HAL_UART_Transmit+0x82>

08002754 <UART_CheckIdleState>:
{
 8002754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002756:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	2600      	movs	r6, #0
 800275a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800275c:	f7fd fdd2 	bl	8000304 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002766:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002768:	d417      	bmi.n	800279a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	075b      	lsls	r3, r3, #29
 8002770:	d50a      	bpl.n	8002788 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002772:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	462b      	mov	r3, r5
 800277c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff5d 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 8002786:	b9a0      	cbnz	r0, 80027b2 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002788:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800278a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800278c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002790:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002798:	e00c      	b.n	80027b4 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4632      	mov	r2, r6
 80027a2:	4603      	mov	r3, r0
 80027a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff ff49 	bl	8002640 <UART_WaitOnFlagUntilTimeout>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d0db      	beq.n	800276a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027b2:	2003      	movs	r0, #3
}
 80027b4:	b002      	add	sp, #8
 80027b6:	bd70      	pop	{r4, r5, r6, pc}

080027b8 <HAL_UART_Init>:
{
 80027b8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027ba:	4604      	mov	r4, r0
 80027bc:	b360      	cbz	r0, 8002818 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027be:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027c6:	b91b      	cbnz	r3, 80027d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027c8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80027cc:	f002 ff34 	bl	8005638 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027d2:	2324      	movs	r3, #36	; 0x24
 80027d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80027d8:	6813      	ldr	r3, [r2, #0]
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fdd1 	bl	8002388 <UART_SetConfig>
 80027e6:	2801      	cmp	r0, #1
 80027e8:	d016      	beq.n	8002818 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ec:	b113      	cbz	r3, 80027f4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fed2 	bl	8002598 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002804:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800280c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002814:	f7ff bf9e 	b.w	8002754 <UART_CheckIdleState>
}
 8002818:	2001      	movs	r0, #1
 800281a:	bd10      	pop	{r4, pc}

0800281c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800281c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002820:	2b21      	cmp	r3, #33	; 0x21
 8002822:	d127      	bne.n	8002874 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002824:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002828:	6802      	ldr	r2, [r0, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	b94b      	cbnz	r3, 8002842 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002834:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002836:	6811      	ldr	r1, [r2, #0]
 8002838:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800283c:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 800283e:	2000      	movs	r0, #0
 8002840:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002842:	6883      	ldr	r3, [r0, #8]
 8002844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002848:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800284a:	d10e      	bne.n	800286a <UART_Transmit_IT+0x4e>
 800284c:	6901      	ldr	r1, [r0, #16]
 800284e:	b961      	cbnz	r1, 800286a <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002850:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002854:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002858:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800285a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800285c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002860:	3b01      	subs	r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8002868:	e7e9      	b.n	800283e <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	64c1      	str	r1, [r0, #76]	; 0x4c
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	8513      	strh	r3, [r2, #40]	; 0x28
 8002872:	e7f3      	b.n	800285c <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002874:	2002      	movs	r0, #2
  }
}
 8002876:	4770      	bx	lr

08002878 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002878:	6801      	ldr	r1, [r0, #0]
{
 800287a:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800287c:	680b      	ldr	r3, [r1, #0]
 800287e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002882:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002884:	2320      	movs	r3, #32
 8002886:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800288a:	f7ff fd6f 	bl	800236c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800288e:	2000      	movs	r0, #0
 8002890:	bd08      	pop	{r3, pc}

08002892 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002892:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002896:	2b22      	cmp	r3, #34	; 0x22
{
 8002898:	b510      	push	{r4, lr}
 800289a:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800289c:	d129      	bne.n	80028f2 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800289e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a0:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80028a2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	ea02 0201 	and.w	r2, r2, r1
 80028ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b0:	d11b      	bne.n	80028ea <UART_Receive_IT+0x58>
 80028b2:	6901      	ldr	r1, [r0, #16]
 80028b4:	b9c9      	cbnz	r1, 80028ea <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80028b6:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80028ba:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80028bc:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80028c0:	3c01      	subs	r4, #1
 80028c2:	b2a4      	uxth	r4, r4
 80028c4:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80028c8:	b96c      	cbnz	r4, 80028e6 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	6803      	ldr	r3, [r0, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028dc:	2320      	movs	r3, #32
 80028de:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80028e2:	f7ff fd44 	bl	800236e <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80028e6:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80028e8:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80028ea:	1c59      	adds	r1, r3, #1
 80028ec:	6541      	str	r1, [r0, #84]	; 0x54
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e7e4      	b.n	80028bc <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	f042 0208 	orr.w	r2, r2, #8
 80028f8:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80028fa:	2002      	movs	r0, #2
 80028fc:	bd10      	pop	{r4, pc}
	...

08002900 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002900:	6802      	ldr	r2, [r0, #0]
 8002902:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002904:	6811      	ldr	r1, [r2, #0]
{
 8002906:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002908:	f013 050f 	ands.w	r5, r3, #15
{
 800290c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800290e:	d107      	bne.n	8002920 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002910:	069e      	lsls	r6, r3, #26
 8002912:	d505      	bpl.n	8002920 <HAL_UART_IRQHandler+0x20>
 8002914:	068e      	lsls	r6, r1, #26
 8002916:	d503      	bpl.n	8002920 <HAL_UART_IRQHandler+0x20>
}
 8002918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800291c:	f7ff bfb9 	b.w	8002892 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002920:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002922:	2d00      	cmp	r5, #0
 8002924:	d05c      	beq.n	80029e0 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002926:	f010 0501 	ands.w	r5, r0, #1
 800292a:	d102      	bne.n	8002932 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800292c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002930:	d056      	beq.n	80029e0 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002932:	07d8      	lsls	r0, r3, #31
 8002934:	d507      	bpl.n	8002946 <HAL_UART_IRQHandler+0x46>
 8002936:	05ce      	lsls	r6, r1, #23
 8002938:	d505      	bpl.n	8002946 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800293a:	2001      	movs	r0, #1
 800293c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800293e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002940:	f040 0001 	orr.w	r0, r0, #1
 8002944:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002946:	0798      	lsls	r0, r3, #30
 8002948:	d506      	bpl.n	8002958 <HAL_UART_IRQHandler+0x58>
 800294a:	b12d      	cbz	r5, 8002958 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800294c:	2002      	movs	r0, #2
 800294e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002950:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002952:	f040 0004 	orr.w	r0, r0, #4
 8002956:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002958:	075e      	lsls	r6, r3, #29
 800295a:	d506      	bpl.n	800296a <HAL_UART_IRQHandler+0x6a>
 800295c:	b12d      	cbz	r5, 800296a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800295e:	2004      	movs	r0, #4
 8002960:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002962:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002964:	f040 0002 	orr.w	r0, r0, #2
 8002968:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800296a:	0718      	lsls	r0, r3, #28
 800296c:	d507      	bpl.n	800297e <HAL_UART_IRQHandler+0x7e>
 800296e:	068e      	lsls	r6, r1, #26
 8002970:	d400      	bmi.n	8002974 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002972:	b125      	cbz	r5, 800297e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002974:	2008      	movs	r0, #8
 8002976:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002978:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800297a:	4302      	orrs	r2, r0
 800297c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800297e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002980:	2a00      	cmp	r2, #0
 8002982:	d050      	beq.n	8002a26 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002984:	0698      	lsls	r0, r3, #26
 8002986:	d504      	bpl.n	8002992 <HAL_UART_IRQHandler+0x92>
 8002988:	068a      	lsls	r2, r1, #26
 800298a:	d502      	bpl.n	8002992 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 800298c:	4620      	mov	r0, r4
 800298e:	f7ff ff80 	bl	8002892 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002992:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002994:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8002996:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002998:	d404      	bmi.n	80029a4 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800299e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029a2:	d019      	beq.n	80029d8 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80029a4:	f7ff fc99 	bl	80022da <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	0656      	lsls	r6, r2, #25
 80029ae:	d50f      	bpl.n	80029d0 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b0:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029ba:	b148      	cbz	r0, 80029d0 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_UART_IRQHandler+0x128>)
 80029be:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c0:	f7fd fd22 	bl	8000408 <HAL_DMA_Abort_IT>
 80029c4:	b378      	cbz	r0, 8002a26 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029c6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80029c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029ce:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fccd 	bl	8002370 <HAL_UART_ErrorCallback>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80029d8:	f7ff fcca 	bl	8002370 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	66e5      	str	r5, [r4, #108]	; 0x6c
 80029de:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80029e0:	02dd      	lsls	r5, r3, #11
 80029e2:	d50e      	bpl.n	8002a02 <HAL_UART_IRQHandler+0x102>
 80029e4:	0246      	lsls	r6, r0, #9
 80029e6:	d50c      	bpl.n	8002a02 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029ec:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80029ee:	2320      	movs	r3, #32
 80029f0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80029f4:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80029f6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80029fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80029fe:	f000 b815 	b.w	8002a2c <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a02:	061d      	lsls	r5, r3, #24
 8002a04:	d506      	bpl.n	8002a14 <HAL_UART_IRQHandler+0x114>
 8002a06:	0608      	lsls	r0, r1, #24
 8002a08:	d504      	bpl.n	8002a14 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002a0a:	4620      	mov	r0, r4
}
 8002a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002a10:	f7ff bf04 	b.w	800281c <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a14:	065a      	lsls	r2, r3, #25
 8002a16:	d506      	bpl.n	8002a26 <HAL_UART_IRQHandler+0x126>
 8002a18:	064b      	lsls	r3, r1, #25
 8002a1a:	d504      	bpl.n	8002a26 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002a1c:	4620      	mov	r0, r4
}
 8002a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002a22:	f7ff bf29 	b.w	8002878 <UART_EndTransmit_IT>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	08002373 	.word	0x08002373

08002a2c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	4770      	bx	lr

08002a2e <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a2e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002a32:	b11b      	cbz	r3, 8002a3c <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002a34:	2000      	movs	r0, #0
 8002a36:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002a3a:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002a3c:	2002      	movs	r0, #2
  }
}
 8002a3e:	4770      	bx	lr

08002a40 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002a40:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002a44:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a46:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002a4a:	b15b      	cbz	r3, 8002a64 <USBD_CDC_EP0_RxReady+0x24>
 8002a4c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002a50:	28ff      	cmp	r0, #255	; 0xff
 8002a52:	d007      	beq.n	8002a64 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002a5e:	23ff      	movs	r3, #255	; 0xff
 8002a60:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002a64:	2000      	movs	r0, #0
 8002a66:	bd10      	pop	{r4, pc}

08002a68 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002a68:	2343      	movs	r3, #67	; 0x43
 8002a6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002a6c:	4800      	ldr	r0, [pc, #0]	; (8002a70 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002a6e:	4770      	bx	lr
 8002a70:	20000040 	.word	0x20000040

08002a74 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002a74:	2343      	movs	r3, #67	; 0x43
 8002a76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002a78:	4800      	ldr	r0, [pc, #0]	; (8002a7c <USBD_CDC_GetHSCfgDesc+0x8>)
 8002a7a:	4770      	bx	lr
 8002a7c:	20000084 	.word	0x20000084

08002a80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002a80:	2343      	movs	r3, #67	; 0x43
 8002a82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002a84:	4800      	ldr	r0, [pc, #0]	; (8002a88 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002a86:	4770      	bx	lr
 8002a88:	200000d4 	.word	0x200000d4

08002a8c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002a90:	4800      	ldr	r0, [pc, #0]	; (8002a94 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002a92:	4770      	bx	lr
 8002a94:	200000c8 	.word	0x200000c8

08002a98 <USBD_CDC_DataOut>:
{      
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a9c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002aa0:	f003 f9e8 	bl	8005e74 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002aa4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002aa8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002aac:	b14b      	cbz	r3, 8002ac2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002aae:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002ab2:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002abc:	4798      	blx	r3
    return USBD_OK;
 8002abe:	2000      	movs	r0, #0
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002ac2:	2002      	movs	r0, #2
}
 8002ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ac8 <USBD_CDC_Setup>:
{
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002aca:	780f      	ldrb	r7, [r1, #0]
 8002acc:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002ad0:	4606      	mov	r6, r0
 8002ad2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ad4:	d023      	beq.n	8002b1e <USBD_CDC_Setup+0x56>
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d119      	bne.n	8002b0e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002ada:	88ca      	ldrh	r2, [r1, #6]
 8002adc:	784b      	ldrb	r3, [r1, #1]
 8002ade:	b1c2      	cbz	r2, 8002b12 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002ae0:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002ae2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002ae6:	d50b      	bpl.n	8002b00 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ae8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002aec:	4618      	mov	r0, r3
 8002aee:	688f      	ldr	r7, [r1, #8]
 8002af0:	4629      	mov	r1, r5
 8002af2:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002af4:	88e2      	ldrh	r2, [r4, #6]
 8002af6:	4629      	mov	r1, r5
 8002af8:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002afa:	f000 fb8a 	bl	8003212 <USBD_CtlSendData>
      break;
 8002afe:	e006      	b.n	8002b0e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002b00:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002b04:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f000 fb97 	bl	800323c <USBD_CtlPrepareRx>
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002b12:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002b16:	6884      	ldr	r4, [r0, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	47a0      	blx	r4
 8002b1c:	e7f7      	b.n	8002b0e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002b1e:	784b      	ldrb	r3, [r1, #1]
 8002b20:	2b0a      	cmp	r3, #10
 8002b22:	d1f4      	bne.n	8002b0e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002b24:	2201      	movs	r2, #1
 8002b26:	4901      	ldr	r1, [pc, #4]	; (8002b2c <USBD_CDC_Setup+0x64>)
 8002b28:	e7e7      	b.n	8002afa <USBD_CDC_Setup+0x32>
 8002b2a:	bf00      	nop
 8002b2c:	200001f4 	.word	0x200001f4

08002b30 <USBD_CDC_DeInit>:
{
 8002b30:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002b32:	2181      	movs	r1, #129	; 0x81
{
 8002b34:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002b36:	f003 f935 	bl	8005da4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f003 f931 	bl	8005da4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002b42:	2182      	movs	r1, #130	; 0x82
 8002b44:	4620      	mov	r0, r4
 8002b46:	f003 f92d 	bl	8005da4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002b4a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002b4e:	b153      	cbz	r3, 8002b66 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002b50:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002b58:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002b5c:	f003 f994 	bl	8005e88 <USBD_static_free>
    pdev->pClassData = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002b66:	2000      	movs	r0, #0
 8002b68:	bd10      	pop	{r4, pc}

08002b6a <USBD_CDC_Init>:
{
 8002b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b6c:	7c03      	ldrb	r3, [r0, #16]
{
 8002b6e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002b70:	bb7b      	cbnz	r3, 8002bd2 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b76:	2202      	movs	r2, #2
 8002b78:	2181      	movs	r1, #129	; 0x81
 8002b7a:	f003 f903 	bl	8005d84 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002b82:	2202      	movs	r2, #2
 8002b84:	2101      	movs	r1, #1
 8002b86:	4620      	mov	r0, r4
 8002b88:	f003 f8fc 	bl	8005d84 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	2203      	movs	r2, #3
 8002b90:	2182      	movs	r1, #130	; 0x82
 8002b92:	4620      	mov	r0, r4
 8002b94:	f003 f8f6 	bl	8005d84 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002b98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002b9c:	f003 f970 	bl	8005e80 <USBD_static_malloc>
 8002ba0:	4606      	mov	r6, r0
 8002ba2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002ba6:	b320      	cbz	r0, 8002bf2 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002ba8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bb0:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002bb8:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bbc:	b987      	cbnz	r7, 8002be0 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f003 f945 	bl	8005e58 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002bce:	4638      	mov	r0, r7
 8002bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002bd2:	2340      	movs	r3, #64	; 0x40
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	2181      	movs	r1, #129	; 0x81
 8002bd8:	f003 f8d4 	bl	8005d84 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002bdc:	2340      	movs	r3, #64	; 0x40
 8002bde:	e7d0      	b.n	8002b82 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002be0:	2340      	movs	r3, #64	; 0x40
 8002be2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002be6:	2101      	movs	r1, #1
 8002be8:	4620      	mov	r0, r4
 8002bea:	f003 f935 	bl	8005e58 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002bee:	4628      	mov	r0, r5
 8002bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002bf2:	2001      	movs	r0, #1
}
 8002bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bf6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002bf6:	b119      	cbz	r1, 8002c00 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002bf8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002c00:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002c02:	4770      	bx	lr

08002c04 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c04:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002c08:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002c0a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002c0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002c12:	4770      	bx	lr

08002c14 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002c14:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002c18:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002c1a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002c1e:	4770      	bx	lr

08002c20 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c20:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002c24:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002c26:	b172      	cbz	r2, 8002c46 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002c28:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	b964      	cbnz	r4, 8002c4a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002c30:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002c34:	2181      	movs	r1, #129	; 0x81
 8002c36:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002c3a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002c3e:	f003 f8fd 	bl	8005e3c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002c42:	4620      	mov	r0, r4
 8002c44:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002c46:	2002      	movs	r0, #2
 8002c48:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002c4a:	4618      	mov	r0, r3
  }
}
 8002c4c:	bd10      	pop	{r4, pc}

08002c4e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c4e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002c52:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002c54:	b162      	cbz	r2, 8002c70 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c56:	7c04      	ldrb	r4, [r0, #16]
 8002c58:	b944      	cbnz	r4, 8002c6c <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c5e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002c62:	2101      	movs	r1, #1
 8002c64:	f003 f8f8 	bl	8005e58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002c68:	2000      	movs	r0, #0
 8002c6a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002c6c:	2340      	movs	r3, #64	; 0x40
 8002c6e:	e7f6      	b.n	8002c5e <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002c70:	2002      	movs	r0, #2
  }
}
 8002c72:	bd10      	pop	{r4, pc}

08002c74 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002c74:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002c76:	b180      	cbz	r0, 8002c9a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002c78:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002c7c:	b113      	cbz	r3, 8002c84 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002c84:	b109      	cbz	r1, 8002c8a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002c86:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8002c90:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002c92:	f003 f827 	bl	8005ce4 <USBD_LL_Init>
  
  return USBD_OK; 
 8002c96:	2000      	movs	r0, #0
 8002c98:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002c9a:	2002      	movs	r0, #2
}
 8002c9c:	bd08      	pop	{r3, pc}

08002c9e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002c9e:	b119      	cbz	r1, 8002ca8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002ca0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002ca8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002caa:	4770      	bx	lr

08002cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002cac:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002cae:	f003 f85b 	bl	8005d68 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	bd08      	pop	{r3, pc}

08002cb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002cb6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002cb8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cbc:	b90b      	cbnz	r3, 8002cc2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4798      	blx	r3
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d1f9      	bne.n	8002cbe <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002cca:	bd08      	pop	{r3, pc}

08002ccc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002ccc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002cce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4798      	blx	r3
  return USBD_OK;
}
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	bd08      	pop	{r3, pc}

08002cda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002cda:	b538      	push	{r3, r4, r5, lr}
 8002cdc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002cde:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 fa65 	bl	80031b2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ce8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002cea:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002cee:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002cf2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002cf6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002cfa:	f001 031f 	and.w	r3, r1, #31
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d00e      	beq.n	8002d20 <USBD_LL_SetupStage+0x46>
 8002d02:	d307      	bcc.n	8002d14 <USBD_LL_SetupStage+0x3a>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d010      	beq.n	8002d2a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002d08:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f003 f857 	bl	8005dc0 <USBD_LL_StallEP>
    break;
 8002d12:	e003      	b.n	8002d1c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002d14:	4629      	mov	r1, r5
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 f8d6 	bl	8002ec8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002d20:	4629      	mov	r1, r5
 8002d22:	4620      	mov	r0, r4
 8002d24:	f000 f9ca 	bl	80030bc <USBD_StdItfReq>
    break;
 8002d28:	e7f8      	b.n	8002d1c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 f9dd 	bl	80030ec <USBD_StdEPReq>
    break;
 8002d32:	e7f3      	b.n	8002d1c <USBD_LL_SetupStage+0x42>

08002d34 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4604      	mov	r4, r0
 8002d38:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002d3a:	bb11      	cbnz	r1, 8002d82 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002d3c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d10f      	bne.n	8002d64 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002d44:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002d48:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d90b      	bls.n	8002d68 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002d50:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002d52:	429a      	cmp	r2, r3
 8002d54:	bf28      	it	cs
 8002d56:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002d58:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f000 fa7b 	bl	800325a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002d64:	2000      	movs	r0, #0
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002d68:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	b123      	cbz	r3, 8002d7a <USBD_LL_DataOutStage+0x46>
 8002d70:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d74:	2a03      	cmp	r2, #3
 8002d76:	d100      	bne.n	8002d7a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002d78:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 fa75 	bl	800326a <USBD_CtlSendStatus>
 8002d80:	e7f0      	b.n	8002d64 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002d82:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0eb      	beq.n	8002d64 <USBD_LL_DataOutStage+0x30>
 8002d8c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d90:	2a03      	cmp	r2, #3
 8002d92:	d1e7      	bne.n	8002d64 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002d94:	4798      	blx	r3
 8002d96:	e7e5      	b.n	8002d64 <USBD_LL_DataOutStage+0x30>

08002d98 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002d9e:	460e      	mov	r6, r1
 8002da0:	2900      	cmp	r1, #0
 8002da2:	d13d      	bne.n	8002e20 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002da4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002da8:	2a02      	cmp	r2, #2
 8002daa:	d10f      	bne.n	8002dcc <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002dac:	69c5      	ldr	r5, [r0, #28]
 8002dae:	6a02      	ldr	r2, [r0, #32]
 8002db0:	4295      	cmp	r5, r2
 8002db2:	d914      	bls.n	8002dde <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002db4:	1aaa      	subs	r2, r5, r2
 8002db6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002db8:	4619      	mov	r1, r3
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	f000 fa36 	bl	800322c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002dc0:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f003 f846 	bl	8005e58 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002dcc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002dda:	2000      	movs	r0, #0
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002dde:	6983      	ldr	r3, [r0, #24]
 8002de0:	fbb3 f5f2 	udiv	r5, r3, r2
 8002de4:	fb02 3515 	mls	r5, r2, r5, r3
 8002de8:	b965      	cbnz	r5, 8002e04 <USBD_LL_DataInStage+0x6c>
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d80a      	bhi.n	8002e04 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002dee:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d206      	bcs.n	8002e04 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002df6:	462a      	mov	r2, r5
 8002df8:	f000 fa18 	bl	800322c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002dfc:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002e00:	462b      	mov	r3, r5
 8002e02:	e7de      	b.n	8002dc2 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002e04:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	b12b      	cbz	r3, 8002e18 <USBD_LL_DataInStage+0x80>
 8002e0c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002e10:	2a03      	cmp	r2, #3
 8002e12:	d101      	bne.n	8002e18 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002e14:	4620      	mov	r0, r4
 8002e16:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f000 fa31 	bl	8003280 <USBD_CtlReceiveStatus>
 8002e1e:	e7d5      	b.n	8002dcc <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002e20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0d7      	beq.n	8002dda <USBD_LL_DataInStage+0x42>
 8002e2a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e2e:	2a03      	cmp	r2, #3
 8002e30:	d1d3      	bne.n	8002dda <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002e32:	4798      	blx	r3
 8002e34:	e7d1      	b.n	8002dda <USBD_LL_DataInStage+0x42>

08002e36 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002e36:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002e38:	2200      	movs	r2, #0
{
 8002e3a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002e3c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e3e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002e40:	2340      	movs	r3, #64	; 0x40
 8002e42:	f002 ff9f 	bl	8005d84 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002e46:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e48:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	4620      	mov	r0, r4
 8002e52:	f002 ff97 	bl	8005d84 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002e5c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e60:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002e62:	b12b      	cbz	r3, 8002e70 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002e64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002e68:	7921      	ldrb	r1, [r4, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002e70:	2000      	movs	r0, #0
 8002e72:	bd38      	pop	{r3, r4, r5, pc}

08002e74 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002e74:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	4770      	bx	lr

08002e7a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002e7a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002e7e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002e82:	2304      	movs	r3, #4
 8002e84:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002e88:	2000      	movs	r0, #0
 8002e8a:	4770      	bx	lr

08002e8c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002e8c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002e90:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002e94:	2000      	movs	r0, #0
 8002e96:	4770      	bx	lr

08002e98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002e98:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e9a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e9e:	2a03      	cmp	r2, #3
 8002ea0:	d104      	bne.n	8002eac <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002ea2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	b103      	cbz	r3, 8002eac <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002eaa:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002eac:	2000      	movs	r0, #0
 8002eae:	bd08      	pop	{r3, pc}

08002eb0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002eb0:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002eb2:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002eb4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8002eb6:	f002 ff83 	bl	8005dc0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002eba:	4620      	mov	r0, r4
 8002ebc:	2100      	movs	r1, #0
}
 8002ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002ec2:	f002 bf7d 	b.w	8005dc0 <USBD_LL_StallEP>
	...

08002ec8 <USBD_StdDevReq>:
{
 8002ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002eca:	784b      	ldrb	r3, [r1, #1]
{
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002ed0:	2b09      	cmp	r3, #9
 8002ed2:	d879      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
 8002ed4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ed8:	00e500c9 	.word	0x00e500c9
 8002edc:	00d90078 	.word	0x00d90078
 8002ee0:	006d0078 	.word	0x006d0078
 8002ee4:	0078000a 	.word	0x0078000a
 8002ee8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002eec:	884b      	ldrh	r3, [r1, #2]
 8002eee:	0a1a      	lsrs	r2, r3, #8
 8002ef0:	3a01      	subs	r2, #1
 8002ef2:	2a06      	cmp	r2, #6
 8002ef4:	d868      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
 8002ef6:	e8df f002 	tbb	[pc, r2]
 8002efa:	1c04      	.short	0x1c04
 8002efc:	49676729 	.word	0x49676729
 8002f00:	52          	.byte	0x52
 8002f01:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002f02:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f06:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002f08:	7c20      	ldrb	r0, [r4, #16]
 8002f0a:	f10d 0106 	add.w	r1, sp, #6
 8002f0e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002f10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d067      	beq.n	8002fe8 <USBD_StdDevReq+0x120>
 8002f18:	88eb      	ldrh	r3, [r5, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d064      	beq.n	8002fe8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf28      	it	cs
 8002f22:	461a      	movcs	r2, r3
 8002f24:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002f28:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f000 f971 	bl	8003212 <USBD_CtlSendData>
 8002f30:	e05a      	b.n	8002fe8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002f32:	7c02      	ldrb	r2, [r0, #16]
 8002f34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f38:	b932      	cbnz	r2, 8002f48 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f3c:	f10d 0006 	add.w	r0, sp, #6
 8002f40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f42:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f44:	7043      	strb	r3, [r0, #1]
 8002f46:	e7e3      	b.n	8002f10 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	e7f7      	b.n	8002f3c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d83a      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
 8002f52:	e8df f003 	tbb	[pc, r3]
 8002f56:	0703      	.short	0x0703
 8002f58:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002f5c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	e7d1      	b.n	8002f08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002f64:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	e7cd      	b.n	8002f08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002f6c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	e7c9      	b.n	8002f08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002f74:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	e7c5      	b.n	8002f08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002f7c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	e7c1      	b.n	8002f08 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002f84:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	e7bd      	b.n	8002f08 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002f8c:	7c03      	ldrb	r3, [r0, #16]
 8002f8e:	b9db      	cbnz	r3, 8002fc8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f94:	f10d 0006 	add.w	r0, sp, #6
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	4798      	blx	r3
 8002f9c:	e7b8      	b.n	8002f10 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002f9e:	7c03      	ldrb	r3, [r0, #16]
 8002fa0:	b993      	cbnz	r3, 8002fc8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002fa2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fa6:	f10d 0006 	add.w	r0, sp, #6
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002fae:	2307      	movs	r3, #7
 8002fb0:	e7c8      	b.n	8002f44 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002fb2:	888b      	ldrh	r3, [r1, #4]
 8002fb4:	b943      	cbnz	r3, 8002fc8 <USBD_StdDevReq+0x100>
 8002fb6:	88cb      	ldrh	r3, [r1, #6]
 8002fb8:	b933      	cbnz	r3, 8002fc8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002fba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002fbe:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002fc0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002fc2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002fc6:	d103      	bne.n	8002fd0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ff71 	bl	8002eb0 <USBD_CtlError.constprop.0>
    break;
 8002fce:	e00b      	b.n	8002fe8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002fd0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f002 ff23 	bl	8005e20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f945 	bl	800326a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002fe0:	b12d      	cbz	r5, 8002fee <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002fe2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002fe4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002fe8:	2000      	movs	r0, #0
 8002fea:	b003      	add	sp, #12
 8002fec:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e7f8      	b.n	8002fe4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002ff2:	7889      	ldrb	r1, [r1, #2]
 8002ff4:	4d30      	ldr	r5, [pc, #192]	; (80030b8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002ff6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002ff8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002ffa:	d8e5      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002ffc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003000:	2b02      	cmp	r3, #2
 8003002:	d00c      	beq.n	800301e <USBD_StdDevReq+0x156>
 8003004:	2b03      	cmp	r3, #3
 8003006:	d1df      	bne.n	8002fc8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003008:	b9b1      	cbnz	r1, 8003038 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800300a:	2302      	movs	r3, #2
 800300c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003010:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003012:	f7ff fe5b 	bl	8002ccc <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003016:	4620      	mov	r0, r4
 8003018:	f000 f927 	bl	800326a <USBD_CtlSendStatus>
 800301c:	e7e4      	b.n	8002fe8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800301e:	2900      	cmp	r1, #0
 8003020:	d0f9      	beq.n	8003016 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003022:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003024:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003026:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003028:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff fe42 	bl	8002cb6 <USBD_SetClassConfig>
 8003032:	2802      	cmp	r0, #2
 8003034:	d1ef      	bne.n	8003016 <USBD_StdDevReq+0x14e>
 8003036:	e7c7      	b.n	8002fc8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003038:	6841      	ldr	r1, [r0, #4]
 800303a:	2901      	cmp	r1, #1
 800303c:	d0eb      	beq.n	8003016 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800303e:	b2c9      	uxtb	r1, r1
 8003040:	f7ff fe44 	bl	8002ccc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003044:	7829      	ldrb	r1, [r5, #0]
 8003046:	6061      	str	r1, [r4, #4]
 8003048:	e7f0      	b.n	800302c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800304a:	88ca      	ldrh	r2, [r1, #6]
 800304c:	2a01      	cmp	r2, #1
 800304e:	d1bb      	bne.n	8002fc8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003050:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003054:	2b02      	cmp	r3, #2
 8003056:	d003      	beq.n	8003060 <USBD_StdDevReq+0x198>
 8003058:	2b03      	cmp	r3, #3
 800305a:	d1b5      	bne.n	8002fc8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800305c:	1d01      	adds	r1, r0, #4
 800305e:	e764      	b.n	8002f2a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003060:	4601      	mov	r1, r0
 8003062:	2300      	movs	r3, #0
 8003064:	f841 3f08 	str.w	r3, [r1, #8]!
 8003068:	e75f      	b.n	8002f2a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800306a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800306e:	3b02      	subs	r3, #2
 8003070:	2b01      	cmp	r3, #1
 8003072:	d8a9      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003074:	2301      	movs	r3, #1
 8003076:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003078:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800307c:	b10b      	cbz	r3, 8003082 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800307e:	2303      	movs	r3, #3
 8003080:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8003082:	2202      	movs	r2, #2
 8003084:	f104 010c 	add.w	r1, r4, #12
 8003088:	e74f      	b.n	8002f2a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800308a:	884b      	ldrh	r3, [r1, #2]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d1ab      	bne.n	8002fe8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003090:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003094:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003098:	4629      	mov	r1, r5
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4620      	mov	r0, r4
 800309e:	4798      	blx	r3
 80030a0:	e7b9      	b.n	8003016 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80030a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030a6:	3b02      	subs	r3, #2
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d88d      	bhi.n	8002fc8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80030ac:	884b      	ldrh	r3, [r1, #2]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d19a      	bne.n	8002fe8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80030b2:	2300      	movs	r3, #0
 80030b4:	e7ec      	b.n	8003090 <USBD_StdDevReq+0x1c8>
 80030b6:	bf00      	nop
 80030b8:	200001f5 	.word	0x200001f5

080030bc <USBD_StdItfReq>:
{
 80030bc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80030be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030c2:	2b03      	cmp	r3, #3
{
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80030c8:	d10d      	bne.n	80030e6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80030ca:	790b      	ldrb	r3, [r1, #4]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d80a      	bhi.n	80030e6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80030d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80030d8:	88eb      	ldrh	r3, [r5, #6]
 80030da:	b913      	cbnz	r3, 80030e2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80030dc:	4620      	mov	r0, r4
 80030de:	f000 f8c4 	bl	800326a <USBD_CtlSendStatus>
}
 80030e2:	2000      	movs	r0, #0
 80030e4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80030e6:	f7ff fee3 	bl	8002eb0 <USBD_CtlError.constprop.0>
    break;
 80030ea:	e7fa      	b.n	80030e2 <USBD_StdItfReq+0x26>

080030ec <USBD_StdEPReq>:
{
 80030ec:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80030ee:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80030f0:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80030f2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80030f6:	2a20      	cmp	r2, #32
{
 80030f8:	4604      	mov	r4, r0
 80030fa:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80030fc:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80030fe:	d105      	bne.n	800310c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003100:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4798      	blx	r3
}
 8003108:	2000      	movs	r0, #0
 800310a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800310c:	784a      	ldrb	r2, [r1, #1]
 800310e:	2a01      	cmp	r2, #1
 8003110:	d01c      	beq.n	800314c <USBD_StdEPReq+0x60>
 8003112:	d32a      	bcc.n	800316a <USBD_StdEPReq+0x7e>
 8003114:	2a03      	cmp	r2, #3
 8003116:	d1f7      	bne.n	8003108 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003118:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800311c:	2a02      	cmp	r2, #2
 800311e:	d040      	beq.n	80031a2 <USBD_StdEPReq+0xb6>
 8003120:	2a03      	cmp	r2, #3
 8003122:	d002      	beq.n	800312a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003124:	f7ff fec4 	bl	8002eb0 <USBD_CtlError.constprop.0>
      break;
 8003128:	e7ee      	b.n	8003108 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800312a:	884a      	ldrh	r2, [r1, #2]
 800312c:	b922      	cbnz	r2, 8003138 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800312e:	065e      	lsls	r6, r3, #25
 8003130:	d002      	beq.n	8003138 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003132:	4619      	mov	r1, r3
 8003134:	f002 fe44 	bl	8005dc0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003138:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800313c:	4629      	mov	r1, r5
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4620      	mov	r0, r4
 8003142:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003144:	4620      	mov	r0, r4
 8003146:	f000 f890 	bl	800326a <USBD_CtlSendStatus>
 800314a:	e7dd      	b.n	8003108 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800314c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003150:	2a02      	cmp	r2, #2
 8003152:	d026      	beq.n	80031a2 <USBD_StdEPReq+0xb6>
 8003154:	2a03      	cmp	r2, #3
 8003156:	d1e5      	bne.n	8003124 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003158:	884a      	ldrh	r2, [r1, #2]
 800315a:	2a00      	cmp	r2, #0
 800315c:	d1d4      	bne.n	8003108 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800315e:	0659      	lsls	r1, r3, #25
 8003160:	d0f0      	beq.n	8003144 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8003162:	4619      	mov	r1, r3
 8003164:	f002 fe3a 	bl	8005ddc <USBD_LL_ClearStallEP>
 8003168:	e7e6      	b.n	8003138 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800316a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800316e:	2a02      	cmp	r2, #2
 8003170:	d017      	beq.n	80031a2 <USBD_StdEPReq+0xb6>
 8003172:	2a03      	cmp	r2, #3
 8003174:	d1d6      	bne.n	8003124 <USBD_StdEPReq+0x38>
 8003176:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800317a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800317e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003182:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003184:	bf14      	ite	ne
 8003186:	3514      	addne	r5, #20
 8003188:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800318c:	f002 fe34 	bl	8005df8 <USBD_LL_IsStallEP>
 8003190:	b168      	cbz	r0, 80031ae <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003192:	2301      	movs	r3, #1
 8003194:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003196:	2202      	movs	r2, #2
 8003198:	4629      	mov	r1, r5
 800319a:	4620      	mov	r0, r4
 800319c:	f000 f839 	bl	8003212 <USBD_CtlSendData>
      break;
 80031a0:	e7b2      	b.n	8003108 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80031a2:	065a      	lsls	r2, r3, #25
 80031a4:	d0b0      	beq.n	8003108 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80031a6:	4619      	mov	r1, r3
 80031a8:	f002 fe0a 	bl	8005dc0 <USBD_LL_StallEP>
 80031ac:	e7ac      	b.n	8003108 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80031ae:	6028      	str	r0, [r5, #0]
 80031b0:	e7f1      	b.n	8003196 <USBD_StdEPReq+0xaa>

080031b2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80031b2:	780b      	ldrb	r3, [r1, #0]
 80031b4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80031b6:	784b      	ldrb	r3, [r1, #1]
 80031b8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80031ba:	78ca      	ldrb	r2, [r1, #3]
 80031bc:	788b      	ldrb	r3, [r1, #2]
 80031be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031c2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80031c4:	794a      	ldrb	r2, [r1, #5]
 80031c6:	790b      	ldrb	r3, [r1, #4]
 80031c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031cc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80031ce:	79ca      	ldrb	r2, [r1, #7]
 80031d0:	798b      	ldrb	r3, [r1, #6]
 80031d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80031d6:	80c3      	strh	r3, [r0, #6]
 80031d8:	4770      	bx	lr

080031da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80031da:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80031dc:	b188      	cbz	r0, 8003202 <USBD_GetString+0x28>
 80031de:	4605      	mov	r5, r0
 80031e0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80031e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2c00      	cmp	r4, #0
 80031ea:	d1f9      	bne.n	80031e0 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	3302      	adds	r3, #2
 80031f0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80031f2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80031f4:	2303      	movs	r3, #3
 80031f6:	704b      	strb	r3, [r1, #1]
 80031f8:	3801      	subs	r0, #1
 80031fa:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80031fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003200:	b905      	cbnz	r5, 8003204 <USBD_GetString+0x2a>
 8003202:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800320a:	3302      	adds	r3, #2
 800320c:	b2db      	uxtb	r3, r3
 800320e:	548c      	strb	r4, [r1, r2]
 8003210:	e7f4      	b.n	80031fc <USBD_GetString+0x22>

08003212 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003212:	b510      	push	{r4, lr}
 8003214:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003216:	2202      	movs	r2, #2
 8003218:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800321c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800321e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003220:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003222:	2100      	movs	r1, #0
 8003224:	f002 fe0a 	bl	8005e3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003228:	2000      	movs	r0, #0
 800322a:	bd10      	pop	{r4, pc}

0800322c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800322c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800322e:	4613      	mov	r3, r2
 8003230:	460a      	mov	r2, r1
 8003232:	2100      	movs	r1, #0
 8003234:	f002 fe02 	bl	8005e3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003238:	2000      	movs	r0, #0
 800323a:	bd08      	pop	{r3, pc}

0800323c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800323c:	b510      	push	{r4, lr}
 800323e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003240:	2203      	movs	r2, #3
 8003242:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003246:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800324a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800324c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003250:	2100      	movs	r1, #0
 8003252:	f002 fe01 	bl	8005e58 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003256:	2000      	movs	r0, #0
 8003258:	bd10      	pop	{r4, pc}

0800325a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800325a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800325c:	4613      	mov	r3, r2
 800325e:	460a      	mov	r2, r1
 8003260:	2100      	movs	r1, #0
 8003262:	f002 fdf9 	bl	8005e58 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003266:	2000      	movs	r0, #0
 8003268:	bd08      	pop	{r3, pc}

0800326a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800326a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800326c:	2304      	movs	r3, #4
 800326e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003272:	2300      	movs	r3, #0
 8003274:	461a      	mov	r2, r3
 8003276:	4619      	mov	r1, r3
 8003278:	f002 fde0 	bl	8005e3c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800327c:	2000      	movs	r0, #0
 800327e:	bd08      	pop	{r3, pc}

08003280 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003280:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003282:	2305      	movs	r3, #5
 8003284:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003288:	2300      	movs	r3, #0
 800328a:	461a      	mov	r2, r3
 800328c:	4619      	mov	r1, r3
 800328e:	f002 fde3 	bl	8005e58 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003292:	2000      	movs	r0, #0
 8003294:	bd08      	pop	{r3, pc}
	...

08003298 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <disk_status+0x10>)
 800329a:	181a      	adds	r2, r3, r0
 800329c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80032a0:	7a10      	ldrb	r0, [r2, #8]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4718      	bx	r3
 80032a8:	20000218 	.word	0x20000218

080032ac <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <disk_initialize+0x1c>)
 80032ae:	5c1a      	ldrb	r2, [r3, r0]
 80032b0:	b942      	cbnz	r2, 80032c4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80032b2:	2201      	movs	r2, #1
 80032b4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80032b6:	181a      	adds	r2, r3, r0
 80032b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80032bc:	7a10      	ldrb	r0, [r2, #8]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4718      	bx	r3
  }
  return stat;
}
 80032c4:	2000      	movs	r0, #0
 80032c6:	4770      	bx	lr
 80032c8:	20000218 	.word	0x20000218

080032cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80032cc:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80032ce:	4c05      	ldr	r4, [pc, #20]	; (80032e4 <disk_read+0x18>)
 80032d0:	1825      	adds	r5, r4, r0
 80032d2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80032d6:	6860      	ldr	r0, [r4, #4]
 80032d8:	6884      	ldr	r4, [r0, #8]
 80032da:	7a28      	ldrb	r0, [r5, #8]
 80032dc:	46a4      	mov	ip, r4
  return res;
}
 80032de:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80032e0:	4760      	bx	ip
 80032e2:	bf00      	nop
 80032e4:	20000218 	.word	0x20000218

080032e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80032e8:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80032ea:	4c05      	ldr	r4, [pc, #20]	; (8003300 <disk_write+0x18>)
 80032ec:	1825      	adds	r5, r4, r0
 80032ee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80032f2:	6860      	ldr	r0, [r4, #4]
 80032f4:	68c4      	ldr	r4, [r0, #12]
 80032f6:	7a28      	ldrb	r0, [r5, #8]
 80032f8:	46a4      	mov	ip, r4
  return res;
}
 80032fa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80032fc:	4760      	bx	ip
 80032fe:	bf00      	nop
 8003300:	20000218 	.word	0x20000218

08003304 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <disk_ioctl+0x18>)
{
 8003306:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003308:	181c      	adds	r4, r3, r0
 800330a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800330e:	7a20      	ldrb	r0, [r4, #8]
 8003310:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8003312:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	4718      	bx	r3
 800331a:	bf00      	nop
 800331c:	20000218 	.word	0x20000218

08003320 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003320:	3801      	subs	r0, #1
 8003322:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003324:	4291      	cmp	r1, r2
 8003326:	d100      	bne.n	800332a <mem_cpy+0xa>
		*d++ = *s++;
}
 8003328:	4770      	bx	lr
		*d++ = *s++;
 800332a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800332e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8003332:	e7f7      	b.n	8003324 <mem_cpy+0x4>

08003334 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003334:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8003336:	4290      	cmp	r0, r2
 8003338:	d100      	bne.n	800333c <mem_set+0x8>
		*d++ = (BYTE)val;
}
 800333a:	4770      	bx	lr
		*d++ = (BYTE)val;
 800333c:	f800 1b01 	strb.w	r1, [r0], #1
 8003340:	e7f9      	b.n	8003336 <mem_set+0x2>
	...

08003344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <chk_lock+0x60>)
 8003346:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003348:	2400      	movs	r4, #0
 800334a:	4623      	mov	r3, r4
 800334c:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 800334e:	6815      	ldr	r5, [r2, #0]
 8003350:	b1c5      	cbz	r5, 8003384 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003352:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8003356:	42bd      	cmp	r5, r7
 8003358:	d115      	bne.n	8003386 <chk_lock+0x42>
 800335a:	6857      	ldr	r7, [r2, #4]
 800335c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8003360:	42af      	cmp	r7, r5
 8003362:	d110      	bne.n	8003386 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8003364:	8917      	ldrh	r7, [r2, #8]
 8003366:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 800336a:	42af      	cmp	r7, r5
 800336c:	d10b      	bne.n	8003386 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800336e:	b9b9      	cbnz	r1, 80033a0 <chk_lock+0x5c>
 8003370:	220c      	movs	r2, #12
 8003372:	fb02 6303 	mla	r3, r2, r3, r6
 8003376:	895b      	ldrh	r3, [r3, #10]
 8003378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337c:	bf14      	ite	ne
 800337e:	2000      	movne	r0, #0
 8003380:	2010      	moveq	r0, #16
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8003384:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003386:	3301      	adds	r3, #1
 8003388:	2b02      	cmp	r3, #2
 800338a:	f102 020c 	add.w	r2, r2, #12
 800338e:	d1de      	bne.n	800334e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003390:	b10c      	cbz	r4, 8003396 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003392:	2000      	movs	r0, #0
 8003394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003396:	2902      	cmp	r1, #2
 8003398:	bf0c      	ite	eq
 800339a:	2000      	moveq	r0, #0
 800339c:	2012      	movne	r0, #18
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80033a0:	2010      	movs	r0, #16
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a4:	200001fc 	.word	0x200001fc

080033a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	4c20      	ldr	r4, [pc, #128]	; (800342c <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80033ac:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033b0:	2300      	movs	r3, #0
 80033b2:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 80033b4:	6825      	ldr	r5, [r4, #0]
 80033b6:	42b5      	cmp	r5, r6
 80033b8:	d109      	bne.n	80033ce <inc_lock+0x26>
 80033ba:	6867      	ldr	r7, [r4, #4]
 80033bc:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80033c0:	42af      	cmp	r7, r5
 80033c2:	d104      	bne.n	80033ce <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 80033c4:	8927      	ldrh	r7, [r4, #8]
 80033c6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80033ca:	42af      	cmp	r7, r5
 80033cc:	d022      	beq.n	8003414 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033ce:	3301      	adds	r3, #1
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f104 040c 	add.w	r4, r4, #12
 80033d6:	d1ed      	bne.n	80033b4 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	b113      	cbz	r3, 80033e2 <inc_lock+0x3a>
 80033dc:	68d3      	ldr	r3, [r2, #12]
 80033de:	bb1b      	cbnz	r3, 8003428 <inc_lock+0x80>
 80033e0:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 80033e2:	240c      	movs	r4, #12
 80033e4:	435c      	muls	r4, r3
 80033e6:	1915      	adds	r5, r2, r4
 80033e8:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80033ea:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 80033ee:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 80033f2:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80033f4:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 80033f6:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 80033f8:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80033fa:	b991      	cbnz	r1, 8003422 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80033fc:	210c      	movs	r1, #12
 80033fe:	fb01 2103 	mla	r1, r1, r3, r2
 8003402:	8949      	ldrh	r1, [r1, #10]
 8003404:	3101      	adds	r1, #1
 8003406:	b289      	uxth	r1, r1
 8003408:	200c      	movs	r0, #12
 800340a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 800340e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003410:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003414:	2900      	cmp	r1, #0
 8003416:	d0f1      	beq.n	80033fc <inc_lock+0x54>
 8003418:	210c      	movs	r1, #12
 800341a:	fb01 2103 	mla	r1, r1, r3, r2
 800341e:	8949      	ldrh	r1, [r1, #10]
 8003420:	b911      	cbnz	r1, 8003428 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003426:	e7ef      	b.n	8003408 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003428:	2000      	movs	r0, #0
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800342c:	200001fc 	.word	0x200001fc

08003430 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003430:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003432:	1e45      	subs	r5, r0, #1
 8003434:	2d01      	cmp	r5, #1
 8003436:	d811      	bhi.n	800345c <dec_lock+0x2c>
		n = Files[i].ctr;
 8003438:	490a      	ldr	r1, [pc, #40]	; (8003464 <dec_lock+0x34>)
 800343a:	220c      	movs	r2, #12
 800343c:	fb02 1305 	mla	r3, r2, r5, r1
 8003440:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8003442:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8003446:	b298      	uxth	r0, r3
 8003448:	b108      	cbz	r0, 800344e <dec_lock+0x1e>
 800344a:	3c01      	subs	r4, #1
 800344c:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 800344e:	fb02 f305 	mul.w	r3, r2, r5
 8003452:	18ca      	adds	r2, r1, r3
 8003454:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003456:	b918      	cbnz	r0, 8003460 <dec_lock+0x30>
 8003458:	50c8      	str	r0, [r1, r3]
 800345a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800345c:	2002      	movs	r0, #2
 800345e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8003460:	2000      	movs	r0, #0
	}
	return res;
}
 8003462:	bd30      	pop	{r4, r5, pc}
 8003464:	200001fc 	.word	0x200001fc

08003468 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003468:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800346c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003470:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003472:	0a49      	lsrs	r1, r1, #9
 8003474:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003478:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800347c:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 800347e:	b130      	cbz	r0, 800348e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8003480:	4281      	cmp	r1, r0
 8003482:	d302      	bcc.n	800348a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8003484:	1a09      	subs	r1, r1, r0
 8003486:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003488:	e7f8      	b.n	800347c <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 800348a:	6858      	ldr	r0, [r3, #4]
 800348c:	4408      	add	r0, r1
}
 800348e:	4770      	bx	lr

08003490 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8003490:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8003494:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8003496:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 800349a:	b322      	cbz	r2, 80034e6 <get_fileinfo+0x56>
		dir = dp->dir;
 800349c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 80034a0:	2400      	movs	r4, #0
 80034a2:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80034a4:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 80034a6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 80034aa:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 80034ac:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 80034b0:	d009      	beq.n	80034c6 <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80034b2:	2805      	cmp	r0, #5
 80034b4:	bf08      	it	eq
 80034b6:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80034b8:	2c09      	cmp	r4, #9
 80034ba:	bf04      	itt	eq
 80034bc:	701e      	strbeq	r6, [r3, #0]
 80034be:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 80034c0:	3301      	adds	r3, #1
 80034c2:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 80034c6:	2c0b      	cmp	r4, #11
 80034c8:	d1ed      	bne.n	80034a6 <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80034ca:	7ad0      	ldrb	r0, [r2, #11]
 80034cc:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80034ce:	69d0      	ldr	r0, [r2, #28]
 80034d0:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80034d2:	7e54      	ldrb	r4, [r2, #25]
 80034d4:	7e10      	ldrb	r0, [r2, #24]
 80034d6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80034da:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80034dc:	7dd0      	ldrb	r0, [r2, #23]
 80034de:	7d92      	ldrb	r2, [r2, #22]
 80034e0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80034e4:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	bd70      	pop	{r4, r5, r6, pc}

080034ec <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80034ec:	6802      	ldr	r2, [r0, #0]
{
 80034ee:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80034f0:	b152      	cbz	r2, 8003508 <get_ldnumber+0x1c>
 80034f2:	4611      	mov	r1, r2
 80034f4:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80034f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034fa:	2c20      	cmp	r4, #32
 80034fc:	d90c      	bls.n	8003518 <get_ldnumber+0x2c>
 80034fe:	2c3a      	cmp	r4, #58	; 0x3a
 8003500:	d1f8      	bne.n	80034f4 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8003502:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003504:	428b      	cmp	r3, r1
 8003506:	d002      	beq.n	800350e <get_ldnumber+0x22>
	int vol = -1;
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 800350c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	2a30      	cmp	r2, #48	; 0x30
 8003512:	d1f9      	bne.n	8003508 <get_ldnumber+0x1c>
					*path = ++tt;
 8003514:	3301      	adds	r3, #1
 8003516:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8003518:	2000      	movs	r0, #0
 800351a:	bd10      	pop	{r4, pc}

0800351c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800351c:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800351e:	b190      	cbz	r0, 8003546 <validate+0x2a>
 8003520:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8003524:	b17b      	cbz	r3, 8003546 <validate+0x2a>
 8003526:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 800352a:	b162      	cbz	r2, 8003546 <validate+0x2a>
 800352c:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8003530:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8003534:	4291      	cmp	r1, r2
 8003536:	d106      	bne.n	8003546 <validate+0x2a>
 8003538:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800353c:	f7ff feac 	bl	8003298 <disk_status>
 8003540:	f010 0001 	ands.w	r0, r0, #1
 8003544:	d000      	beq.n	8003548 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8003546:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8003548:	bd08      	pop	{r3, pc}

0800354a <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 800354a:	7eca      	ldrb	r2, [r1, #27]
 800354c:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 800354e:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003554:	bf01      	itttt	eq
 8003556:	7d48      	ldrbeq	r0, [r1, #21]
 8003558:	7d0a      	ldrbeq	r2, [r1, #20]
 800355a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800355e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8003562:	4618      	mov	r0, r3
 8003564:	4770      	bx	lr

08003566 <sync_window.part.2>:
FRESULT sync_window (
 8003566:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8003568:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 800356c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800356e:	4601      	mov	r1, r0
 8003570:	2301      	movs	r3, #1
 8003572:	462a      	mov	r2, r5
 8003574:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003578:	f7ff feb6 	bl	80032e8 <disk_write>
 800357c:	b9d0      	cbnz	r0, 80035b4 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800357e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8003582:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8003586:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800358a:	1aeb      	subs	r3, r5, r3
 800358c:	4293      	cmp	r3, r2
 800358e:	d301      	bcc.n	8003594 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8003590:	2000      	movs	r0, #0
 8003592:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003594:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8003598:	2e01      	cmp	r6, #1
 800359a:	d9f9      	bls.n	8003590 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 800359c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80035a0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 80035a4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80035a6:	462a      	mov	r2, r5
 80035a8:	2301      	movs	r3, #1
 80035aa:	4621      	mov	r1, r4
 80035ac:	f7ff fe9c 	bl	80032e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035b0:	3e01      	subs	r6, #1
 80035b2:	e7f1      	b.n	8003598 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 80035b4:	2001      	movs	r0, #1
}
 80035b6:	bd70      	pop	{r4, r5, r6, pc}

080035b8 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80035b8:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 80035bc:	b10b      	cbz	r3, 80035c2 <sync_window+0xa>
 80035be:	f7ff bfd2 	b.w	8003566 <sync_window.part.2>
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	4770      	bx	lr

080035c6 <sync_fs>:
{
 80035c6:	b538      	push	{r3, r4, r5, lr}
 80035c8:	4604      	mov	r4, r0
	res = sync_window(fs);
 80035ca:	f7ff fff5 	bl	80035b8 <sync_window>
 80035ce:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d154      	bne.n	800367e <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80035d4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d147      	bne.n	800366c <sync_fs+0xa6>
 80035dc:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d143      	bne.n	800366c <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 80035e4:	4601      	mov	r1, r0
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	4620      	mov	r0, r4
 80035ec:	f7ff fea2 	bl	8003334 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80035f0:	2255      	movs	r2, #85	; 0x55
 80035f2:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 80035f6:	22aa      	movs	r2, #170	; 0xaa
 80035f8:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80035fc:	2252      	movs	r2, #82	; 0x52
 80035fe:	7022      	strb	r2, [r4, #0]
 8003600:	7062      	strb	r2, [r4, #1]
 8003602:	2261      	movs	r2, #97	; 0x61
 8003604:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003606:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800360a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800360e:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003612:	2141      	movs	r1, #65	; 0x41
 8003614:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003616:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800361a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800361e:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8003622:	0c11      	lsrs	r1, r2, #16
 8003624:	0e12      	lsrs	r2, r2, #24
 8003626:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800362a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800362e:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003632:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003636:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 800363a:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 800363e:	0c11      	lsrs	r1, r2, #16
 8003640:	0e12      	lsrs	r2, r2, #24
 8003642:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8003646:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800364a:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800364e:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8003650:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003652:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8003656:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 800365a:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800365e:	4621      	mov	r1, r4
 8003660:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003664:	f7ff fe40 	bl	80032e8 <disk_write>
			fs->fsi_flag = 0;
 8003668:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800366c:	2200      	movs	r2, #0
 800366e:	4611      	mov	r1, r2
 8003670:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003674:	f7ff fe46 	bl	8003304 <disk_ioctl>
 8003678:	3000      	adds	r0, #0
 800367a:	bf18      	it	ne
 800367c:	2001      	movne	r0, #1
}
 800367e:	bd38      	pop	{r3, r4, r5, pc}

08003680 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003680:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8003684:	428b      	cmp	r3, r1
{
 8003686:	b570      	push	{r4, r5, r6, lr}
 8003688:	4606      	mov	r6, r0
 800368a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800368c:	d013      	beq.n	80036b6 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 800368e:	f7ff ff93 	bl	80035b8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003692:	4604      	mov	r4, r0
 8003694:	b968      	cbnz	r0, 80036b2 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003696:	462a      	mov	r2, r5
 8003698:	2301      	movs	r3, #1
 800369a:	4631      	mov	r1, r6
 800369c:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 80036a0:	f7ff fe14 	bl	80032cc <disk_read>
 80036a4:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 80036a6:	bf1c      	itt	ne
 80036a8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80036ac:	2401      	movne	r4, #1
			fs->winsect = sector;
 80036ae:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 80036b2:	4620      	mov	r0, r4
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80036b6:	2400      	movs	r4, #0
 80036b8:	e7fb      	b.n	80036b2 <move_window+0x32>
	...

080036bc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80036bc:	2300      	movs	r3, #0
{
 80036be:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80036c0:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036c8:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 80036cc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80036ce:	f7ff ffd7 	bl	8003680 <move_window>
 80036d2:	b9c0      	cbnz	r0, 8003706 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80036d4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80036d8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80036dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036e0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d110      	bne.n	800370a <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80036e8:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <check_fs+0x54>)
 80036ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00a      	beq.n	800370c <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80036f6:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80036fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80036fe:	1a80      	subs	r0, r0, r2
 8003700:	bf18      	it	ne
 8003702:	2001      	movne	r0, #1
 8003704:	bd10      	pop	{r4, pc}
 8003706:	2003      	movs	r0, #3
 8003708:	bd10      	pop	{r4, pc}
		return 2;
 800370a:	2002      	movs	r0, #2
}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	00544146 	.word	0x00544146

08003714 <find_volume>:
{
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	6003      	str	r3, [r0, #0]
{
 800371a:	b085      	sub	sp, #20
 800371c:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800371e:	4608      	mov	r0, r1
{
 8003720:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8003722:	f7ff fee3 	bl	80034ec <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003726:	1e06      	subs	r6, r0, #0
 8003728:	f2c0 8123 	blt.w	8003972 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800372c:	4b95      	ldr	r3, [pc, #596]	; (8003984 <find_volume+0x270>)
 800372e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003732:	2c00      	cmp	r4, #0
 8003734:	f000 811f 	beq.w	8003976 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8003738:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800373a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800373e:	b173      	cbz	r3, 800375e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8003740:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003744:	f7ff fda8 	bl	8003298 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003748:	07c7      	lsls	r7, r0, #31
 800374a:	d408      	bmi.n	800375e <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800374c:	2d00      	cmp	r5, #0
 800374e:	f000 8114 	beq.w	800397a <find_volume+0x266>
 8003752:	f010 0004 	ands.w	r0, r0, #4
 8003756:	d000      	beq.n	800375a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8003758:	200a      	movs	r0, #10
}
 800375a:	b005      	add	sp, #20
 800375c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800375e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003760:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8003762:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003766:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800376a:	f7ff fd9f 	bl	80032ac <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800376e:	07c1      	lsls	r1, r0, #31
 8003770:	f100 8105 	bmi.w	800397e <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003774:	b10d      	cbz	r5, 800377a <find_volume+0x66>
 8003776:	0742      	lsls	r2, r0, #29
 8003778:	d4ee      	bmi.n	8003758 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800377a:	2100      	movs	r1, #0
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff ff9d 	bl	80036bc <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003782:	2801      	cmp	r0, #1
 8003784:	f040 80dc 	bne.w	8003940 <find_volume+0x22c>
 8003788:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 800378c:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800378e:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8003792:	b103      	cbz	r3, 8003796 <find_volume+0x82>
 8003794:	680b      	ldr	r3, [r1, #0]
 8003796:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800379a:	3201      	adds	r2, #1
 800379c:	2a04      	cmp	r2, #4
 800379e:	f101 0110 	add.w	r1, r1, #16
 80037a2:	d1f4      	bne.n	800378e <find_volume+0x7a>
 80037a4:	2600      	movs	r6, #0
			bsect = br[i];
 80037a6:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	f000 80bf 	beq.w	800392e <find_volume+0x21a>
 80037b0:	4629      	mov	r1, r5
 80037b2:	4620      	mov	r0, r4
 80037b4:	f7ff ff82 	bl	80036bc <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f040 80b9 	bne.w	8003930 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80037be:	7b22      	ldrb	r2, [r4, #12]
 80037c0:	7ae3      	ldrb	r3, [r4, #11]
 80037c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ca:	f040 80bc 	bne.w	8003946 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80037ce:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80037d0:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80037d2:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80037d4:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80037d8:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80037dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80037e0:	bf08      	it	eq
 80037e2:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 80037e4:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f200 80ac 	bhi.w	8003946 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80037ee:	7b66      	ldrb	r6, [r4, #13]
 80037f0:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80037f4:	2e00      	cmp	r6, #0
 80037f6:	f000 80a6 	beq.w	8003946 <find_volume+0x232>
 80037fa:	1e73      	subs	r3, r6, #1
 80037fc:	4233      	tst	r3, r6
 80037fe:	f040 80a2 	bne.w	8003946 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003802:	7ca3      	ldrb	r3, [r4, #18]
 8003804:	7c67      	ldrb	r7, [r4, #17]
 8003806:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800380a:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800380c:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003810:	f040 8099 	bne.w	8003946 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003814:	7d22      	ldrb	r2, [r4, #20]
 8003816:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003818:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800381c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003820:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003822:	bf08      	it	eq
 8003824:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003826:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800382a:	f000 808c 	beq.w	8003946 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800382e:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003832:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8003836:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003838:	4283      	cmp	r3, r0
 800383a:	f0c0 8084 	bcc.w	8003946 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800383e:	1a1b      	subs	r3, r3, r0
 8003840:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003844:	2b00      	cmp	r3, #0
 8003846:	d07e      	beq.n	8003946 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003848:	f640 76f5 	movw	r6, #4085	; 0xff5
 800384c:	42b3      	cmp	r3, r6
 800384e:	d97e      	bls.n	800394e <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003850:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8003854:	42b3      	cmp	r3, r6
 8003856:	bf94      	ite	ls
 8003858:	2602      	movls	r6, #2
 800385a:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800385c:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800385e:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8003860:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8003862:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003864:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8003868:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800386c:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8003870:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8003874:	d16d      	bne.n	8003952 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003876:	2f00      	cmp	r7, #0
 8003878:	d165      	bne.n	8003946 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800387a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800387c:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003880:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003882:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003886:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800388a:	d35c      	bcc.n	8003946 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003890:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8003894:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003898:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 800389a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800389e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80038a2:	d12d      	bne.n	8003900 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80038a4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80038a8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80038ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d125      	bne.n	8003900 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 80038b4:	1c69      	adds	r1, r5, #1
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff fee2 	bl	8003680 <move_window>
 80038bc:	bb00      	cbnz	r0, 8003900 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80038be:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80038c2:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80038c6:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80038ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038ce:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d114      	bne.n	8003900 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <find_volume+0x274>)
 80038da:	429a      	cmp	r2, r3
 80038dc:	d110      	bne.n	8003900 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80038de:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80038e2:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 80038e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038ea:	3320      	adds	r3, #32
 80038ec:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80038ee:	bf01      	itttt	eq
 80038f0:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 80038f4:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80038f8:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 80038fc:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8003902:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8003906:	8813      	ldrh	r3, [r2, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	b29b      	uxth	r3, r3
 800390c:	8013      	strh	r3, [r2, #0]
 800390e:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <find_volume+0x27c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4294      	cmp	r4, r2
 8003918:	bf04      	itt	eq
 800391a:	2200      	moveq	r2, #0
 800391c:	601a      	streq	r2, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	4294      	cmp	r4, r2
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f47f af18 	bne.w	800375a <find_volume+0x46>
 800392a:	60d8      	str	r0, [r3, #12]
 800392c:	e715      	b.n	800375a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800392e:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003930:	3601      	adds	r6, #1
 8003932:	2e04      	cmp	r6, #4
 8003934:	f47f af37 	bne.w	80037a6 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003938:	2803      	cmp	r0, #3
 800393a:	d104      	bne.n	8003946 <find_volume+0x232>
 800393c:	2001      	movs	r0, #1
 800393e:	e70c      	b.n	800375a <find_volume+0x46>
 8003940:	2803      	cmp	r0, #3
 8003942:	d0fb      	beq.n	800393c <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003944:	b108      	cbz	r0, 800394a <find_volume+0x236>
 8003946:	200d      	movs	r0, #13
 8003948:	e707      	b.n	800375a <find_volume+0x46>
	bsect = 0;
 800394a:	4605      	mov	r5, r0
 800394c:	e737      	b.n	80037be <find_volume+0xaa>
	fmt = FS_FAT12;
 800394e:	2601      	movs	r6, #1
 8003950:	e784      	b.n	800385c <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003952:	2f00      	cmp	r7, #0
 8003954:	d0f7      	beq.n	8003946 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003956:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003958:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800395a:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800395e:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003962:	bf1b      	ittet	ne
 8003964:	18d2      	addne	r2, r2, r3
 8003966:	f003 0301 	andne.w	r3, r3, #1
 800396a:	4613      	moveq	r3, r2
 800396c:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8003970:	e787      	b.n	8003882 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003972:	200b      	movs	r0, #11
 8003974:	e6f1      	b.n	800375a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003976:	200c      	movs	r0, #12
 8003978:	e6ef      	b.n	800375a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800397a:	4628      	mov	r0, r5
 800397c:	e6ed      	b.n	800375a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800397e:	2003      	movs	r0, #3
 8003980:	e6eb      	b.n	800375a <find_volume+0x46>
 8003982:	bf00      	nop
 8003984:	200001f8 	.word	0x200001f8
 8003988:	41615252 	.word	0x41615252
 800398c:	20000214 	.word	0x20000214
 8003990:	200001fc 	.word	0x200001fc

08003994 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003994:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8003998:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800399a:	3b02      	subs	r3, #2
 800399c:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800399e:	bf3d      	ittte	cc
 80039a0:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 80039a4:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 80039a8:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80039ac:	2000      	movcs	r0, #0
}
 80039ae:	4770      	bx	lr

080039b0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039b0:	2901      	cmp	r1, #1
{
 80039b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b4:	4606      	mov	r6, r0
 80039b6:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039b8:	d959      	bls.n	8003a6e <get_fat+0xbe>
 80039ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80039be:	4299      	cmp	r1, r3
 80039c0:	d255      	bcs.n	8003a6e <get_fat+0xbe>
		switch (fs->fs_type) {
 80039c2:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d027      	beq.n	8003a1a <get_fat+0x6a>
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d036      	beq.n	8003a3c <get_fat+0x8c>
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d14d      	bne.n	8003a6e <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 80039d2:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039d6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80039da:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 80039de:	f7ff fe4f 	bl	8003680 <move_window>
 80039e2:	b110      	cbz	r0, 80039ea <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039ea:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 80039ee:	1c67      	adds	r7, r4, #1
 80039f0:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039f4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80039f8:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 80039fa:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039fc:	f7ff fe40 	bl	8003680 <move_window>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d1ef      	bne.n	80039e4 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003a04:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003a08:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003a0a:	5df0      	ldrb	r0, [r6, r7]
 8003a0c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003a10:	bf4c      	ite	mi
 8003a12:	0900      	lsrmi	r0, r0, #4
 8003a14:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a1a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8003a1e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8003a22:	f7ff fe2d 	bl	8003680 <move_window>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d1dc      	bne.n	80039e4 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a2a:	006d      	lsls	r5, r5, #1
 8003a2c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8003a30:	1973      	adds	r3, r6, r5
 8003a32:	5d70      	ldrb	r0, [r6, r5]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a3c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8003a40:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8003a44:	f7ff fe1c 	bl	8003680 <move_window>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d1cb      	bne.n	80039e4 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a4c:	00ad      	lsls	r5, r5, #2
 8003a4e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8003a52:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003a54:	7898      	ldrb	r0, [r3, #2]
 8003a56:	78da      	ldrb	r2, [r3, #3]
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	0400      	lsls	r0, r0, #16
 8003a5c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8003a60:	5d72      	ldrb	r2, [r6, r5]
 8003a62:	4310      	orrs	r0, r2
 8003a64:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003a68:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8003a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a72 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003a72:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8003a76:	b570      	push	{r4, r5, r6, lr}
 8003a78:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003a7a:	2a01      	cmp	r2, #1
{
 8003a7c:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8003a7e:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003a82:	d101      	bne.n	8003a88 <dir_sdi+0x16>
		return FR_INT_ERR;
 8003a84:	2002      	movs	r0, #2
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003a88:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8003a8c:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8003a90:	428a      	cmp	r2, r1
 8003a92:	d2f7      	bcs.n	8003a84 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003a94:	b9f2      	cbnz	r2, 8003ad4 <dir_sdi+0x62>
 8003a96:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8003a9a:	2903      	cmp	r1, #3
 8003a9c:	d102      	bne.n	8003aa4 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8003a9e:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003aa2:	b9c1      	cbnz	r1, 8003ad6 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003aa4:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8003aa8:	428d      	cmp	r5, r1
 8003aaa:	d2eb      	bcs.n	8003a84 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8003aac:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8003ab0:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d0e5      	beq.n	8003a84 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003ab8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003abc:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003ac0:	f005 050f 	and.w	r5, r5, #15
 8003ac4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003ac8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003acc:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003ad6:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8003ada:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003adc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8003ade:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8003ae6:	d202      	bcs.n	8003aee <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8003ae8:	f7ff ff54 	bl	8003994 <clust2sect>
 8003aec:	e7e0      	b.n	8003ab0 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003aee:	f7ff ff5f 	bl	80039b0 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003af2:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003af4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003af6:	d009      	beq.n	8003b0c <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003af8:	2801      	cmp	r0, #1
 8003afa:	d9c3      	bls.n	8003a84 <dir_sdi+0x12>
 8003afc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8003b00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003b04:	4298      	cmp	r0, r3
 8003b06:	d2bd      	bcs.n	8003a84 <dir_sdi+0x12>
			idx -= ic;
 8003b08:	1bad      	subs	r5, r5, r6
 8003b0a:	e7e8      	b.n	8003ade <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b0c:	2001      	movs	r0, #1
}
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}

08003b10 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b10:	2901      	cmp	r1, #1
{
 8003b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b16:	4605      	mov	r5, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b1c:	d96f      	bls.n	8003bfe <put_fat+0xee>
 8003b1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003b22:	4299      	cmp	r1, r3
 8003b24:	d26b      	bcs.n	8003bfe <put_fat+0xee>
		switch (fs->fs_type) {
 8003b26:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d03d      	beq.n	8003baa <put_fat+0x9a>
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d04b      	beq.n	8003bca <put_fat+0xba>
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d163      	bne.n	8003bfe <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8003b36:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b3a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8003b3e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003b42:	f7ff fd9d 	bl	8003680 <move_window>
			if (res != FR_OK) break;
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d15a      	bne.n	8003c00 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003b4a:	f107 0801 	add.w	r8, r7, #1
 8003b4e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b52:	f014 0401 	ands.w	r4, r4, #1
 8003b56:	bf1f      	itttt	ne
 8003b58:	5deb      	ldrbne	r3, [r5, r7]
 8003b5a:	f003 020f 	andne.w	r2, r3, #15
 8003b5e:	0133      	lslne	r3, r6, #4
 8003b60:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003b64:	bf14      	ite	ne
 8003b66:	4313      	orrne	r3, r2
 8003b68:	b2f3      	uxtbeq	r3, r6
 8003b6a:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b6c:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b76:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7ff fd80 	bl	8003680 <move_window>
			if (res != FR_OK) break;
 8003b80:	bbf0      	cbnz	r0, 8003c00 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8003b82:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b86:	b144      	cbz	r4, 8003b9a <put_fat+0x8a>
 8003b88:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8003b8c:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8003b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b9a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8003b9e:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8003ba2:	f022 020f 	bic.w	r2, r2, #15
 8003ba6:	4332      	orrs	r2, r6
 8003ba8:	e7f0      	b.n	8003b8c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003baa:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8003bae:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003bb2:	f7ff fd65 	bl	8003680 <move_window>
			if (res != FR_OK) break;
 8003bb6:	bb18      	cbnz	r0, 8003c00 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003bb8:	0064      	lsls	r4, r4, #1
 8003bba:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8003bbe:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8003bc2:	552e      	strb	r6, [r5, r4]
 8003bc4:	442c      	add	r4, r5
 8003bc6:	7062      	strb	r2, [r4, #1]
 8003bc8:	e7e2      	b.n	8003b90 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bca:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8003bce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003bd2:	f7ff fd55 	bl	8003680 <move_window>
			if (res != FR_OK) break;
 8003bd6:	b998      	cbnz	r0, 8003c00 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003bd8:	00a4      	lsls	r4, r4, #2
 8003bda:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003bde:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8003be0:	78cb      	ldrb	r3, [r1, #3]
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003be8:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8003bec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003bf0:	552a      	strb	r2, [r5, r4]
 8003bf2:	704b      	strb	r3, [r1, #1]
 8003bf4:	0c13      	lsrs	r3, r2, #16
 8003bf6:	0e12      	lsrs	r2, r2, #24
 8003bf8:	708b      	strb	r3, [r1, #2]
 8003bfa:	70ca      	strb	r2, [r1, #3]
 8003bfc:	e7c8      	b.n	8003b90 <put_fat+0x80>
			res = FR_INT_ERR;
 8003bfe:	2002      	movs	r0, #2
}
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c04 <create_chain>:
{
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8003c08:	460f      	mov	r7, r1
 8003c0a:	b989      	cbnz	r1, 8003c30 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8003c0c:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003c10:	b1fe      	cbz	r6, 8003c52 <create_chain+0x4e>
 8003c12:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003c16:	429e      	cmp	r6, r3
 8003c18:	bf28      	it	cs
 8003c1a:	2601      	movcs	r6, #1
 8003c1c:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003c1e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8003c22:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003c24:	429c      	cmp	r4, r3
 8003c26:	d317      	bcc.n	8003c58 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8003c28:	2e01      	cmp	r6, #1
 8003c2a:	d814      	bhi.n	8003c56 <create_chain+0x52>
 8003c2c:	2400      	movs	r4, #0
 8003c2e:	e008      	b.n	8003c42 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003c30:	f7ff febe 	bl	80039b0 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8003c34:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003c36:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8003c38:	d93b      	bls.n	8003cb2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d103      	bne.n	8003c46 <create_chain+0x42>
			ncl = 2;
 8003c3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8003c42:	4620      	mov	r0, r4
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003c46:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003c4a:	429c      	cmp	r4, r3
 8003c4c:	d3f9      	bcc.n	8003c42 <create_chain+0x3e>
 8003c4e:	463e      	mov	r6, r7
 8003c50:	e7e4      	b.n	8003c1c <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003c52:	2601      	movs	r6, #1
 8003c54:	e7e2      	b.n	8003c1c <create_chain+0x18>
			ncl = 2;
 8003c56:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7ff fea8 	bl	80039b0 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8003c60:	b130      	cbz	r0, 8003c70 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003c62:	1c41      	adds	r1, r0, #1
 8003c64:	d0eb      	beq.n	8003c3e <create_chain+0x3a>
 8003c66:	2801      	cmp	r0, #1
 8003c68:	d023      	beq.n	8003cb2 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8003c6a:	42b4      	cmp	r4, r6
 8003c6c:	d1d7      	bne.n	8003c1e <create_chain+0x1a>
 8003c6e:	e7dd      	b.n	8003c2c <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003c70:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003c74:	4621      	mov	r1, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	f7ff ff4a 	bl	8003b10 <put_fat>
	if (res == FR_OK && clst != 0) {
 8003c7c:	b9b8      	cbnz	r0, 8003cae <create_chain+0xaa>
 8003c7e:	b97f      	cbnz	r7, 8003ca0 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8003c80:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8003c84:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	d0da      	beq.n	8003c42 <create_chain+0x3e>
			fs->free_clust--;
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8003c92:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8003c9e:	e7d0      	b.n	8003c42 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ca0:	4622      	mov	r2, r4
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff ff33 	bl	8003b10 <put_fat>
	if (res == FR_OK) {
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d0e8      	beq.n	8003c80 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003cae:	2801      	cmp	r0, #1
 8003cb0:	d0c5      	beq.n	8003c3e <create_chain+0x3a>
 8003cb2:	2401      	movs	r4, #1
 8003cb4:	e7c5      	b.n	8003c42 <create_chain+0x3e>

08003cb6 <dir_next>:
{
 8003cb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8003cba:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8003cbe:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003cc0:	b2b3      	uxth	r3, r6
{
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003cc6:	b913      	cbnz	r3, 8003cce <dir_next+0x18>
		return FR_NO_FILE;
 8003cc8:	2004      	movs	r0, #4
 8003cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003cce:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f8      	beq.n	8003cc8 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003cd6:	f016 080f 	ands.w	r8, r6, #15
 8003cda:	d10b      	bne.n	8003cf4 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8003cdc:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8003ce6:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8003cea:	b971      	cbnz	r1, 8003d0a <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003cec:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8003cf0:	429e      	cmp	r6, r3
 8003cf2:	d2e9      	bcs.n	8003cc8 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003cf4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8003cf8:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003cfc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003d00:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8003d04:	2000      	movs	r0, #0
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003d0a:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8003d0e:	3f01      	subs	r7, #1
 8003d10:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8003d14:	d1ee      	bne.n	8003cf4 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003d16:	f7ff fe4b 	bl	80039b0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8003d1a:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003d1c:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8003d1e:	d802      	bhi.n	8003d26 <dir_next+0x70>
 8003d20:	2002      	movs	r0, #2
 8003d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003d26:	1c42      	adds	r2, r0, #1
 8003d28:	d102      	bne.n	8003d30 <dir_next+0x7a>
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003d30:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003d34:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d38:	429d      	cmp	r5, r3
 8003d3a:	d32f      	bcc.n	8003d9c <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003d3c:	f1b9 0f00 	cmp.w	r9, #0
 8003d40:	d0c2      	beq.n	8003cc8 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003d42:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8003d46:	f7ff ff5d 	bl	8003c04 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d03e      	beq.n	8003dce <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8003d50:	2801      	cmp	r0, #1
 8003d52:	d0e5      	beq.n	8003d20 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d0e8      	beq.n	8003d2a <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003d58:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003d5c:	f7ff fc2c 	bl	80035b8 <sync_window>
 8003d60:	4601      	mov	r1, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d1e1      	bne.n	8003d2a <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003d6e:	f7ff fae1 	bl	8003334 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003d72:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8003d76:	4629      	mov	r1, r5
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7ff fe0b 	bl	8003994 <clust2sect>
						dp->fs->wflag = 1;
 8003d7e:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003d82:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003d86:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003d8a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8003d8e:	429f      	cmp	r7, r3
 8003d90:	d30e      	bcc.n	8003db0 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003d92:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8003d96:	1bdf      	subs	r7, r3, r7
 8003d98:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8003d9c:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8003da0:	4629      	mov	r1, r5
 8003da2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003da6:	f7ff fdf5 	bl	8003994 <clust2sect>
 8003daa:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8003dae:	e7a1      	b.n	8003cf4 <dir_next+0x3e>
						dp->fs->wflag = 1;
 8003db0:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8003db4:	f7ff fbd7 	bl	8003566 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d1b6      	bne.n	8003d2a <dir_next+0x74>
						dp->fs->winsect++;
 8003dbc:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8003dc0:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003dca:	3701      	adds	r7, #1
 8003dcc:	e7db      	b.n	8003d86 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003dce:	2007      	movs	r0, #7
}
 8003dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003dd4 <follow_path>:
{
 8003dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003dd8:	780b      	ldrb	r3, [r1, #0]
 8003dda:	2b2f      	cmp	r3, #47	; 0x2f
{
 8003ddc:	4604      	mov	r4, r0
 8003dde:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003de0:	d001      	beq.n	8003de6 <follow_path+0x12>
 8003de2:	2b5c      	cmp	r3, #92	; 0x5c
 8003de4:	d100      	bne.n	8003de8 <follow_path+0x14>
		path++;
 8003de6:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8003de8:	2600      	movs	r6, #0
 8003dea:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003dee:	782b      	ldrb	r3, [r5, #0]
 8003df0:	2b1f      	cmp	r3, #31
 8003df2:	d936      	bls.n	8003e62 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003df4:	4e5f      	ldr	r6, [pc, #380]	; (8003f74 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003df6:	782b      	ldrb	r3, [r5, #0]
 8003df8:	2b2f      	cmp	r3, #47	; 0x2f
 8003dfa:	46a8      	mov	r8, r5
 8003dfc:	f105 0501 	add.w	r5, r5, #1
 8003e00:	d0f9      	beq.n	8003df6 <follow_path+0x22>
 8003e02:	2b5c      	cmp	r3, #92	; 0x5c
 8003e04:	d0f7      	beq.n	8003df6 <follow_path+0x22>
	sfn = dp->fn;
 8003e06:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8003e0a:	220b      	movs	r2, #11
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f7ff fa90 	bl	8003334 <mem_set>
	si = i = b = 0; ni = 8;
 8003e14:	f04f 0e00 	mov.w	lr, #0
 8003e18:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8003e1c:	46f4      	mov	ip, lr
 8003e1e:	2108      	movs	r1, #8
 8003e20:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8003e22:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8003e26:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8003e28:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8003e2c:	d928      	bls.n	8003e80 <follow_path+0xac>
 8003e2e:	2b2f      	cmp	r3, #47	; 0x2f
 8003e30:	d026      	beq.n	8003e80 <follow_path+0xac>
 8003e32:	2b5c      	cmp	r3, #92	; 0x5c
 8003e34:	d024      	beq.n	8003e80 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8003e36:	2b2e      	cmp	r3, #46	; 0x2e
 8003e38:	f000 8085 	beq.w	8003f46 <follow_path+0x172>
 8003e3c:	4571      	cmp	r1, lr
 8003e3e:	d90d      	bls.n	8003e5c <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8003e40:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003e42:	bf48      	it	mi
 8003e44:	3b80      	submi	r3, #128	; 0x80
 8003e46:	4d4c      	ldr	r5, [pc, #304]	; (8003f78 <follow_path+0x1a4>)
 8003e48:	bf44      	itt	mi
 8003e4a:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8003e4c:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8003e50:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d07d      	beq.n	8003f54 <follow_path+0x180>
 8003e58:	4283      	cmp	r3, r0
 8003e5a:	d1f9      	bne.n	8003e50 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8003e5c:	2006      	movs	r0, #6
	return res;
 8003e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8003e62:	4631      	mov	r1, r6
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff fe04 	bl	8003a72 <dir_sdi>
		dp->dir = 0;
 8003e6a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8003e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8003e72:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8003e76:	f807 300e 	strb.w	r3, [r7, lr]
 8003e7a:	f10e 0e01 	add.w	lr, lr, #1
 8003e7e:	e7d0      	b.n	8003e22 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003e80:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8003e82:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003e86:	bf34      	ite	cc
 8003e88:	2304      	movcc	r3, #4
 8003e8a:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8003e8c:	f1be 0f00 	cmp.w	lr, #0
 8003e90:	d0e4      	beq.n	8003e5c <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8003e92:	7838      	ldrb	r0, [r7, #0]
 8003e94:	28e5      	cmp	r0, #229	; 0xe5
 8003e96:	bf04      	itt	eq
 8003e98:	2005      	moveq	r0, #5
 8003e9a:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8003e9c:	2908      	cmp	r1, #8
 8003e9e:	bf04      	itt	eq
 8003ea0:	0092      	lsleq	r2, r2, #2
 8003ea2:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8003ea4:	f002 0103 	and.w	r1, r2, #3
 8003ea8:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8003eaa:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8003eae:	bf08      	it	eq
 8003eb0:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8003eb4:	2a04      	cmp	r2, #4
 8003eb6:	bf08      	it	eq
 8003eb8:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8003ebc:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7ff fdd6 	bl	8003a72 <dir_sdi>
	if (res != FR_OK) return res;
 8003ec6:	b9f8      	cbnz	r0, 8003f08 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8003ec8:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8003ecc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003ed0:	f7ff fbd6 	bl	8003680 <move_window>
		if (res != FR_OK) break;
 8003ed4:	b9c0      	cbnz	r0, 8003f08 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003ed6:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003eda:	7813      	ldrb	r3, [r2, #0]
 8003edc:	b19b      	cbz	r3, 8003f06 <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8003ede:	7ad3      	ldrb	r3, [r2, #11]
 8003ee0:	0719      	lsls	r1, r3, #28
 8003ee2:	d40b      	bmi.n	8003efc <follow_path+0x128>
 8003ee4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003ee8:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003eec:	4573      	cmp	r3, lr
 8003eee:	d00b      	beq.n	8003f08 <follow_path+0x134>
 8003ef0:	f812 7b01 	ldrb.w	r7, [r2], #1
 8003ef4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003ef8:	428f      	cmp	r7, r1
 8003efa:	d0f7      	beq.n	8003eec <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8003efc:	2100      	movs	r1, #0
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff fed9 	bl	8003cb6 <dir_next>
 8003f04:	e7df      	b.n	8003ec6 <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f06:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8003f08:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003f0c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003f0e:	b138      	cbz	r0, 8003f20 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003f10:	2804      	cmp	r0, #4
 8003f12:	d12c      	bne.n	8003f6e <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003f14:	f013 0f04 	tst.w	r3, #4
 8003f18:	bf08      	it	eq
 8003f1a:	2005      	moveq	r0, #5
 8003f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003f20:	075a      	lsls	r2, r3, #29
 8003f22:	d424      	bmi.n	8003f6e <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8003f24:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003f28:	7acb      	ldrb	r3, [r1, #11]
 8003f2a:	06db      	lsls	r3, r3, #27
 8003f2c:	d508      	bpl.n	8003f40 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8003f2e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8003f32:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8003f36:	f7ff fb08 	bl	800354a <ld_clust.isra.0>
 8003f3a:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003f3e:	e75a      	b.n	8003df6 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003f40:	2005      	movs	r0, #5
 8003f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8003f46:	2908      	cmp	r1, #8
 8003f48:	d188      	bne.n	8003e5c <follow_path+0x88>
			b <<= 2; continue;
 8003f4a:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8003f4c:	468e      	mov	lr, r1
			b <<= 2; continue;
 8003f4e:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8003f50:	210b      	movs	r1, #11
 8003f52:	e766      	b.n	8003e22 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8003f54:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8003f58:	2819      	cmp	r0, #25
 8003f5a:	d98a      	bls.n	8003e72 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8003f5c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8003f60:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8003f62:	bf9e      	ittt	ls
 8003f64:	3b20      	subls	r3, #32
 8003f66:	f042 0201 	orrls.w	r2, r2, #1
 8003f6a:	b2db      	uxtbls	r3, r3
 8003f6c:	e783      	b.n	8003e76 <follow_path+0xa2>
}
 8003f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f72:	bf00      	nop
 8003f74:	08006986 	.word	0x08006986
 8003f78:	08006a05 	.word	0x08006a05

08003f7c <dir_read.constprop.13>:
FRESULT dir_read (
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8003f80:	2004      	movs	r0, #4
	while (dp->sect) {
 8003f82:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8003f86:	b909      	cbnz	r1, 8003f8c <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 8003f88:	b1b0      	cbz	r0, 8003fb8 <dir_read.constprop.13+0x3c>
 8003f8a:	e01d      	b.n	8003fc8 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8003f8c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8003f90:	f7ff fb76 	bl	8003680 <move_window>
		if (res != FR_OK) break;
 8003f94:	b9c0      	cbnz	r0, 8003fc8 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003f96:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8003f9a:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f9c:	b1c3      	cbz	r3, 8003fd0 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003f9e:	2be5      	cmp	r3, #229	; 0xe5
 8003fa0:	d00c      	beq.n	8003fbc <dir_read.constprop.13+0x40>
 8003fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa4:	d00a      	beq.n	8003fbc <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 8003fa6:	7ad3      	ldrb	r3, [r2, #11]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d005      	beq.n	8003fbc <dir_read.constprop.13+0x40>
 8003fb0:	f023 0320 	bic.w	r3, r3, #32
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d001      	beq.n	8003fbc <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7ff fe79 	bl	8003cb6 <dir_next>
		if (res != FR_OK) break;
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d0dc      	beq.n	8003f82 <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8003fce:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003fd0:	2004      	movs	r0, #4
 8003fd2:	e7f9      	b.n	8003fc8 <dir_read.constprop.13+0x4c>

08003fd4 <dir_register>:
{
 8003fd4:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8003fd6:	2100      	movs	r1, #0
{
 8003fd8:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8003fda:	f7ff fd4a 	bl	8003a72 <dir_sdi>
	if (res == FR_OK) {
 8003fde:	4604      	mov	r4, r0
 8003fe0:	bb78      	cbnz	r0, 8004042 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8003fe2:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8003fe6:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8003fea:	f7ff fb49 	bl	8003680 <move_window>
			if (res != FR_OK) break;
 8003fee:	4604      	mov	r4, r0
 8003ff0:	bb38      	cbnz	r0, 8004042 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003ff2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2be5      	cmp	r3, #229	; 0xe5
 8003ffa:	d11b      	bne.n	8004034 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8003ffc:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8004000:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8004004:	f7ff fb3c 	bl	8003680 <move_window>
		if (res == FR_OK) {
 8004008:	4604      	mov	r4, r0
 800400a:	b988      	cbnz	r0, 8004030 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800400c:	4601      	mov	r1, r0
 800400e:	2220      	movs	r2, #32
 8004010:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8004014:	f7ff f98e 	bl	8003334 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004018:	220b      	movs	r2, #11
 800401a:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800401e:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8004022:	f7ff f97d 	bl	8003320 <mem_cpy>
			dp->fs->wflag = 1;
 8004026:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004030:	4620      	mov	r0, r4
 8004032:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0e1      	beq.n	8003ffc <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004038:	2101      	movs	r1, #1
 800403a:	4628      	mov	r0, r5
 800403c:	f7ff fe3b 	bl	8003cb6 <dir_next>
 8004040:	e7cd      	b.n	8003fde <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004042:	2c04      	cmp	r4, #4
 8004044:	bf08      	it	eq
 8004046:	2407      	moveq	r4, #7
 8004048:	e7f2      	b.n	8004030 <dir_register+0x5c>

0800404a <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800404a:	2901      	cmp	r1, #1
{
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4604      	mov	r4, r0
 8004050:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004052:	d801      	bhi.n	8004058 <remove_chain+0xe>
		res = FR_INT_ERR;
 8004054:	2002      	movs	r0, #2
 8004056:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004058:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800405c:	4299      	cmp	r1, r3
 800405e:	d2f9      	bcs.n	8004054 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004060:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004064:	429d      	cmp	r5, r3
 8004066:	d205      	bcs.n	8004074 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004068:	4629      	mov	r1, r5
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff fca0 	bl	80039b0 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8004070:	4606      	mov	r6, r0
 8004072:	b908      	cbnz	r0, 8004078 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8004074:	2000      	movs	r0, #0
 8004076:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004078:	2801      	cmp	r0, #1
 800407a:	d0eb      	beq.n	8004054 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800407c:	1c41      	adds	r1, r0, #1
 800407e:	d014      	beq.n	80040aa <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004080:	2200      	movs	r2, #0
 8004082:	4629      	mov	r1, r5
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff fd43 	bl	8003b10 <put_fat>
			if (res != FR_OK) break;
 800408a:	b978      	cbnz	r0, 80040ac <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800408c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	d008      	beq.n	80040a6 <remove_chain+0x5c>
				fs->free_clust++;
 8004094:	3301      	adds	r3, #1
 8004096:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800409a:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 80040a6:	4635      	mov	r5, r6
 80040a8:	e7da      	b.n	8004060 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80040aa:	2001      	movs	r0, #1
}
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080040b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80040b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80040b2:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80040b4:	a804      	add	r0, sp, #16
{
 80040b6:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80040b8:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80040bc:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 80040be:	f7ff fa15 	bl	80034ec <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80040c2:	1e05      	subs	r5, r0, #0
 80040c4:	db21      	blt.n	800410a <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80040c6:	4913      	ldr	r1, [pc, #76]	; (8004114 <f_mount+0x64>)
 80040c8:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80040cc:	b164      	cbz	r4, 80040e8 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <f_mount+0x68>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4294      	cmp	r4, r2
 80040d4:	bf04      	itt	eq
 80040d6:	2200      	moveq	r2, #0
 80040d8:	601a      	streq	r2, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	2000      	movs	r0, #0
 80040de:	4294      	cmp	r4, r2
 80040e0:	bf08      	it	eq
 80040e2:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80040e4:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 80040e8:	9801      	ldr	r0, [sp, #4]
 80040ea:	b110      	cbz	r0, 80040f2 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 80040ec:	2300      	movs	r3, #0
 80040ee:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040f2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040f6:	b130      	cbz	r0, 8004106 <f_mount+0x56>
 80040f8:	2e01      	cmp	r6, #1
 80040fa:	d108      	bne.n	800410e <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80040fc:	2200      	movs	r2, #0
 80040fe:	4669      	mov	r1, sp
 8004100:	a801      	add	r0, sp, #4
 8004102:	f7ff fb07 	bl	8003714 <find_volume>
	LEAVE_FF(fs, res);
}
 8004106:	b004      	add	sp, #16
 8004108:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800410a:	200b      	movs	r0, #11
 800410c:	e7fb      	b.n	8004106 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800410e:	2000      	movs	r0, #0
 8004110:	e7f9      	b.n	8004106 <f_mount+0x56>
 8004112:	bf00      	nop
 8004114:	200001f8 	.word	0x200001f8
 8004118:	200001fc 	.word	0x200001fc

0800411c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800411c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004120:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004124:	4690      	mov	r8, r2
 8004126:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004128:	4605      	mov	r5, r0
 800412a:	2800      	cmp	r0, #0
 800412c:	f000 80a6 	beq.w	800427c <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 8004130:	2300      	movs	r3, #0
 8004132:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004136:	f002 021e 	and.w	r2, r2, #30
 800413a:	a901      	add	r1, sp, #4
 800413c:	a886      	add	r0, sp, #536	; 0x218
 800413e:	f7ff fae9 	bl	8003714 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004142:	4606      	mov	r6, r0
 8004144:	2800      	cmp	r0, #0
 8004146:	f040 8094 	bne.w	8004272 <f_open+0x156>
		INIT_BUF(dj);
 800414a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800414c:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800414e:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8004150:	a806      	add	r0, sp, #24
 8004152:	f7ff fe3f 	bl	8003dd4 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004156:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800415a:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800415c:	b948      	cbnz	r0, 8004172 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800415e:	2c00      	cmp	r4, #0
 8004160:	d05b      	beq.n	800421a <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004162:	f017 0f1e 	tst.w	r7, #30
 8004166:	bf14      	ite	ne
 8004168:	2101      	movne	r1, #1
 800416a:	2100      	moveq	r1, #0
 800416c:	a806      	add	r0, sp, #24
 800416e:	f7ff f8e9 	bl	8003344 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004172:	f018 0f1c 	tst.w	r8, #28
 8004176:	d05b      	beq.n	8004230 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8004178:	2800      	cmp	r0, #0
 800417a:	d050      	beq.n	800421e <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800417c:	2804      	cmp	r0, #4
 800417e:	d14a      	bne.n	8004216 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004180:	4b51      	ldr	r3, [pc, #324]	; (80042c8 <f_open+0x1ac>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	b11a      	cbz	r2, 800418e <f_open+0x72>
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 809b 	bne.w	80042c4 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800418e:	a806      	add	r0, sp, #24
 8004190:	f7ff ff20 	bl	8003fd4 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004194:	2800      	cmp	r0, #0
 8004196:	d13e      	bne.n	8004216 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8004198:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800419a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800419e:	073b      	lsls	r3, r7, #28
 80041a0:	d550      	bpl.n	8004244 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 80041a2:	f000 fd31 	bl	8004c08 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041a6:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80041aa:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041ae:	73a0      	strb	r0, [r4, #14]
 80041b0:	73e3      	strb	r3, [r4, #15]
 80041b2:	0c03      	lsrs	r3, r0, #16
 80041b4:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80041b6:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80041ba:	f884 801c 	strb.w	r8, [r4, #28]
 80041be:	f884 801d 	strb.w	r8, [r4, #29]
 80041c2:	f884 801e 	strb.w	r8, [r4, #30]
 80041c6:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041ca:	7423      	strb	r3, [r4, #16]
 80041cc:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80041ce:	9b86      	ldr	r3, [sp, #536]	; 0x218
 80041d0:	4621      	mov	r1, r4
 80041d2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80041d6:	f7ff f9b8 	bl	800354a <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 80041da:	f884 801a 	strb.w	r8, [r4, #26]
 80041de:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80041e2:	f884 8014 	strb.w	r8, [r4, #20]
 80041e6:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 80041ea:	9b86      	ldr	r3, [sp, #536]	; 0x218
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80041f2:	4680      	mov	r8, r0
 80041f4:	b330      	cbz	r0, 8004244 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 80041f6:	4601      	mov	r1, r0
 80041f8:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 80041fa:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 80041fe:	f7ff ff24 	bl	800404a <remove_chain>
					if (res == FR_OK) {
 8004202:	b940      	cbnz	r0, 8004216 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004204:	9886      	ldr	r0, [sp, #536]	; 0x218
 8004206:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800420a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800420e:	4649      	mov	r1, r9
 8004210:	f7ff fa36 	bl	8003680 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8004214:	b1b0      	cbz	r0, 8004244 <f_open+0x128>
					res = FR_DENIED;
 8004216:	4606      	mov	r6, r0
 8004218:	e02b      	b.n	8004272 <f_open+0x156>
				res = FR_INVALID_NAME;
 800421a:	2006      	movs	r0, #6
 800421c:	e7a9      	b.n	8004172 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800421e:	7ae3      	ldrb	r3, [r4, #11]
 8004220:	f013 0f11 	tst.w	r3, #17
 8004224:	d12e      	bne.n	8004284 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004226:	f018 0f04 	tst.w	r8, #4
 800422a:	d0b8      	beq.n	800419e <f_open+0x82>
						res = FR_EXIST;
 800422c:	2608      	movs	r6, #8
 800422e:	e020      	b.n	8004272 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 8004230:	2800      	cmp	r0, #0
 8004232:	d1f0      	bne.n	8004216 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004234:	7ae3      	ldrb	r3, [r4, #11]
 8004236:	06d8      	lsls	r0, r3, #27
 8004238:	d422      	bmi.n	8004280 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800423a:	f018 0f02 	tst.w	r8, #2
 800423e:	d001      	beq.n	8004244 <f_open+0x128>
 8004240:	07da      	lsls	r2, r3, #31
 8004242:	d41f      	bmi.n	8004284 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004244:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004246:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8004248:	bf48      	it	mi
 800424a:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800424e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004252:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004256:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800425a:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800425e:	bf14      	ite	ne
 8004260:	2101      	movne	r1, #1
 8004262:	2100      	moveq	r1, #0
 8004264:	a806      	add	r0, sp, #24
 8004266:	f7ff f89f 	bl	80033a8 <inc_lock>
 800426a:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800426e:	b958      	cbnz	r0, 8004288 <f_open+0x16c>
 8004270:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8004272:	4630      	mov	r0, r6
 8004274:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8004278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800427c:	2609      	movs	r6, #9
 800427e:	e7f8      	b.n	8004272 <f_open+0x156>
					res = FR_NO_FILE;
 8004280:	2604      	movs	r6, #4
 8004282:	e7f6      	b.n	8004272 <f_open+0x156>
					res = FR_DENIED;
 8004284:	2607      	movs	r6, #7
 8004286:	e7f4      	b.n	8004272 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8004288:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800428c:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8004290:	2700      	movs	r7, #0
 8004292:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004296:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 800429a:	4621      	mov	r1, r4
 800429c:	f7ff f955 	bl	800354a <ld_clust.isra.0>
 80042a0:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80042a4:	69e3      	ldr	r3, [r4, #28]
 80042a6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 80042aa:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 80042ae:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 80042b2:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 80042b6:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 80042ba:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 80042be:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 80042c2:	e7d6      	b.n	8004272 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80042c4:	2012      	movs	r0, #18
 80042c6:	e7a6      	b.n	8004216 <f_open+0xfa>
 80042c8:	200001fc 	.word	0x200001fc

080042cc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80042cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8cb 3000 	str.w	r3, [fp]
{
 80042d8:	4604      	mov	r4, r0
 80042da:	4689      	mov	r9, r1
 80042dc:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 80042de:	f7ff f91d 	bl	800351c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80042e2:	4606      	mov	r6, r0
 80042e4:	bb60      	cbnz	r0, 8004340 <f_read+0x74>
	if (fp->err)								/* Check error */
 80042e6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 80ae 	bne.w	800444c <f_read+0x180>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80042f0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80042f4:	07d8      	lsls	r0, r3, #31
 80042f6:	f140 80ab 	bpl.w	8004450 <f_read+0x184>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 80042fa:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80042fe:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8004302:	1bdf      	subs	r7, r3, r7
 8004304:	42af      	cmp	r7, r5
 8004306:	bf28      	it	cs
 8004308:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800430a:	b1cf      	cbz	r7, 8004340 <f_read+0x74>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800430c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8004310:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 808a 	bne.w	800442e <f_read+0x162>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800431a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800431e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8004322:	3b01      	subs	r3, #1
 8004324:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8004328:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	d11d      	bne.n	800436c <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004330:	b951      	cbnz	r1, 8004348 <f_read+0x7c>
					clst = fp->sclust;			/* Follow from the origin */
 8004332:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004336:	2801      	cmp	r0, #1
 8004338:	d812      	bhi.n	8004360 <f_read+0x94>
 800433a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800433c:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8004340:	4630      	mov	r0, r6
 8004342:	b003      	add	sp, #12
 8004344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8004348:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800434c:	b11b      	cbz	r3, 8004356 <f_read+0x8a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff f88a 	bl	8003468 <clmt_clust>
 8004354:	e7ef      	b.n	8004336 <f_read+0x6a>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004356:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800435a:	f7ff fb29 	bl	80039b0 <get_fat>
 800435e:	e7ea      	b.n	8004336 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004360:	1c41      	adds	r1, r0, #1
 8004362:	d101      	bne.n	8004368 <f_read+0x9c>
 8004364:	2601      	movs	r6, #1
 8004366:	e7e9      	b.n	800433c <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 8004368:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800436c:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8004370:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8004374:	4650      	mov	r0, sl
 8004376:	f7ff fb0d 	bl	8003994 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800437a:	2800      	cmp	r0, #0
 800437c:	d0dd      	beq.n	800433a <f_read+0x6e>
			sect += csect;
 800437e:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004380:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8004382:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004386:	d02f      	beq.n	80043e8 <f_read+0x11c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004388:	9a01      	ldr	r2, [sp, #4]
 800438a:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800438e:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004392:	442a      	add	r2, r5
 8004394:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8004396:	bf84      	itt	hi
 8004398:	9a01      	ldrhi	r2, [sp, #4]
 800439a:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800439c:	462b      	mov	r3, r5
 800439e:	4642      	mov	r2, r8
 80043a0:	4649      	mov	r1, r9
 80043a2:	f7fe ff93 	bl	80032cc <disk_read>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d1dc      	bne.n	8004364 <f_read+0x98>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80043aa:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80043ae:	065a      	lsls	r2, r3, #25
 80043b0:	d50c      	bpl.n	80043cc <f_read+0x100>
 80043b2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80043b6:	eba0 0008 	sub.w	r0, r0, r8
 80043ba:	4285      	cmp	r5, r0
 80043bc:	d906      	bls.n	80043cc <f_read+0x100>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80043be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c2:	4621      	mov	r1, r4
 80043c4:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80043c8:	f7fe ffaa 	bl	8003320 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80043cc:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80043ce:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80043d2:	442b      	add	r3, r5
 80043d4:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80043d8:	f8db 3000 	ldr.w	r3, [fp]
 80043dc:	442b      	add	r3, r5
 80043de:	44a9      	add	r9, r5
 80043e0:	f8cb 3000 	str.w	r3, [fp]
 80043e4:	1b7f      	subs	r7, r7, r5
 80043e6:	e790      	b.n	800430a <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80043e8:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80043ec:	4590      	cmp	r8, r2
 80043ee:	d01c      	beq.n	800442a <f_read+0x15e>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80043f0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80043f4:	065b      	lsls	r3, r3, #25
 80043f6:	d50d      	bpl.n	8004414 <f_read+0x148>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80043f8:	2301      	movs	r3, #1
 80043fa:	4621      	mov	r1, r4
 80043fc:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8004400:	f7fe ff72 	bl	80032e8 <disk_write>
 8004404:	2800      	cmp	r0, #0
 8004406:	d1ad      	bne.n	8004364 <f_read+0x98>
					fp->flag &= ~FA__DIRTY;
 8004408:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800440c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004410:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004414:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004418:	2301      	movs	r3, #1
 800441a:	4642      	mov	r2, r8
 800441c:	4621      	mov	r1, r4
 800441e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004422:	f7fe ff53 	bl	80032cc <disk_read>
 8004426:	2800      	cmp	r0, #0
 8004428:	d19c      	bne.n	8004364 <f_read+0x98>
			fp->dsect = sect;
 800442a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800442e:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8004432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004436:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 800443a:	42bd      	cmp	r5, r7
 800443c:	bf28      	it	cs
 800443e:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004440:	462a      	mov	r2, r5
 8004442:	4421      	add	r1, r4
 8004444:	4648      	mov	r0, r9
 8004446:	f7fe ff6b 	bl	8003320 <mem_cpy>
 800444a:	e7c0      	b.n	80043ce <f_read+0x102>
 800444c:	461e      	mov	r6, r3
 800444e:	e777      	b.n	8004340 <f_read+0x74>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004450:	2607      	movs	r6, #7
 8004452:	e775      	b.n	8004340 <f_read+0x74>

08004454 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800445a:	2300      	movs	r3, #0
 800445c:	f8cb 3000 	str.w	r3, [fp]
{
 8004460:	4604      	mov	r4, r0
 8004462:	4689      	mov	r9, r1
 8004464:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8004466:	f7ff f859 	bl	800351c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800446a:	4606      	mov	r6, r0
 800446c:	bb50      	cbnz	r0, 80044c4 <f_write+0x70>
	if (fp->err)							/* Check error */
 800446e:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8004472:	2b00      	cmp	r3, #0
 8004474:	f040 80d9 	bne.w	800462a <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004478:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800447c:	0799      	lsls	r1, r3, #30
 800447e:	f140 80d6 	bpl.w	800462e <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004482:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8004486:	42df      	cmn	r7, r3
 8004488:	f0c0 8083 	bcc.w	8004592 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800448c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8004490:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8004494:	4293      	cmp	r3, r2
 8004496:	f200 80c5 	bhi.w	8004624 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800449a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800449e:	f043 0320 	orr.w	r3, r3, #32
 80044a2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80044a6:	e00d      	b.n	80044c4 <f_write+0x70>
					if (fp->cltbl)
 80044a8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80044ac:	b173      	cbz	r3, 80044cc <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7fe ffda 	bl	8003468 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80044b4:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d0e8      	beq.n	800448c <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80044ba:	2901      	cmp	r1, #1
 80044bc:	d109      	bne.n	80044d2 <f_write+0x7e>
 80044be:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80044c0:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 80044c4:	4630      	mov	r0, r6
 80044c6:	b003      	add	sp, #12
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80044cc:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80044d0:	e07a      	b.n	80045c8 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80044d2:	1c4a      	adds	r2, r1, #1
 80044d4:	d101      	bne.n	80044da <f_write+0x86>
 80044d6:	2601      	movs	r6, #1
 80044d8:	e7f2      	b.n	80044c0 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80044da:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 80044de:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80044e2:	b90b      	cbnz	r3, 80044e8 <f_write+0x94>
 80044e4:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80044e8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80044ec:	065b      	lsls	r3, r3, #25
 80044ee:	d511      	bpl.n	8004514 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80044f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80044f4:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80044f8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80044fc:	2301      	movs	r3, #1
 80044fe:	4621      	mov	r1, r4
 8004500:	f7fe fef2 	bl	80032e8 <disk_write>
 8004504:	2800      	cmp	r0, #0
 8004506:	d1e6      	bne.n	80044d6 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8004508:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004514:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8004518:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800451c:	4650      	mov	r0, sl
 800451e:	f7ff fa39 	bl	8003994 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004522:	2800      	cmp	r0, #0
 8004524:	d0cb      	beq.n	80044be <f_write+0x6a>
			sect += csect;
 8004526:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004528:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800452a:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800452e:	d04e      	beq.n	80045ce <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004530:	9a01      	ldr	r2, [sp, #4]
 8004532:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8004536:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800453a:	442a      	add	r2, r5
 800453c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800453e:	bf84      	itt	hi
 8004540:	9a01      	ldrhi	r2, [sp, #4]
 8004542:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8004544:	462b      	mov	r3, r5
 8004546:	4642      	mov	r2, r8
 8004548:	4649      	mov	r1, r9
 800454a:	f7fe fecd 	bl	80032e8 <disk_write>
 800454e:	2800      	cmp	r0, #0
 8004550:	d1c1      	bne.n	80044d6 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004552:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8004556:	eba1 0108 	sub.w	r1, r1, r8
 800455a:	428d      	cmp	r5, r1
 800455c:	d90c      	bls.n	8004578 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800455e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004562:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004566:	4620      	mov	r0, r4
 8004568:	f7fe feda 	bl	8003320 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800456c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004574:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8004578:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800457a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800457e:	442b      	add	r3, r5
 8004580:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8004584:	f8db 3000 	ldr.w	r3, [fp]
 8004588:	442b      	add	r3, r5
 800458a:	44a9      	add	r9, r5
 800458c:	f8cb 3000 	str.w	r3, [fp]
 8004590:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8004592:	2f00      	cmp	r7, #0
 8004594:	f43f af7a 	beq.w	800448c <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004598:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800459c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80045a0:	bb5b      	cbnz	r3, 80045fa <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80045a2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80045a6:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80045aa:	3b01      	subs	r3, #1
 80045ac:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80045b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	d197      	bne.n	80044e8 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80045b8:	2900      	cmp	r1, #0
 80045ba:	f47f af75 	bne.w	80044a8 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 80045be:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 80045c2:	2900      	cmp	r1, #0
 80045c4:	f47f af79 	bne.w	80044ba <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80045c8:	f7ff fb1c 	bl	8003c04 <create_chain>
 80045cc:	e772      	b.n	80044b4 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80045ce:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80045d2:	4598      	cmp	r8, r3
 80045d4:	d00f      	beq.n	80045f6 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 80045d6:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 80045da:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80045de:	429a      	cmp	r2, r3
 80045e0:	d209      	bcs.n	80045f6 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80045e2:	2301      	movs	r3, #1
 80045e4:	4642      	mov	r2, r8
 80045e6:	4621      	mov	r1, r4
 80045e8:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 80045ec:	f7fe fe6e 	bl	80032cc <disk_read>
				if (fp->fptr < fp->fsize &&
 80045f0:	2800      	cmp	r0, #0
 80045f2:	f47f af70 	bne.w	80044d6 <f_write+0x82>
			fp->dsect = sect;
 80045f6:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80045fa:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 80045fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8004602:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004606:	42bd      	cmp	r5, r7
 8004608:	bf28      	it	cs
 800460a:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800460c:	462a      	mov	r2, r5
 800460e:	4649      	mov	r1, r9
 8004610:	4420      	add	r0, r4
 8004612:	f7fe fe85 	bl	8003320 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004616:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8004622:	e7aa      	b.n	800457a <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004624:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8004628:	e737      	b.n	800449a <f_write+0x46>
 800462a:	461e      	mov	r6, r3
 800462c:	e74a      	b.n	80044c4 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800462e:	2607      	movs	r6, #7
 8004630:	e748      	b.n	80044c4 <f_write+0x70>

08004632 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004636:	f7fe ff71 	bl	800351c <validate>
	if (res == FR_OK) {
 800463a:	2800      	cmp	r0, #0
 800463c:	d158      	bne.n	80046f0 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800463e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004642:	069a      	lsls	r2, r3, #26
 8004644:	d554      	bpl.n	80046f0 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8004646:	065b      	lsls	r3, r3, #25
 8004648:	d511      	bpl.n	800466e <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800464a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800464e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004652:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004656:	2301      	movs	r3, #1
 8004658:	4621      	mov	r1, r4
 800465a:	f7fe fe45 	bl	80032e8 <disk_write>
 800465e:	2800      	cmp	r0, #0
 8004660:	d145      	bne.n	80046ee <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8004662:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800466e:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8004672:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004676:	f7ff f803 	bl	8003680 <move_window>
 800467a:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800467c:	bbc0      	cbnz	r0, 80046f0 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800467e:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004682:	7aeb      	ldrb	r3, [r5, #11]
 8004684:	f043 0320 	orr.w	r3, r3, #32
 8004688:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800468a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800468e:	772b      	strb	r3, [r5, #28]
 8004690:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	776b      	strb	r3, [r5, #29]
 8004698:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800469c:	77ab      	strb	r3, [r5, #30]
 800469e:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80046a2:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80046a4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 80046a8:	76ab      	strb	r3, [r5, #26]
 80046aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	752b      	strb	r3, [r5, #20]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80046b6:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 80046b8:	f000 faa6 	bl	8004c08 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 80046bc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80046c0:	75a8      	strb	r0, [r5, #22]
 80046c2:	75eb      	strb	r3, [r5, #23]
 80046c4:	0c03      	lsrs	r3, r0, #16
 80046c6:	0e00      	lsrs	r0, r0, #24
 80046c8:	762b      	strb	r3, [r5, #24]
 80046ca:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80046cc:	74ae      	strb	r6, [r5, #18]
 80046ce:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80046d0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80046d4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80046d8:	f023 0320 	bic.w	r3, r3, #32
 80046dc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80046e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80046ea:	f7fe bf6c 	b.w	80035c6 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80046ee:	2001      	movs	r0, #1
}
 80046f0:	bd70      	pop	{r4, r5, r6, pc}

080046f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80046f2:	b510      	push	{r4, lr}
 80046f4:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80046f6:	f7ff ff9c 	bl	8004632 <f_sync>
	if (res == FR_OK)
 80046fa:	b950      	cbnz	r0, 8004712 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7fe ff0d 	bl	800351c <validate>
		if (res == FR_OK) {
 8004702:	b930      	cbnz	r0, 8004712 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8004704:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8004708:	f7fe fe92 	bl	8003430 <dec_lock>
			if (res == FR_OK)
 800470c:	b908      	cbnz	r0, 8004712 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800470e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8004712:	bd10      	pop	{r4, pc}

08004714 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8004714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800471c:	f7fe fefe 	bl	800351c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004720:	4606      	mov	r6, r0
 8004722:	bb10      	cbnz	r0, 800476a <f_lseek+0x56>
	if (fp->err)						/* Check error */
 8004724:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 813e 	bne.w	80049aa <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800472e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8087 	beq.w	8004846 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004738:	1c6a      	adds	r2, r5, #1
 800473a:	d13d      	bne.n	80047b8 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800473c:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004740:	f8d3 b000 	ldr.w	fp, [r3]
 8004744:	f103 0a04 	add.w	sl, r3, #4
 8004748:	2502      	movs	r5, #2
			if (cl) {
 800474a:	b35f      	cbz	r7, 80047a4 <f_lseek+0x90>
 800474c:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800474e:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 8004752:	4641      	mov	r1, r8
 8004754:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004758:	f7ff f92a 	bl	80039b0 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800475c:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800475e:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004762:	d807      	bhi.n	8004774 <f_lseek+0x60>
 8004764:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004766:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800476a:	4630      	mov	r0, r6
 800476c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	4607      	mov	r7, r0
 8004772:	e7eb      	b.n	800474c <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d101      	bne.n	800477c <f_lseek+0x68>
 8004778:	2601      	movs	r6, #1
 800477a:	e7f4      	b.n	8004766 <f_lseek+0x52>
					} while (cl == pcl + 1);
 800477c:	f108 0301 	add.w	r3, r8, #1
 8004780:	4298      	cmp	r0, r3
 8004782:	4680      	mov	r8, r0
 8004784:	d0e5      	beq.n	8004752 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004786:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004788:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800478a:	bf21      	itttt	cs
 800478c:	4653      	movcs	r3, sl
 800478e:	f843 9b08 	strcs.w	r9, [r3], #8
 8004792:	f8ca 7004 	strcs.w	r7, [sl, #4]
 8004796:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8004798:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800479c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80047a0:	4298      	cmp	r0, r3
 80047a2:	d3e5      	bcc.n	8004770 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 80047a4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 80047a8:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 80047aa:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 80047ac:	f200 80ff 	bhi.w	80049ae <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8ca 3000 	str.w	r3, [sl]
 80047b6:	e7d8      	b.n	800476a <f_lseek+0x56>
 80047b8:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 80047bc:	4285      	cmp	r5, r0
 80047be:	bf28      	it	cs
 80047c0:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 80047c2:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	d0cf      	beq.n	800476a <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 80047ca:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80047ce:	4641      	mov	r1, r8
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7fe fe49 	bl	8003468 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 80047d6:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 80047da:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 80047de:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 80047e0:	4638      	mov	r0, r7
 80047e2:	f7ff f8d7 	bl	8003994 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d0bc      	beq.n	8004764 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80047ea:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	d0bb      	beq.n	800476a <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80047f2:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80047f6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80047fa:	3d01      	subs	r5, #1
 80047fc:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8004800:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004802:	4295      	cmp	r5, r2
 8004804:	d0b1      	beq.n	800476a <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004806:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800480a:	0659      	lsls	r1, r3, #25
 800480c:	d50d      	bpl.n	800482a <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800480e:	2301      	movs	r3, #1
 8004810:	4621      	mov	r1, r4
 8004812:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8004816:	f7fe fd67 	bl	80032e8 <disk_write>
 800481a:	2800      	cmp	r0, #0
 800481c:	d1ac      	bne.n	8004778 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800481e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800482a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800482e:	2301      	movs	r3, #1
 8004830:	462a      	mov	r2, r5
 8004832:	4621      	mov	r1, r4
 8004834:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004838:	f7fe fd48 	bl	80032cc <disk_read>
 800483c:	2800      	cmp	r0, #0
 800483e:	d19b      	bne.n	8004778 <f_lseek+0x64>
					fp->dsect = dsc;
 8004840:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8004844:	e791      	b.n	800476a <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8004846:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800484a:	429d      	cmp	r5, r3
 800484c:	d905      	bls.n	800485a <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800484e:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8004852:	f012 0f02 	tst.w	r2, #2
 8004856:	bf08      	it	eq
 8004858:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800485a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800485c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8004860:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8004864:	2d00      	cmp	r5, #0
 8004866:	d13e      	bne.n	80048e6 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8004868:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800486c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8004870:	4293      	cmp	r3, r2
 8004872:	f67f af7a 	bls.w	800476a <f_lseek+0x56>
			fp->fsize = fp->fptr;
 8004876:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800487a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8004886:	e770      	b.n	800476a <f_lseek+0x56>
		fp->fptr = nsect = 0;
 8004888:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800488a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0e8      	beq.n	8004868 <f_lseek+0x154>
 8004896:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800489a:	4295      	cmp	r5, r2
 800489c:	d0e4      	beq.n	8004868 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800489e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80048a2:	065b      	lsls	r3, r3, #25
 80048a4:	d510      	bpl.n	80048c8 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80048a6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80048aa:	2301      	movs	r3, #1
 80048ac:	4621      	mov	r1, r4
 80048ae:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80048b2:	f7fe fd19 	bl	80032e8 <disk_write>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f47f af5e 	bne.w	8004778 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 80048bc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80048c8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80048cc:	2301      	movs	r3, #1
 80048ce:	462a      	mov	r2, r5
 80048d0:	4621      	mov	r1, r4
 80048d2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80048d6:	f7fe fcf9 	bl	80032cc <disk_read>
 80048da:	2800      	cmp	r0, #0
 80048dc:	f47f af4c 	bne.w	8004778 <f_lseek+0x64>
			fp->dsect = nsect;
 80048e0:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80048e4:	e7c0      	b.n	8004868 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80048e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80048ea:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80048ee:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80048f0:	b32b      	cbz	r3, 800493e <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80048f2:	3b01      	subs	r3, #1
 80048f4:	1e6a      	subs	r2, r5, #1
 80048f6:	fbb3 f1f7 	udiv	r1, r3, r7
 80048fa:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80048fe:	428a      	cmp	r2, r1
 8004900:	d31d      	bcc.n	800493e <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8004902:	427a      	negs	r2, r7
 8004904:	4013      	ands	r3, r2
				clst = fp->clust;
 8004906:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800490a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800490e:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8004910:	2900      	cmp	r1, #0
 8004912:	d0b9      	beq.n	8004888 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 8004914:	42bd      	cmp	r5, r7
 8004916:	d823      	bhi.n	8004960 <f_lseek+0x24c>
				fp->fptr += ofs;
 8004918:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800491c:	442b      	add	r3, r5
 800491e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8004922:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0ae      	beq.n	8004888 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800492a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800492e:	f7ff f831 	bl	8003994 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8004932:	2800      	cmp	r0, #0
 8004934:	f43f af16 	beq.w	8004764 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8004938:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800493c:	e7a5      	b.n	800488a <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800493e:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004942:	b951      	cbnz	r1, 800495a <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 8004944:	f7ff f95e 	bl	8003c04 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004948:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800494a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800494c:	f43f af0a 	beq.w	8004764 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004950:	1c42      	adds	r2, r0, #1
 8004952:	f43f af11 	beq.w	8004778 <f_lseek+0x64>
					fp->sclust = clst;
 8004956:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800495a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800495e:	e7d7      	b.n	8004910 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004960:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8004964:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004968:	079b      	lsls	r3, r3, #30
 800496a:	d505      	bpl.n	8004978 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800496c:	f7ff f94a 	bl	8003c04 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8004970:	4601      	mov	r1, r0
 8004972:	b920      	cbnz	r0, 800497e <f_lseek+0x26a>
 8004974:	463d      	mov	r5, r7
 8004976:	e7cf      	b.n	8004918 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8004978:	f7ff f81a 	bl	80039b0 <get_fat>
 800497c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800497e:	1c4a      	adds	r2, r1, #1
 8004980:	f43f aefa 	beq.w	8004778 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8004984:	2901      	cmp	r1, #1
 8004986:	f67f aeed 	bls.w	8004764 <f_lseek+0x50>
 800498a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800498e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004992:	4299      	cmp	r1, r3
 8004994:	f4bf aee6 	bcs.w	8004764 <f_lseek+0x50>
					fp->fptr += bcs;
 8004998:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800499c:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 80049a0:	443b      	add	r3, r7
 80049a2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 80049a6:	1bed      	subs	r5, r5, r7
 80049a8:	e7b4      	b.n	8004914 <f_lseek+0x200>
 80049aa:	461e      	mov	r6, r3
 80049ac:	e6dd      	b.n	800476a <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80049ae:	2611      	movs	r6, #17
 80049b0:	e6db      	b.n	800476a <f_lseek+0x56>

080049b2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80049b2:	b530      	push	{r4, r5, lr}
 80049b4:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 80049b6:	4605      	mov	r5, r0
{
 80049b8:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d045      	beq.n	8004a4a <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	a901      	add	r1, sp, #4
 80049c2:	a802      	add	r0, sp, #8
 80049c4:	f7fe fea6 	bl	8003714 <find_volume>
	if (res == FR_OK) {
 80049c8:	4604      	mov	r4, r0
 80049ca:	bb30      	cbnz	r0, 8004a1a <f_opendir+0x68>
		dp->fs = fs;
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 80049d2:	ab03      	add	r3, sp, #12
 80049d4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80049d8:	9901      	ldr	r1, [sp, #4]
 80049da:	4628      	mov	r0, r5
 80049dc:	f7ff f9fa 	bl	8003dd4 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80049e0:	4604      	mov	r4, r0
 80049e2:	b9b8      	cbnz	r0, 8004a14 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 80049e4:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 80049e8:	b149      	cbz	r1, 80049fe <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80049ea:	7acb      	ldrb	r3, [r1, #11]
 80049ec:	06db      	lsls	r3, r3, #27
 80049ee:	d528      	bpl.n	8004a42 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 80049f0:	9b02      	ldr	r3, [sp, #8]
 80049f2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80049f6:	f7fe fda8 	bl	800354a <ld_clust.isra.0>
 80049fa:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 80049fe:	9b02      	ldr	r3, [sp, #8]
 8004a00:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8004a04:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f7ff f831 	bl	8003a72 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 8004a10:	4604      	mov	r4, r0
 8004a12:	b130      	cbz	r0, 8004a22 <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8004a14:	2c04      	cmp	r4, #4
 8004a16:	bf08      	it	eq
 8004a18:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 8004a20:	e009      	b.n	8004a36 <f_opendir+0x84>
					if (dp->sclust) {
 8004a22:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 8004a26:	b14b      	cbz	r3, 8004a3c <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7fe fcbc 	bl	80033a8 <inc_lock>
 8004a30:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 8004a34:	b138      	cbz	r0, 8004a46 <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 8004a36:	4620      	mov	r0, r4
 8004a38:	b007      	add	sp, #28
 8004a3a:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 8004a3c:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 8004a40:	e7f9      	b.n	8004a36 <f_opendir+0x84>
					res = FR_NO_PATH;
 8004a42:	2405      	movs	r4, #5
 8004a44:	e7e9      	b.n	8004a1a <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 8004a46:	2412      	movs	r4, #18
 8004a48:	e7e7      	b.n	8004a1a <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 8004a4a:	2409      	movs	r4, #9
 8004a4c:	e7f3      	b.n	8004a36 <f_opendir+0x84>

08004a4e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8004a4e:	b538      	push	{r3, r4, r5, lr}
 8004a50:	4605      	mov	r5, r0
	FRESULT res;


	res = validate(dp);
 8004a52:	f7fe fd63 	bl	800351c <validate>
	if (res == FR_OK) {
 8004a56:	4604      	mov	r4, r0
 8004a58:	b928      	cbnz	r0, 8004a66 <f_closedir+0x18>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 8004a5a:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
 8004a5e:	b920      	cbnz	r0, 8004a6a <f_closedir+0x1c>
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8004a66:	4620      	mov	r0, r4
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
			res = dec_lock(dp->lockid);
 8004a6a:	f7fe fce1 	bl	8003430 <dec_lock>
		if (res == FR_OK)
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0f6      	beq.n	8004a60 <f_closedir+0x12>
 8004a72:	4604      	mov	r4, r0
 8004a74:	e7f7      	b.n	8004a66 <f_closedir+0x18>

08004a76 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8004a76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8004a7c:	f7fe fd4e 	bl	800351c <validate>
	if (res == FR_OK) {
 8004a80:	4604      	mov	r4, r0
 8004a82:	b9e8      	cbnz	r0, 8004ac0 <f_readdir+0x4a>
		if (!fno) {
 8004a84:	b92e      	cbnz	r6, 8004a92 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8004a86:	4601      	mov	r1, r0
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7fe fff2 	bl	8003a72 <dir_sdi>
 8004a8e:	4604      	mov	r4, r0
 8004a90:	e016      	b.n	8004ac0 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 8004a92:	ab01      	add	r3, sp, #4
 8004a94:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7ff fa6f 	bl	8003f7c <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8004a9e:	2804      	cmp	r0, #4
 8004aa0:	d111      	bne.n	8004ac6 <f_readdir+0x50>
				dp->sect = 0;
 8004aa2:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 8004aa6:	4631      	mov	r1, r6
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f7fe fcf1 	bl	8003490 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7ff f900 	bl	8003cb6 <dir_next>
				if (res == FR_NO_FILE) {
 8004ab6:	2804      	cmp	r0, #4
 8004ab8:	d1e9      	bne.n	8004a8e <f_readdir+0x18>
					dp->sect = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	b004      	add	sp, #16
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d1e1      	bne.n	8004a8e <f_readdir+0x18>
 8004aca:	e7ec      	b.n	8004aa6 <f_readdir+0x30>

08004acc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8004acc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	ab02      	add	r3, sp, #8
 8004ad2:	4614      	mov	r4, r2
 8004ad4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004ad8:	4688      	mov	r8, r1
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	4619      	mov	r1, r3
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f7fe fe18 	bl	8003714 <find_volume>
	fs = *fatfs;
	if (res == FR_OK) {
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	b948      	cbnz	r0, 8004afc <f_getfree+0x30>
	fs = *fatfs;
 8004ae8:	6824      	ldr	r4, [r4, #0]
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8004aea:	f8d4 7214 	ldr.w	r7, [r4, #532]	; 0x214
 8004aee:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8004af2:	1eba      	subs	r2, r7, #2
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d805      	bhi.n	8004b04 <f_getfree+0x38>
			*nclst = fs->free_clust;
 8004af8:	f8c8 3000 	str.w	r3, [r8]
			fs->fsi_flag |= 1;
			*nclst = n;
		}
	}
	LEAVE_FF(fs, res);
}
 8004afc:	4628      	mov	r0, r5
 8004afe:	b002      	add	sp, #8
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fat = fs->fs_type;
 8004b04:	f894 9200 	ldrb.w	r9, [r4, #512]	; 0x200
			if (fat == FS_FAT12) {
 8004b08:	f1b9 0f01 	cmp.w	r9, #1
 8004b0c:	d11b      	bne.n	8004b46 <f_getfree+0x7a>
 8004b0e:	2702      	movs	r7, #2
 8004b10:	4606      	mov	r6, r0
					stat = get_fat(fs, clst);
 8004b12:	4639      	mov	r1, r7
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7fe ff4b 	bl	80039b0 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004b1a:	1c43      	adds	r3, r0, #1
 8004b1c:	d03a      	beq.n	8004b94 <f_getfree+0xc8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004b1e:	2801      	cmp	r0, #1
 8004b20:	d03a      	beq.n	8004b98 <f_getfree+0xcc>
					if (stat == 0) n++;
 8004b22:	b900      	cbnz	r0, 8004b26 <f_getfree+0x5a>
 8004b24:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 8004b26:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004b2a:	3701      	adds	r7, #1
 8004b2c:	429f      	cmp	r7, r3
 8004b2e:	d3f0      	bcc.n	8004b12 <f_getfree+0x46>
			fs->fsi_flag |= 1;
 8004b30:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
			fs->free_clust = n;
 8004b34:	f8c4 6210 	str.w	r6, [r4, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
			*nclst = n;
 8004b40:	f8c8 6000 	str.w	r6, [r8]
 8004b44:	e7da      	b.n	8004afc <f_getfree+0x30>
				sect = fs->fatbase;
 8004b46:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
				i = 0; p = 0;
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4602      	mov	r2, r0
			n = 0;
 8004b4e:	4606      	mov	r6, r0
					if (!i) {
 8004b50:	b94a      	cbnz	r2, 8004b66 <f_getfree+0x9a>
						res = move_window(fs, sect++);
 8004b52:	4620      	mov	r0, r4
 8004b54:	f101 0a01 	add.w	sl, r1, #1
 8004b58:	f7fe fd92 	bl	8003680 <move_window>
						if (res != FR_OK) break;
 8004b5c:	b9f0      	cbnz	r0, 8004b9c <f_getfree+0xd0>
						p = fs->win.d8;
 8004b5e:	4623      	mov	r3, r4
						res = move_window(fs, sect++);
 8004b60:	4651      	mov	r1, sl
						i = SS(fs);
 8004b62:	f44f 7200 	mov.w	r2, #512	; 0x200
					if (fat == FS_FAT16) {
 8004b66:	f1b9 0f02 	cmp.w	r9, #2
 8004b6a:	d10b      	bne.n	8004b84 <f_getfree+0xb8>
						if (LD_WORD(p) == 0) n++;
 8004b6c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004b70:	7818      	ldrb	r0, [r3, #0]
 8004b72:	ea50 200e 	orrs.w	r0, r0, lr, lsl #8
 8004b76:	bf08      	it	eq
 8004b78:	3601      	addeq	r6, #1
						p += 2; i -= 2;
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	3a02      	subs	r2, #2
				} while (--clst);
 8004b7e:	3f01      	subs	r7, #1
 8004b80:	d1e6      	bne.n	8004b50 <f_getfree+0x84>
 8004b82:	e7d5      	b.n	8004b30 <f_getfree+0x64>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	f030 4070 	bics.w	r0, r0, #4026531840	; 0xf0000000
 8004b8a:	bf08      	it	eq
 8004b8c:	3601      	addeq	r6, #1
						p += 4; i -= 4;
 8004b8e:	3304      	adds	r3, #4
 8004b90:	3a04      	subs	r2, #4
 8004b92:	e7f4      	b.n	8004b7e <f_getfree+0xb2>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004b94:	2501      	movs	r5, #1
 8004b96:	e7cb      	b.n	8004b30 <f_getfree+0x64>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004b98:	2502      	movs	r5, #2
 8004b9a:	e7c9      	b.n	8004b30 <f_getfree+0x64>
						res = move_window(fs, sect++);
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	e7c7      	b.n	8004b30 <f_getfree+0x64>

08004ba0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004ba0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <FATFS_LinkDriverEx+0x40>)
 8004ba4:	7a5c      	ldrb	r4, [r3, #9]
 8004ba6:	2c01      	cmp	r4, #1
 8004ba8:	d818      	bhi.n	8004bdc <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004baa:	7a5d      	ldrb	r5, [r3, #9]
 8004bac:	b2ed      	uxtb	r5, r5
 8004bae:	2400      	movs	r4, #0
 8004bb0:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8004bb2:	7a5d      	ldrb	r5, [r3, #9]
 8004bb4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004bb8:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8004bba:	7a58      	ldrb	r0, [r3, #9]
 8004bbc:	4418      	add	r0, r3
 8004bbe:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004bc0:	7a5a      	ldrb	r2, [r3, #9]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	1c50      	adds	r0, r2, #1
 8004bc6:	b2c0      	uxtb	r0, r0
 8004bc8:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004bca:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004bcc:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004bce:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004bd0:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004bd2:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004bd4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004bd6:	70cc      	strb	r4, [r1, #3]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004bdc:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	20000218 	.word	0x20000218

08004be4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004be4:	2200      	movs	r2, #0
 8004be6:	f7ff bfdb 	b.w	8004ba0 <FATFS_LinkDriverEx>
	...

08004bec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004bec:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004bee:	4903      	ldr	r1, [pc, #12]	; (8004bfc <MX_FATFS_Init+0x10>)
 8004bf0:	4803      	ldr	r0, [pc, #12]	; (8004c00 <MX_FATFS_Init+0x14>)
 8004bf2:	f7ff fff7 	bl	8004be4 <FATFS_LinkDriver>
 8004bf6:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <MX_FATFS_Init+0x18>)
 8004bf8:	7018      	strb	r0, [r3, #0]
 8004bfa:	bd08      	pop	{r3, pc}
 8004bfc:	20000458 	.word	0x20000458
 8004c00:	20000160 	.word	0x20000160
 8004c04:	2000045c 	.word	0x2000045c

08004c08 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004c08:	2000      	movs	r0, #0
 8004c0a:	4770      	bx	lr

08004c0c <USB_Receive_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_Receive_Callback(uint8_t* Buf)
{
	res = Buf[0];
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <USB_Receive_Callback+0x10>)
 8004c0e:	7802      	ldrb	r2, [r0, #0]
 8004c10:	701a      	strb	r2, [r3, #0]
	flag = 1;
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <USB_Receive_Callback+0x14>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000990 	.word	0x20000990
 8004c20:	20000224 	.word	0x20000224

08004c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c24:	b530      	push	{r4, r5, lr}
 8004c26:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c28:	2228      	movs	r2, #40	; 0x28
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	a805      	add	r0, sp, #20
 8004c2e:	f001 fa09 	bl	8006044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c32:	2214      	movs	r2, #20
 8004c34:	2100      	movs	r1, #0
 8004c36:	4668      	mov	r0, sp
 8004c38:	f001 fa04 	bl	8006044 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c3c:	223c      	movs	r2, #60	; 0x3c
 8004c3e:	2100      	movs	r1, #0
 8004c40:	eb0d 0002 	add.w	r0, sp, r2
 8004c44:	f001 f9fe 	bl	8006044 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c4c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004c52:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c56:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c58:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c5a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004c5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004c60:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004c62:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c64:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c66:	f7fc fbef 	bl	8001448 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c6a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c6e:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c72:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c78:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c7a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c7c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c7e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c80:	f7fc fe8a 	bl	8001998 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <SystemClock_Config+0x74>)
 8004c86:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c88:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c8a:	9411      	str	r4, [sp, #68]	; 0x44
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8004c8c:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c8e:	f7fc ff5d 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004c92:	b01f      	add	sp, #124	; 0x7c
 8004c94:	bd30      	pop	{r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	00020001 	.word	0x00020001

08004c9c <USB_reset>:
 * Если перегенерировали проект в CubeMX В конец функции static void MX_GPIO_Init(void) добавьте USB_reset();
 *
 * */

void USB_reset(void)
{
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	b086      	sub	sp, #24
	// инициализируем пин DP как выход
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca0:	2214      	movs	r2, #20
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	a801      	add	r0, sp, #4
 8004ca6:	f001 f9cd 	bl	8006044 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004caa:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cae:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb0:	a901      	add	r1, sp, #4
 8004cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb6:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004cb8:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cba:	f7fb fbc9 	bl	8000450 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc6:	f7fb fc85 	bl	80005d4 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём

	// переинициализируем пин для работы с USB
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cca:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	a901      	add	r1, sp, #4
 8004cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd2:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd6:	f7fb fbbb 	bl	8000450 <HAL_GPIO_Init>
	for(uint16_t i = 0; i < 2000; i++) {}; // немного ждём
}
 8004cda:	b006      	add	sp, #24
 8004cdc:	bd10      	pop	{r4, pc}
	...

08004ce0 <main>:
{
 8004ce0:	b500      	push	{lr}
 8004ce2:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8004ce4:	f7fb faf0 	bl	80002c8 <HAL_Init>
  SystemClock_Config();
 8004ce8:	f7ff ff9c 	bl	8004c24 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cec:	2214      	movs	r2, #20
 8004cee:	2100      	movs	r1, #0
 8004cf0:	eb0d 0002 	add.w	r0, sp, r2
 8004cf4:	f001 f9a6 	bl	8006044 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cf8:	4b51      	ldr	r3, [pc, #324]	; (8004e40 <main+0x160>)
		  if(res == 'B') entr_bootloader();
 8004cfa:	4e52      	ldr	r6, [pc, #328]	; (8004e44 <main+0x164>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004d02:	615a      	str	r2, [r3, #20]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004d0a:	9201      	str	r2, [sp, #4]
 8004d0c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004d14:	615a      	str	r2, [r3, #20]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004d1c:	9202      	str	r2, [sp, #8]
 8004d1e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d26:	615a      	str	r2, [r3, #20]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004d2e:	9203      	str	r2, [sp, #12]
 8004d30:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d32:	695a      	ldr	r2, [r3, #20]
 8004d34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d38:	615a      	str	r2, [r3, #20]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d40:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2160      	movs	r1, #96	; 0x60
 8004d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d4a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8004d4c:	f7fb fc42 	bl	80005d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2120      	movs	r1, #32
 8004d54:	483c      	ldr	r0, [pc, #240]	; (8004e48 <main+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d56:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8004d58:	f7fb fc3c 	bl	80005d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d5c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = BOOT_PIN_Pin|RESET_PIN_Pin;
 8004d5e:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d60:	a905      	add	r1, sp, #20
 8004d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = BOOT_PIN_Pin|RESET_PIN_Pin;
 8004d66:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d68:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6e:	f7fb fb6f 	bl	8000450 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d72:	2320      	movs	r3, #32
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d74:	a905      	add	r1, sp, #20
 8004d76:	4834      	ldr	r0, [pc, #208]	; (8004e48 <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d78:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d80:	f7fb fb66 	bl	8000450 <HAL_GPIO_Init>
  USB_reset();
 8004d84:	f7ff ff8a 	bl	8004c9c <USB_reset>
  huart1.Instance = USART1;
 8004d88:	4830      	ldr	r0, [pc, #192]	; (8004e4c <main+0x16c>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004d8a:	4931      	ldr	r1, [pc, #196]	; (8004e50 <main+0x170>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d8c:	60c4      	str	r4, [r0, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004d8e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004da0:	230c      	movs	r3, #12
 8004da2:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004da6:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004da8:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004daa:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dac:	f7fd fd04 	bl	80027b8 <HAL_UART_Init>
  MX_USB_DEVICE_Init();
 8004db0:	f000 fed4 	bl	8005b5c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8004db4:	f7ff ff1a 	bl	8004bec <MX_FATFS_Init>
  hspi2.Instance = SPI2;
 8004db8:	4826      	ldr	r0, [pc, #152]	; (8004e54 <main+0x174>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <main+0x178>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004dbc:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004dbe:	f44f 7582 	mov.w	r5, #260	; 0x104
 8004dc2:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dc6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004dca:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd0:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004dda:	2308      	movs	r3, #8
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dde:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004de0:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004de2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004de6:	6304      	str	r4, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004de8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004dea:	f7fd f837 	bl	8001e5c <HAL_SPI_Init>
	  if(flag)
 8004dee:	4d1b      	ldr	r5, [pc, #108]	; (8004e5c <main+0x17c>)
 8004df0:	782b      	ldrb	r3, [r5, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0fc      	beq.n	8004df0 <main+0x110>
		  if(res == 'B') entr_bootloader();
 8004df6:	7833      	ldrb	r3, [r6, #0]
		  flag = 0;
 8004df8:	702c      	strb	r4, [r5, #0]
		  if(res == 'B') entr_bootloader();
 8004dfa:	2b42      	cmp	r3, #66	; 0x42
 8004dfc:	d102      	bne.n	8004e04 <main+0x124>
 8004dfe:	f000 fce7 	bl	80057d0 <entr_bootloader>
 8004e02:	e7f5      	b.n	8004df0 <main+0x110>
		  else if(res == 'R') boot_off_and_reset();
 8004e04:	2b52      	cmp	r3, #82	; 0x52
 8004e06:	d102      	bne.n	8004e0e <main+0x12e>
 8004e08:	f000 fcb2 	bl	8005770 <boot_off_and_reset>
 8004e0c:	e7f0      	b.n	8004df0 <main+0x110>
		  else if(res == 'E') erase_memory();
 8004e0e:	2b45      	cmp	r3, #69	; 0x45
 8004e10:	d102      	bne.n	8004e18 <main+0x138>
 8004e12:	f000 fd17 	bl	8005844 <erase_memory>
 8004e16:	e7eb      	b.n	8004df0 <main+0x110>
		  else if(res == 'W') write_memory();
 8004e18:	2b57      	cmp	r3, #87	; 0x57
 8004e1a:	d102      	bne.n	8004e22 <main+0x142>
 8004e1c:	f000 fdd8 	bl	80059d0 <write_memory>
 8004e20:	e7e6      	b.n	8004df0 <main+0x110>
		  else if(res == 'S') go_prog();
 8004e22:	2b53      	cmp	r3, #83	; 0x53
 8004e24:	d102      	bne.n	8004e2c <main+0x14c>
 8004e26:	f000 fda9 	bl	800597c <go_prog>
 8004e2a:	e7e1      	b.n	8004df0 <main+0x110>
		  else if(res == 'I') get_id();
 8004e2c:	2b49      	cmp	r3, #73	; 0x49
 8004e2e:	d102      	bne.n	8004e36 <main+0x156>
 8004e30:	f000 fd34 	bl	800589c <get_id>
 8004e34:	e7dc      	b.n	8004df0 <main+0x110>
		  else if(res == 'T') init();
 8004e36:	2b54      	cmp	r3, #84	; 0x54
 8004e38:	d1da      	bne.n	8004df0 <main+0x110>
 8004e3a:	f000 f82b 	bl	8004e94 <init>
 8004e3e:	e7d7      	b.n	8004df0 <main+0x110>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	20000990 	.word	0x20000990
 8004e48:	48000400 	.word	0x48000400
 8004e4c:	20000920 	.word	0x20000920
 8004e50:	40013800 	.word	0x40013800
 8004e54:	200008bc 	.word	0x200008bc
 8004e58:	40003800 	.word	0x40003800
 8004e5c:	20000224 	.word	0x20000224

08004e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e60:	4770      	bx	lr

08004e62 <UART_Printf>:
extern UART_HandleTypeDef huart1;
//extern USBD_HandleTypeDef hUsbDeviceFS;


void UART_Printf(const char* fmt, ...)
{
 8004e62:	b40f      	push	{r0, r1, r2, r3}
 8004e64:	b500      	push	{lr}
 8004e66:	b0c3      	sub	sp, #268	; 0x10c
 8004e68:	ab44      	add	r3, sp, #272	; 0x110
    char buff[256];
    va_list args;
    va_start(args, fmt);
    vsnprintf(buff, sizeof(buff), fmt, args);
 8004e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8004e6e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
 8004e72:	9301      	str	r3, [sp, #4]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8004e74:	a802      	add	r0, sp, #8
 8004e76:	f001 f94d 	bl	8006114 <vsniprintf>
    //HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
    CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
 8004e7a:	a802      	add	r0, sp, #8
 8004e7c:	f7fb f9a8 	bl	80001d0 <strlen>
 8004e80:	b281      	uxth	r1, r0
 8004e82:	a802      	add	r0, sp, #8
 8004e84:	f000 feae 	bl	8005be4 <CDC_Transmit_FS>
    va_end(args);
}
 8004e88:	b043      	add	sp, #268	; 0x10c
 8004e8a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e8e:	b004      	add	sp, #16
 8004e90:	4770      	bx	lr
	...

08004e94 <init>:


void init()
{
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	f6ad 1de4 	subw	sp, sp, #2532	; 0x9e4
    FATFS fs;
    FRESULT res;
    UART_Printf("Ready!\r\n");
 8004e9c:	486b      	ldr	r0, [pc, #428]	; (800504c <init+0x1b8>)

    // mount the default drive
    res = f_mount(&fs, "", 1);
 8004e9e:	f50d 64f6 	add.w	r4, sp, #1968	; 0x7b0
    UART_Printf("Ready!\r\n");
 8004ea2:	f7ff ffde 	bl	8004e62 <UART_Printf>
    res = f_mount(&fs, "", 1);
 8004ea6:	496a      	ldr	r1, [pc, #424]	; (8005050 <init+0x1bc>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff f900 	bl	80040b0 <f_mount>
    if(res != FR_OK)
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	b130      	cbz	r0, 8004ec2 <init+0x2e>
    {
        UART_Printf("f_mount() failed, res = %d\r\n", res);
 8004eb4:	4867      	ldr	r0, [pc, #412]	; (8005054 <init+0x1c0>)
    // Unmount
    res = f_mount(NULL, "", 0);

    if(res != FR_OK)
    {
        UART_Printf("Unmount failed, res = %d\r\n", res);
 8004eb6:	f7ff ffd4 	bl	8004e62 <UART_Printf>
        return;
    }

    UART_Printf("Done!\r\n");
}
 8004eba:	f60d 1de4 	addw	sp, sp, #2532	; 0x9e4
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UART_Printf("f_mount() done!\r\n");
 8004ec2:	4865      	ldr	r0, [pc, #404]	; (8005058 <init+0x1c4>)
 8004ec4:	f7ff ffcd 	bl	8004e62 <UART_Printf>
    res = f_getfree("", &freeClust, &fs_ptr); // Warning! This fills fs.n_fatent and fs.csize!
 8004ec8:	a904      	add	r1, sp, #16
 8004eca:	aa05      	add	r2, sp, #20
 8004ecc:	4860      	ldr	r0, [pc, #384]	; (8005050 <init+0x1bc>)
    FATFS* fs_ptr = &fs;
 8004ece:	9405      	str	r4, [sp, #20]
    res = f_getfree("", &freeClust, &fs_ptr); // Warning! This fills fs.n_fatent and fs.csize!
 8004ed0:	f7ff fdfc 	bl	8004acc <f_getfree>
    if(res != FR_OK)
 8004ed4:	4601      	mov	r1, r0
 8004ed6:	b108      	cbz	r0, 8004edc <init+0x48>
        UART_Printf("f_getfree() failed, res = %d\r\n", res);
 8004ed8:	4860      	ldr	r0, [pc, #384]	; (800505c <init+0x1c8>)
 8004eda:	e7ec      	b.n	8004eb6 <init+0x22>
    UART_Printf("f_getfree() done!\r\n");
 8004edc:	4860      	ldr	r0, [pc, #384]	; (8005060 <init+0x1cc>)
 8004ede:	f7ff ffc0 	bl	8004e62 <UART_Printf>
    uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 8004ee2:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 8004ee6:	f894 3202 	ldrb.w	r3, [r4, #514]	; 0x202
    uint32_t freeBlocks = freeClust * fs.csize;
 8004eea:	9e04      	ldr	r6, [sp, #16]
    UART_Printf("Total blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000);
 8004eec:	485d      	ldr	r0, [pc, #372]	; (8005064 <init+0x1d0>)
    uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 8004eee:	3d02      	subs	r5, #2
 8004ef0:	435d      	muls	r5, r3
    uint32_t freeBlocks = freeClust * fs.csize;
 8004ef2:	435e      	muls	r6, r3
    UART_Printf("Total blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000);
 8004ef4:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
 8004ef8:	4629      	mov	r1, r5
 8004efa:	fbb5 f9f7 	udiv	r9, r5, r7
 8004efe:	464a      	mov	r2, r9
 8004f00:	f7ff ffaf 	bl	8004e62 <UART_Printf>
    UART_Printf("Free blocks: %lu (%lu Mb)\r\n", freeBlocks, freeBlocks / 2000);
 8004f04:	fbb6 f7f7 	udiv	r7, r6, r7
 8004f08:	4631      	mov	r1, r6
 8004f0a:	463a      	mov	r2, r7
 8004f0c:	4856      	ldr	r0, [pc, #344]	; (8005068 <init+0x1d4>)
 8004f0e:	f7ff ffa8 	bl	8004e62 <UART_Printf>
    res = f_opendir(&dir, "/");
 8004f12:	4956      	ldr	r1, [pc, #344]	; (800506c <init+0x1d8>)
 8004f14:	a84e      	add	r0, sp, #312	; 0x138
 8004f16:	f7ff fd4c 	bl	80049b2 <f_opendir>
    if(res != FR_OK)
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	b110      	cbz	r0, 8004f24 <init+0x90>
        UART_Printf("f_opendir() failed, res = %d\r\n", res);
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4853      	ldr	r0, [pc, #332]	; (8005070 <init+0x1dc>)
 8004f22:	e7c8      	b.n	8004eb6 <init+0x22>
    UART_Printf("--------\r\nRoot directory:\r\n");
 8004f24:	4853      	ldr	r0, [pc, #332]	; (8005074 <init+0x1e0>)
            UART_Printf("  FILE %s\r\n", fileInfo.fname);
 8004f26:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80050b4 <init+0x220>
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 8004f2a:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80050b8 <init+0x224>
    UART_Printf("--------\r\nRoot directory:\r\n");
 8004f2e:	f7ff ff98 	bl	8004e62 <UART_Printf>
    uint32_t totalFiles = 0;
 8004f32:	46a0      	mov	r8, r4
        res = f_readdir(&dir, &fileInfo);
 8004f34:	a908      	add	r1, sp, #32
 8004f36:	a84e      	add	r0, sp, #312	; 0x138
 8004f38:	f7ff fd9d 	bl	8004a76 <f_readdir>
        if((res != FR_OK) || (fileInfo.fname[0] == '\0'))
 8004f3c:	b998      	cbnz	r0, 8004f66 <init+0xd2>
 8004f3e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8004f42:	b183      	cbz	r3, 8004f66 <init+0xd2>
        if(fileInfo.fattrib & AM_DIR)
 8004f44:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004f48:	06db      	lsls	r3, r3, #27
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 8004f4a:	f10d 0129 	add.w	r1, sp, #41	; 0x29
        if(fileInfo.fattrib & AM_DIR)
 8004f4e:	d504      	bpl.n	8004f5a <init+0xc6>
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 8004f50:	4658      	mov	r0, fp
 8004f52:	f7ff ff86 	bl	8004e62 <UART_Printf>
            totalDirs++;
 8004f56:	3401      	adds	r4, #1
 8004f58:	e7ec      	b.n	8004f34 <init+0xa0>
            UART_Printf("  FILE %s\r\n", fileInfo.fname);
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	f7ff ff81 	bl	8004e62 <UART_Printf>
            totalFiles++;
 8004f60:	f108 0801 	add.w	r8, r8, #1
 8004f64:	e7e6      	b.n	8004f34 <init+0xa0>
    UART_Printf("\r\nTotal: %lu dirs, %lu files\r\n--------\r\n", totalDirs, totalFiles);
 8004f66:	4621      	mov	r1, r4
 8004f68:	4642      	mov	r2, r8
 8004f6a:	4843      	ldr	r0, [pc, #268]	; (8005078 <init+0x1e4>)
 8004f6c:	f7ff ff79 	bl	8004e62 <UART_Printf>
    res = f_closedir(&dir);
 8004f70:	a84e      	add	r0, sp, #312	; 0x138
 8004f72:	f7ff fd6c 	bl	8004a4e <f_closedir>
    if(res != FR_OK)
 8004f76:	4601      	mov	r1, r0
 8004f78:	b108      	cbz	r0, 8004f7e <init+0xea>
        UART_Printf("f_closedir() failed, res = %d\r\n", res);
 8004f7a:	4840      	ldr	r0, [pc, #256]	; (800507c <init+0x1e8>)
 8004f7c:	e79b      	b.n	8004eb6 <init+0x22>
    UART_Printf("Writing to log.txt...\r\n");
 8004f7e:	4840      	ldr	r0, [pc, #256]	; (8005080 <init+0x1ec>)
 8004f80:	f7ff ff6f 	bl	8004e62 <UART_Printf>
    snprintf(writeBuff, sizeof(writeBuff), "Total blocks: %lu (%lu Mb); Free blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000, freeBlocks, freeBlocks / 2000);
 8004f84:	462b      	mov	r3, r5
 8004f86:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <init+0x1f0>)
 8004f88:	9702      	str	r7, [sp, #8]
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	9601      	str	r6, [sp, #4]
 8004f8e:	f8cd 9000 	str.w	r9, [sp]
 8004f92:	a80e      	add	r0, sp, #56	; 0x38
 8004f94:	f001 f85e 	bl	8006054 <sniprintf>
    res = f_open(&logFile, "log.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8004f98:	493b      	ldr	r1, [pc, #236]	; (8005088 <init+0x1f4>)
 8004f9a:	2212      	movs	r2, #18
 8004f9c:	a8d6      	add	r0, sp, #856	; 0x358
 8004f9e:	f7ff f8bd 	bl	800411c <f_open>
    if(res != FR_OK)
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	b108      	cbz	r0, 8004faa <init+0x116>
        UART_Printf("f_open() failed, res = %d\r\n", res);
 8004fa6:	4839      	ldr	r0, [pc, #228]	; (800508c <init+0x1f8>)
 8004fa8:	e785      	b.n	8004eb6 <init+0x22>
    unsigned int bytesToWrite = strlen(writeBuff);
 8004faa:	a80e      	add	r0, sp, #56	; 0x38
 8004fac:	f7fb f910 	bl	80001d0 <strlen>
    res = f_write(&logFile, writeBuff, bytesToWrite, &bytesWritten);
 8004fb0:	a90e      	add	r1, sp, #56	; 0x38
 8004fb2:	4602      	mov	r2, r0
    unsigned int bytesToWrite = strlen(writeBuff);
 8004fb4:	4604      	mov	r4, r0
    res = f_write(&logFile, writeBuff, bytesToWrite, &bytesWritten);
 8004fb6:	ab06      	add	r3, sp, #24
 8004fb8:	a8d6      	add	r0, sp, #856	; 0x358
 8004fba:	f7ff fa4b 	bl	8004454 <f_write>
    if(res != FR_OK)
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	b108      	cbz	r0, 8004fc6 <init+0x132>
        UART_Printf("f_write() failed, res = %d\r\n", res);
 8004fc2:	4833      	ldr	r0, [pc, #204]	; (8005090 <init+0x1fc>)
 8004fc4:	e777      	b.n	8004eb6 <init+0x22>
    if(bytesWritten < bytesToWrite)
 8004fc6:	9a06      	ldr	r2, [sp, #24]
 8004fc8:	4294      	cmp	r4, r2
 8004fca:	d903      	bls.n	8004fd4 <init+0x140>
        UART_Printf("WARNING! Disk is full, bytesToWrite = %lu, bytesWritten = %lu\r\n", bytesToWrite, bytesWritten);
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4831      	ldr	r0, [pc, #196]	; (8005094 <init+0x200>)
 8004fd0:	f7ff ff47 	bl	8004e62 <UART_Printf>
    res = f_close(&logFile);
 8004fd4:	a8d6      	add	r0, sp, #856	; 0x358
 8004fd6:	f7ff fb8c 	bl	80046f2 <f_close>
    if(res != FR_OK)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	b108      	cbz	r0, 8004fe2 <init+0x14e>
        UART_Printf("f_close() failed, res = %d\r\n", res);
 8004fde:	482e      	ldr	r0, [pc, #184]	; (8005098 <init+0x204>)
 8004fe0:	e769      	b.n	8004eb6 <init+0x22>
    UART_Printf("Reading file...\r\n");
 8004fe2:	482e      	ldr	r0, [pc, #184]	; (800509c <init+0x208>)
 8004fe4:	f7ff ff3d 	bl	8004e62 <UART_Printf>
    res = f_open(&msgFile, "test.txt", FA_READ);
 8004fe8:	492d      	ldr	r1, [pc, #180]	; (80050a0 <init+0x20c>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	f20d 5084 	addw	r0, sp, #1412	; 0x584
 8004ff0:	f7ff f894 	bl	800411c <f_open>
    if(res != FR_OK)
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d1d5      	bne.n	8004fa6 <init+0x112>
    res = f_read(&msgFile, readBuff, sizeof(readBuff)-1, &bytesRead);
 8004ffa:	ac2e      	add	r4, sp, #184	; 0xb8
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	ab07      	add	r3, sp, #28
 8005000:	227f      	movs	r2, #127	; 0x7f
 8005002:	f20d 5084 	addw	r0, sp, #1412	; 0x584
 8005006:	f7ff f961 	bl	80042cc <f_read>
    if(res != FR_OK)
 800500a:	4601      	mov	r1, r0
 800500c:	b108      	cbz	r0, 8005012 <init+0x17e>
        UART_Printf("f_read() failed, res = %d\r\n", res);
 800500e:	4825      	ldr	r0, [pc, #148]	; (80050a4 <init+0x210>)
 8005010:	e751      	b.n	8004eb6 <init+0x22>
    readBuff[bytesRead] = '\0';
 8005012:	9b07      	ldr	r3, [sp, #28]
    UART_Printf("%s\r\n", readBuff);
 8005014:	4621      	mov	r1, r4
    readBuff[bytesRead] = '\0';
 8005016:	54e0      	strb	r0, [r4, r3]
    UART_Printf("%s\r\n", readBuff);
 8005018:	4823      	ldr	r0, [pc, #140]	; (80050a8 <init+0x214>)
 800501a:	f7ff ff22 	bl	8004e62 <UART_Printf>
    HAL_Delay(10);
 800501e:	200a      	movs	r0, #10
 8005020:	f7fb f976 	bl	8000310 <HAL_Delay>
    res = f_close(&msgFile);
 8005024:	f20d 5084 	addw	r0, sp, #1412	; 0x584
 8005028:	f7ff fb63 	bl	80046f2 <f_close>
    if(res != FR_OK)
 800502c:	4602      	mov	r2, r0
 800502e:	b108      	cbz	r0, 8005034 <init+0x1a0>
        UART_Printf("f_close() failed, res = %d\r\n", res);
 8005030:	4601      	mov	r1, r0
 8005032:	e7d4      	b.n	8004fde <init+0x14a>
    res = f_mount(NULL, "", 0);
 8005034:	4906      	ldr	r1, [pc, #24]	; (8005050 <init+0x1bc>)
 8005036:	f7ff f83b 	bl	80040b0 <f_mount>
    if(res != FR_OK)
 800503a:	4601      	mov	r1, r0
 800503c:	b108      	cbz	r0, 8005042 <init+0x1ae>
        UART_Printf("Unmount failed, res = %d\r\n", res);
 800503e:	481b      	ldr	r0, [pc, #108]	; (80050ac <init+0x218>)
 8005040:	e739      	b.n	8004eb6 <init+0x22>
    UART_Printf("Done!\r\n");
 8005042:	481b      	ldr	r0, [pc, #108]	; (80050b0 <init+0x21c>)
 8005044:	f7ff ff0d 	bl	8004e62 <UART_Printf>
 8005048:	e737      	b.n	8004eba <init+0x26>
 800504a:	bf00      	nop
 800504c:	08006a15 	.word	0x08006a15
 8005050:	08006c82 	.word	0x08006c82
 8005054:	08006a1e 	.word	0x08006a1e
 8005058:	08006a3b 	.word	0x08006a3b
 800505c:	08006a4d 	.word	0x08006a4d
 8005060:	08006a6c 	.word	0x08006a6c
 8005064:	08006a80 	.word	0x08006a80
 8005068:	08006b6f 	.word	0x08006b6f
 800506c:	08006a9d 	.word	0x08006a9d
 8005070:	08006a9f 	.word	0x08006a9f
 8005074:	08006abe 	.word	0x08006abe
 8005078:	08006af2 	.word	0x08006af2
 800507c:	08006b1b 	.word	0x08006b1b
 8005080:	08006b3b 	.word	0x08006b3b
 8005084:	08006b53 	.word	0x08006b53
 8005088:	08006b8b 	.word	0x08006b8b
 800508c:	08006b93 	.word	0x08006b93
 8005090:	08006baf 	.word	0x08006baf
 8005094:	08006bcc 	.word	0x08006bcc
 8005098:	08006c0c 	.word	0x08006c0c
 800509c:	08006c29 	.word	0x08006c29
 80050a0:	08006c3b 	.word	0x08006c3b
 80050a4:	08006c44 	.word	0x08006c44
 80050a8:	08006ae1 	.word	0x08006ae1
 80050ac:	08006c60 	.word	0x08006c60
 80050b0:	08006c7b 	.word	0x08006c7b
 80050b4:	08006ae6 	.word	0x08006ae6
 80050b8:	08006ada 	.word	0x08006ada

080050bc <SDCARD_Select>:
#include "sdcard.h"


static void SDCARD_Select()
{
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_RESET);
 80050bc:	2200      	movs	r2, #0
 80050be:	2120      	movs	r1, #32
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <SDCARD_Select+0xc>)
 80050c2:	f7fb ba87 	b.w	80005d4 <HAL_GPIO_WritePin>
 80050c6:	bf00      	nop
 80050c8:	48000400 	.word	0x48000400

080050cc <SDCARD_ReadR1>:
     |`------ 6th bit (b): misaligned addres used in command
     `------- 7th bit (a): command argument outside allowed range
             (8th bit is always zero)
*/
static uint8_t SDCARD_ReadR1()
{
 80050cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t r1;
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 80050ce:	23ff      	movs	r3, #255	; 0xff
    for(;;)
    {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80050d0:	4c09      	ldr	r4, [pc, #36]	; (80050f8 <SDCARD_ReadR1+0x2c>)
    uint8_t tx = 0xFF;
 80050d2:	f88d 300f 	strb.w	r3, [sp, #15]
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &r1, sizeof(r1), HAL_MAX_DELAY);
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f10d 020e 	add.w	r2, sp, #14
 80050e0:	2301      	movs	r3, #1
 80050e2:	f10d 010f 	add.w	r1, sp, #15
 80050e6:	4620      	mov	r0, r4
 80050e8:	f7fc ffcb 	bl	8002082 <HAL_SPI_TransmitReceive>
        if((r1 & 0x80) == 0) // 8th bit alwyas zero, r1 recevied
 80050ec:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80050f0:	0603      	lsls	r3, r0, #24
 80050f2:	d4f0      	bmi.n	80050d6 <SDCARD_ReadR1+0xa>
            break;
    }
    return r1;
}
 80050f4:	b004      	add	sp, #16
 80050f6:	bd10      	pop	{r4, pc}
 80050f8:	200008bc 	.word	0x200008bc

080050fc <SDCARD_ReadBytes>:
    }
    return 0;
}

static int SDCARD_ReadBytes(uint8_t* buff, size_t buff_size)
{
 80050fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    // make sure FF is transmitted during receive
    uint8_t tx = 0xFF;
 8005100:	ad04      	add	r5, sp, #16
 8005102:	23ff      	movs	r3, #255	; 0xff
 8005104:	f805 3d01 	strb.w	r3, [r5, #-1]!
    while(buff_size > 0)
    {
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8005108:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8005134 <SDCARD_ReadBytes+0x38>
{
 800510c:	4604      	mov	r4, r0
 800510e:	1846      	adds	r6, r0, r1
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8005110:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    while(buff_size > 0)
 8005114:	42b4      	cmp	r4, r6
 8005116:	d103      	bne.n	8005120 <SDCARD_ReadBytes+0x24>
        buff++;
        buff_size--;
    }

    return 0;
}
 8005118:	2000      	movs	r0, #0
 800511a:	b004      	add	sp, #16
 800511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, buff, 1, HAL_MAX_DELAY);
 8005120:	4622      	mov	r2, r4
 8005122:	9700      	str	r7, [sp, #0]
 8005124:	2301      	movs	r3, #1
 8005126:	4629      	mov	r1, r5
 8005128:	4640      	mov	r0, r8
 800512a:	f7fc ffaa 	bl	8002082 <HAL_SPI_TransmitReceive>
        buff++;
 800512e:	3401      	adds	r4, #1
 8005130:	e7f0      	b.n	8005114 <SDCARD_ReadBytes+0x18>
 8005132:	bf00      	nop
 8005134:	200008bc 	.word	0x200008bc

08005138 <SDCARD_WaitNotBusy>:

static int SDCARD_WaitNotBusy()
{
 8005138:	b507      	push	{r0, r1, r2, lr}
    uint8_t busy;
    do {
        if(SDCARD_ReadBytes(&busy, sizeof(busy)) < 0)
 800513a:	2101      	movs	r1, #1
 800513c:	f10d 0007 	add.w	r0, sp, #7
 8005140:	f7ff ffdc 	bl	80050fc <SDCARD_ReadBytes>
 8005144:	2800      	cmp	r0, #0
 8005146:	db07      	blt.n	8005158 <SDCARD_WaitNotBusy+0x20>
        {
            return -1;
        }
    } while(busy != 0xFF);
 8005148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800514c:	2bff      	cmp	r3, #255	; 0xff
 800514e:	d1f4      	bne.n	800513a <SDCARD_WaitNotBusy+0x2>

    return 0;
 8005150:	2000      	movs	r0, #0
}
 8005152:	b003      	add	sp, #12
 8005154:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1;
 8005158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800515c:	e7f9      	b.n	8005152 <SDCARD_WaitNotBusy+0x1a>
	...

08005160 <SDCARD_WaitDataToken.constprop.0>:
static int SDCARD_WaitDataToken(uint8_t token)
 8005160:	b530      	push	{r4, r5, lr}
 8005162:	b085      	sub	sp, #20
    uint8_t tx = 0xFF;
 8005164:	23ff      	movs	r3, #255	; 0xff
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 8005166:	4d0c      	ldr	r5, [pc, #48]	; (8005198 <SDCARD_WaitDataToken.constprop.0+0x38>)
    uint8_t tx = 0xFF;
 8005168:	f88d 300f 	strb.w	r3, [sp, #15]
        HAL_SPI_TransmitReceive(&SDCARD_SPI_PORT, &tx, &fb, sizeof(fb), HAL_MAX_DELAY);
 800516c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005170:	2301      	movs	r3, #1
 8005172:	9400      	str	r4, [sp, #0]
 8005174:	f10d 020e 	add.w	r2, sp, #14
 8005178:	f10d 010f 	add.w	r1, sp, #15
 800517c:	4628      	mov	r0, r5
 800517e:	f7fc ff80 	bl	8002082 <HAL_SPI_TransmitReceive>
        if(fb == token)
 8005182:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005186:	2bfe      	cmp	r3, #254	; 0xfe
 8005188:	d004      	beq.n	8005194 <SDCARD_WaitDataToken.constprop.0+0x34>
        if(fb != 0xFF)
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d0ee      	beq.n	800516c <SDCARD_WaitDataToken.constprop.0+0xc>
            return -1;
 800518e:	4620      	mov	r0, r4
}
 8005190:	b005      	add	sp, #20
 8005192:	bd30      	pop	{r4, r5, pc}
    return 0;
 8005194:	2000      	movs	r0, #0
 8005196:	e7fb      	b.n	8005190 <SDCARD_WaitDataToken.constprop.0+0x30>
 8005198:	200008bc 	.word	0x200008bc

0800519c <SDCARD_Unselect>:
    HAL_GPIO_WritePin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin, GPIO_PIN_SET);
 800519c:	2201      	movs	r2, #1
 800519e:	2120      	movs	r1, #32
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <SDCARD_Unselect+0xc>)
 80051a2:	f7fb ba17 	b.w	80005d4 <HAL_GPIO_WritePin>
 80051a6:	bf00      	nop
 80051a8:	48000400 	.word	0x48000400

080051ac <SDCARD_Init>:

int SDCARD_Init()
{
 80051ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    step under certain circumstances SD-card will not work. For instance, when
    multiple SPI devices are sharing the same bus (i.e. MISO, MOSI, CS).
    */
    SDCARD_Unselect();

    uint8_t high = 0xFF;
 80051ae:	ad02      	add	r5, sp, #8
    SDCARD_Unselect();
 80051b0:	f7ff fff4 	bl	800519c <SDCARD_Unselect>
    uint8_t high = 0xFF;
 80051b4:	23ff      	movs	r3, #255	; 0xff
 80051b6:	f805 3d05 	strb.w	r3, [r5, #-5]!
    for(int i = 0; i < 10; i++) // 80 clock pulses
    {
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 80051ba:	4e55      	ldr	r6, [pc, #340]	; (8005310 <SDCARD_Init+0x164>)
    uint8_t high = 0xFF;
 80051bc:	240a      	movs	r4, #10
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, &high, sizeof(high), HAL_MAX_DELAY);
 80051be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c2:	2201      	movs	r2, #1
 80051c4:	4629      	mov	r1, r5
 80051c6:	4630      	mov	r0, r6
 80051c8:	f7fc fe9d 	bl	8001f06 <HAL_SPI_Transmit>
    for(int i = 0; i < 10; i++) // 80 clock pulses
 80051cc:	3c01      	subs	r4, #1
 80051ce:	d1f6      	bne.n	80051be <SDCARD_Init+0x12>
    }

    SDCARD_Select();
 80051d0:	f7ff ff74 	bl	80050bc <SDCARD_Select>
    /*
    Step 2.

    Send CMD0 (GO_IDLE_STATE): Reset the SD card.
    */
    if(SDCARD_WaitNotBusy() < 0)
 80051d4:	f7ff ffb0 	bl	8005138 <SDCARD_WaitNotBusy>
 80051d8:	2800      	cmp	r0, #0
 80051da:	da05      	bge.n	80051e8 <SDCARD_Init+0x3c>
    {
        SDCARD_Unselect();
 80051dc:	f7ff ffde 	bl	800519c <SDCARD_Unselect>
        return -1;
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    SDCARD_Unselect();
    return 0;
}
 80051e4:	b002      	add	sp, #8
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ec:	2206      	movs	r2, #6
 80051ee:	4949      	ldr	r1, [pc, #292]	; (8005314 <SDCARD_Init+0x168>)
 80051f0:	4847      	ldr	r0, [pc, #284]	; (8005310 <SDCARD_Init+0x164>)
 80051f2:	f7fc fe88 	bl	8001f06 <HAL_SPI_Transmit>
    if(SDCARD_ReadR1() != 0x01)
 80051f6:	f7ff ff69 	bl	80050cc <SDCARD_ReadR1>
 80051fa:	2801      	cmp	r0, #1
 80051fc:	d1ee      	bne.n	80051dc <SDCARD_Init+0x30>
    if(SDCARD_WaitNotBusy() < 0) // keep this!
 80051fe:	f7ff ff9b 	bl	8005138 <SDCARD_WaitNotBusy>
 8005202:	2800      	cmp	r0, #0
 8005204:	dbea      	blt.n	80051dc <SDCARD_Init+0x30>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800520a:	2206      	movs	r2, #6
 800520c:	4942      	ldr	r1, [pc, #264]	; (8005318 <SDCARD_Init+0x16c>)
 800520e:	4840      	ldr	r0, [pc, #256]	; (8005310 <SDCARD_Init+0x164>)
 8005210:	f7fc fe79 	bl	8001f06 <HAL_SPI_Transmit>
    if(SDCARD_ReadR1() != 0x01)
 8005214:	f7ff ff5a 	bl	80050cc <SDCARD_ReadR1>
 8005218:	2801      	cmp	r0, #1
 800521a:	d004      	beq.n	8005226 <SDCARD_Init+0x7a>
        SDCARD_Unselect();
 800521c:	f7ff ffbe 	bl	800519c <SDCARD_Unselect>
        return -2; // not an SDHC/SDXC card (i.e. SDSC, not supported)
 8005220:	f06f 0001 	mvn.w	r0, #1
 8005224:	e7de      	b.n	80051e4 <SDCARD_Init+0x38>
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0)
 8005226:	2104      	movs	r1, #4
 8005228:	eb0d 0001 	add.w	r0, sp, r1
 800522c:	f7ff ff66 	bl	80050fc <SDCARD_ReadBytes>
 8005230:	2800      	cmp	r0, #0
 8005232:	da04      	bge.n	800523e <SDCARD_Init+0x92>
            SDCARD_Unselect();
 8005234:	f7ff ffb2 	bl	800519c <SDCARD_Unselect>
            return -3;
 8005238:	f06f 0002 	mvn.w	r0, #2
 800523c:	e7d2      	b.n	80051e4 <SDCARD_Init+0x38>
        if(((resp[2] & 0x01) != 1) || (resp[3] != 0xAA))
 800523e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005242:	07db      	lsls	r3, r3, #31
 8005244:	d503      	bpl.n	800524e <SDCARD_Init+0xa2>
 8005246:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800524a:	2baa      	cmp	r3, #170	; 0xaa
 800524c:	d004      	beq.n	8005258 <SDCARD_Init+0xac>
            SDCARD_Unselect();
 800524e:	f7ff ffa5 	bl	800519c <SDCARD_Unselect>
            return -4;
 8005252:	f06f 0003 	mvn.w	r0, #3
 8005256:	e7c5      	b.n	80051e4 <SDCARD_Init+0x38>
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005258:	4d30      	ldr	r5, [pc, #192]	; (800531c <SDCARD_Init+0x170>)
 800525a:	4c2d      	ldr	r4, [pc, #180]	; (8005310 <SDCARD_Init+0x164>)
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800525c:	4e30      	ldr	r6, [pc, #192]	; (8005320 <SDCARD_Init+0x174>)
        if(SDCARD_WaitNotBusy() < 0) // keep this!
 800525e:	f7ff ff6b 	bl	8005138 <SDCARD_WaitNotBusy>
 8005262:	2800      	cmp	r0, #0
 8005264:	dbba      	blt.n	80051dc <SDCARD_Init+0x30>
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	2206      	movs	r2, #6
 800526c:	4629      	mov	r1, r5
 800526e:	4620      	mov	r0, r4
 8005270:	f7fc fe49 	bl	8001f06 <HAL_SPI_Transmit>
        if(SDCARD_ReadR1() != 0x01)
 8005274:	f7ff ff2a 	bl	80050cc <SDCARD_ReadR1>
 8005278:	2801      	cmp	r0, #1
 800527a:	d004      	beq.n	8005286 <SDCARD_Init+0xda>
            SDCARD_Unselect();
 800527c:	f7ff ff8e 	bl	800519c <SDCARD_Unselect>
            return -5;
 8005280:	f06f 0004 	mvn.w	r0, #4
 8005284:	e7ae      	b.n	80051e4 <SDCARD_Init+0x38>
        if(SDCARD_WaitNotBusy() < 0) // keep this!
 8005286:	f7ff ff57 	bl	8005138 <SDCARD_WaitNotBusy>
 800528a:	2800      	cmp	r0, #0
 800528c:	dba6      	blt.n	80051dc <SDCARD_Init+0x30>
            HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 800528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005292:	2206      	movs	r2, #6
 8005294:	4631      	mov	r1, r6
 8005296:	4620      	mov	r0, r4
 8005298:	f7fc fe35 	bl	8001f06 <HAL_SPI_Transmit>
        uint8_t r1 = SDCARD_ReadR1();
 800529c:	f7ff ff16 	bl	80050cc <SDCARD_ReadR1>
        if(r1 == 0x00)
 80052a0:	b130      	cbz	r0, 80052b0 <SDCARD_Init+0x104>
        if(r1 != 0x01)
 80052a2:	2801      	cmp	r0, #1
 80052a4:	d0db      	beq.n	800525e <SDCARD_Init+0xb2>
            SDCARD_Unselect();
 80052a6:	f7ff ff79 	bl	800519c <SDCARD_Unselect>
            return -6;
 80052aa:	f06f 0005 	mvn.w	r0, #5
 80052ae:	e799      	b.n	80051e4 <SDCARD_Init+0x38>
    if(SDCARD_WaitNotBusy() < 0) // keep this!
 80052b0:	f7ff ff42 	bl	8005138 <SDCARD_WaitNotBusy>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	db91      	blt.n	80051dc <SDCARD_Init+0x30>
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052bc:	2206      	movs	r2, #6
 80052be:	4919      	ldr	r1, [pc, #100]	; (8005324 <SDCARD_Init+0x178>)
 80052c0:	4813      	ldr	r0, [pc, #76]	; (8005310 <SDCARD_Init+0x164>)
 80052c2:	f7fc fe20 	bl	8001f06 <HAL_SPI_Transmit>
    if(SDCARD_ReadR1() != 0x00)
 80052c6:	f7ff ff01 	bl	80050cc <SDCARD_ReadR1>
 80052ca:	4604      	mov	r4, r0
 80052cc:	b120      	cbz	r0, 80052d8 <SDCARD_Init+0x12c>
        SDCARD_Unselect();
 80052ce:	f7ff ff65 	bl	800519c <SDCARD_Unselect>
        return -7;
 80052d2:	f06f 0006 	mvn.w	r0, #6
 80052d6:	e785      	b.n	80051e4 <SDCARD_Init+0x38>
        if(SDCARD_ReadBytes(resp, sizeof(resp)) < 0)
 80052d8:	2104      	movs	r1, #4
 80052da:	eb0d 0001 	add.w	r0, sp, r1
 80052de:	f7ff ff0d 	bl	80050fc <SDCARD_ReadBytes>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	da04      	bge.n	80052f0 <SDCARD_Init+0x144>
            SDCARD_Unselect();
 80052e6:	f7ff ff59 	bl	800519c <SDCARD_Unselect>
            return -8;
 80052ea:	f06f 0007 	mvn.w	r0, #7
 80052ee:	e779      	b.n	80051e4 <SDCARD_Init+0x38>
        if((resp[0] & 0xC0) != 0xC0)
 80052f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80052f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052f8:	2bc0      	cmp	r3, #192	; 0xc0
 80052fa:	d004      	beq.n	8005306 <SDCARD_Init+0x15a>
            SDCARD_Unselect();
 80052fc:	f7ff ff4e 	bl	800519c <SDCARD_Unselect>
            return -9;
 8005300:	f06f 0008 	mvn.w	r0, #8
 8005304:	e76e      	b.n	80051e4 <SDCARD_Init+0x38>
    SDCARD_Unselect();
 8005306:	f7ff ff49 	bl	800519c <SDCARD_Unselect>
    return 0;
 800530a:	4620      	mov	r0, r4
 800530c:	e76a      	b.n	80051e4 <SDCARD_Init+0x38>
 800530e:	bf00      	nop
 8005310:	200008bc 	.word	0x200008bc
 8005314:	08006c83 	.word	0x08006c83
 8005318:	08006c89 	.word	0x08006c89
 800531c:	08006c8f 	.word	0x08006c8f
 8005320:	08006c95 	.word	0x08006c95
 8005324:	08006c9b 	.word	0x08006c9b

08005328 <SDCARD_ReadBegin>:
    SDCARD_Unselect();
    return 0;
}

int SDCARD_ReadBegin(uint32_t blockNum)
{
 8005328:	b513      	push	{r0, r1, r4, lr}
 800532a:	4604      	mov	r4, r0
    SDCARD_Select();
 800532c:	f7ff fec6 	bl	80050bc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) // keep this!
 8005330:	f7ff ff02 	bl	8005138 <SDCARD_WaitNotBusy>
 8005334:	2800      	cmp	r0, #0
 8005336:	da05      	bge.n	8005344 <SDCARD_ReadBegin+0x1c>
    {
        SDCARD_Unselect();
 8005338:	f7ff ff30 	bl	800519c <SDCARD_Unselect>
        return -1;
 800533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -2;
    }

    SDCARD_Unselect();
    return 0;
}
 8005340:	b002      	add	sp, #8
 8005342:	bd10      	pop	{r4, pc}
    uint8_t cmd[] = {
 8005344:	2352      	movs	r3, #82	; 0x52
 8005346:	f88d 3000 	strb.w	r3, [sp]
        (blockNum >> 24) & 0xFF, /* ARG */
 800534a:	0e23      	lsrs	r3, r4, #24
    uint8_t cmd[] = {
 800534c:	f88d 3001 	strb.w	r3, [sp, #1]
        (blockNum >> 16) & 0xFF,
 8005350:	0c23      	lsrs	r3, r4, #16
    uint8_t cmd[] = {
 8005352:	f88d 3002 	strb.w	r3, [sp, #2]
        (blockNum >> 8) & 0xFF,
 8005356:	0a23      	lsrs	r3, r4, #8
    uint8_t cmd[] = {
 8005358:	f88d 3003 	strb.w	r3, [sp, #3]
 800535c:	23ff      	movs	r3, #255	; 0xff
 800535e:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005362:	2206      	movs	r2, #6
 8005364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005368:	4669      	mov	r1, sp
 800536a:	4809      	ldr	r0, [pc, #36]	; (8005390 <SDCARD_ReadBegin+0x68>)
    uint8_t cmd[] = {
 800536c:	f88d 4004 	strb.w	r4, [sp, #4]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005370:	f7fc fdc9 	bl	8001f06 <HAL_SPI_Transmit>
    if(SDCARD_ReadR1() != 0x00)
 8005374:	f7ff feaa 	bl	80050cc <SDCARD_ReadR1>
 8005378:	4604      	mov	r4, r0
 800537a:	b120      	cbz	r0, 8005386 <SDCARD_ReadBegin+0x5e>
        SDCARD_Unselect();
 800537c:	f7ff ff0e 	bl	800519c <SDCARD_Unselect>
        return -2;
 8005380:	f06f 0001 	mvn.w	r0, #1
 8005384:	e7dc      	b.n	8005340 <SDCARD_ReadBegin+0x18>
    SDCARD_Unselect();
 8005386:	f7ff ff09 	bl	800519c <SDCARD_Unselect>
    return 0;
 800538a:	4620      	mov	r0, r4
 800538c:	e7d8      	b.n	8005340 <SDCARD_ReadBegin+0x18>
 800538e:	bf00      	nop
 8005390:	200008bc 	.word	0x200008bc

08005394 <SDCARD_ReadData>:

int SDCARD_ReadData(uint8_t* buff)
{
 8005394:	b513      	push	{r0, r1, r4, lr}
 8005396:	4604      	mov	r4, r0
    uint8_t crc[2];
    SDCARD_Select();
 8005398:	f7ff fe90 	bl	80050bc <SDCARD_Select>

    if(SDCARD_WaitDataToken(DATA_TOKEN_CMD18) < 0)
 800539c:	f7ff fee0 	bl	8005160 <SDCARD_WaitDataToken.constprop.0>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	da05      	bge.n	80053b0 <SDCARD_ReadData+0x1c>
    {
        SDCARD_Unselect();
 80053a4:	f7ff fefa 	bl	800519c <SDCARD_Unselect>
        return -1;
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    SDCARD_Unselect();
    return 0;

}
 80053ac:	b002      	add	sp, #8
 80053ae:	bd10      	pop	{r4, pc}
    if(SDCARD_ReadBytes(buff, 512) < 0)
 80053b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053b4:	4620      	mov	r0, r4
 80053b6:	f7ff fea1 	bl	80050fc <SDCARD_ReadBytes>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	da04      	bge.n	80053c8 <SDCARD_ReadData+0x34>
        SDCARD_Unselect();
 80053be:	f7ff feed 	bl	800519c <SDCARD_Unselect>
        return -2;
 80053c2:	f06f 0001 	mvn.w	r0, #1
 80053c6:	e7f1      	b.n	80053ac <SDCARD_ReadData+0x18>
    if(SDCARD_ReadBytes(crc, 2) < 0)
 80053c8:	2102      	movs	r1, #2
 80053ca:	a801      	add	r0, sp, #4
 80053cc:	f7ff fe96 	bl	80050fc <SDCARD_ReadBytes>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	da04      	bge.n	80053de <SDCARD_ReadData+0x4a>
        SDCARD_Unselect();
 80053d4:	f7ff fee2 	bl	800519c <SDCARD_Unselect>
        return -3;
 80053d8:	f06f 0002 	mvn.w	r0, #2
 80053dc:	e7e6      	b.n	80053ac <SDCARD_ReadData+0x18>
    SDCARD_Unselect();
 80053de:	f7ff fedd 	bl	800519c <SDCARD_Unselect>
    return 0;
 80053e2:	2000      	movs	r0, #0
 80053e4:	e7e2      	b.n	80053ac <SDCARD_ReadData+0x18>
	...

080053e8 <SDCARD_ReadEnd>:

int SDCARD_ReadEnd() {
 80053e8:	b513      	push	{r0, r1, r4, lr}
    SDCARD_Select();
 80053ea:	f7ff fe67 	bl	80050bc <SDCARD_Select>

    /* CMD12 (STOP_TRANSMISSION) */
    {
        static const uint8_t cmd[] = { 0x40 | 0x0C /* CMD12 */, 0x00, 0x00, 0x00, 0x00 /* ARG */, (0x7F << 1) | 1 };
        HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f2:	2206      	movs	r2, #6
 80053f4:	490e      	ldr	r1, [pc, #56]	; (8005430 <SDCARD_ReadEnd+0x48>)
 80053f6:	480f      	ldr	r0, [pc, #60]	; (8005434 <SDCARD_ReadEnd+0x4c>)
 80053f8:	f7fc fd85 	bl	8001f06 <HAL_SPI_Transmit>
    /*
    The received byte immediataly following CMD12 is a stuff byte, it should be
    discarded before receive the response of the CMD12
    */
    uint8_t stuffByte;
    if(SDCARD_ReadBytes(&stuffByte, sizeof(stuffByte)) < 0)
 80053fc:	2101      	movs	r1, #1
 80053fe:	f10d 0007 	add.w	r0, sp, #7
 8005402:	f7ff fe7b 	bl	80050fc <SDCARD_ReadBytes>
 8005406:	2800      	cmp	r0, #0
 8005408:	da05      	bge.n	8005416 <SDCARD_ReadEnd+0x2e>
    {
        SDCARD_Unselect();
 800540a:	f7ff fec7 	bl	800519c <SDCARD_Unselect>
        return -1;
 800540e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -2;
    }

    SDCARD_Unselect();
    return 0;
}
 8005412:	b002      	add	sp, #8
 8005414:	bd10      	pop	{r4, pc}
    if(SDCARD_ReadR1() != 0x00)
 8005416:	f7ff fe59 	bl	80050cc <SDCARD_ReadR1>
 800541a:	4604      	mov	r4, r0
 800541c:	b120      	cbz	r0, 8005428 <SDCARD_ReadEnd+0x40>
        SDCARD_Unselect();
 800541e:	f7ff febd 	bl	800519c <SDCARD_Unselect>
        return -2;
 8005422:	f06f 0001 	mvn.w	r0, #1
 8005426:	e7f4      	b.n	8005412 <SDCARD_ReadEnd+0x2a>
    SDCARD_Unselect();
 8005428:	f7ff feb8 	bl	800519c <SDCARD_Unselect>
    return 0;
 800542c:	4620      	mov	r0, r4
 800542e:	e7f0      	b.n	8005412 <SDCARD_ReadEnd+0x2a>
 8005430:	08006ca1 	.word	0x08006ca1
 8005434:	200008bc 	.word	0x200008bc

08005438 <SDCARD_WriteBegin>:


int SDCARD_WriteBegin(uint32_t blockNum)
{
 8005438:	b513      	push	{r0, r1, r4, lr}
 800543a:	4604      	mov	r4, r0
    SDCARD_Select();
 800543c:	f7ff fe3e 	bl	80050bc <SDCARD_Select>

    if(SDCARD_WaitNotBusy() < 0) // keep this!
 8005440:	f7ff fe7a 	bl	8005138 <SDCARD_WaitNotBusy>
 8005444:	2800      	cmp	r0, #0
 8005446:	da05      	bge.n	8005454 <SDCARD_WriteBegin+0x1c>
    {
        SDCARD_Unselect();
 8005448:	f7ff fea8 	bl	800519c <SDCARD_Unselect>
        return -1;
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -2;
    }

    SDCARD_Unselect();
    return 0;
}
 8005450:	b002      	add	sp, #8
 8005452:	bd10      	pop	{r4, pc}
    uint8_t cmd[] = {
 8005454:	2359      	movs	r3, #89	; 0x59
 8005456:	f88d 3000 	strb.w	r3, [sp]
        (blockNum >> 24) & 0xFF, /* ARG */
 800545a:	0e23      	lsrs	r3, r4, #24
    uint8_t cmd[] = {
 800545c:	f88d 3001 	strb.w	r3, [sp, #1]
        (blockNum >> 16) & 0xFF,
 8005460:	0c23      	lsrs	r3, r4, #16
    uint8_t cmd[] = {
 8005462:	f88d 3002 	strb.w	r3, [sp, #2]
        (blockNum >> 8) & 0xFF,
 8005466:	0a23      	lsrs	r3, r4, #8
    uint8_t cmd[] = {
 8005468:	f88d 3003 	strb.w	r3, [sp, #3]
 800546c:	23ff      	movs	r3, #255	; 0xff
 800546e:	f88d 3005 	strb.w	r3, [sp, #5]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005472:	2206      	movs	r2, #6
 8005474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005478:	4669      	mov	r1, sp
 800547a:	4809      	ldr	r0, [pc, #36]	; (80054a0 <SDCARD_WriteBegin+0x68>)
    uint8_t cmd[] = {
 800547c:	f88d 4004 	strb.w	r4, [sp, #4]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)cmd, sizeof(cmd), HAL_MAX_DELAY);
 8005480:	f7fc fd41 	bl	8001f06 <HAL_SPI_Transmit>
    if(SDCARD_ReadR1() != 0x00)
 8005484:	f7ff fe22 	bl	80050cc <SDCARD_ReadR1>
 8005488:	4604      	mov	r4, r0
 800548a:	b120      	cbz	r0, 8005496 <SDCARD_WriteBegin+0x5e>
        SDCARD_Unselect();
 800548c:	f7ff fe86 	bl	800519c <SDCARD_Unselect>
        return -2;
 8005490:	f06f 0001 	mvn.w	r0, #1
 8005494:	e7dc      	b.n	8005450 <SDCARD_WriteBegin+0x18>
    SDCARD_Unselect();
 8005496:	f7ff fe81 	bl	800519c <SDCARD_Unselect>
    return 0;
 800549a:	4620      	mov	r0, r4
 800549c:	e7d8      	b.n	8005450 <SDCARD_WriteBegin+0x18>
 800549e:	bf00      	nop
 80054a0:	200008bc 	.word	0x200008bc

080054a4 <SDCARD_WriteData>:

int SDCARD_WriteData(const uint8_t* buff)
{
 80054a4:	b513      	push	{r0, r1, r4, lr}
 80054a6:	4604      	mov	r4, r0
    SDCARD_Select();
 80054a8:	f7ff fe08 	bl	80050bc <SDCARD_Select>

    uint8_t dataToken = DATA_TOKEN_CMD25;
 80054ac:	23fc      	movs	r3, #252	; 0xfc
 80054ae:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8_t crc[2] = { 0xFF, 0xFF };
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <SDCARD_WriteData+0x80>)
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80054b4:	481c      	ldr	r0, [pc, #112]	; (8005528 <SDCARD_WriteData+0x84>)
    uint8_t crc[2] = { 0xFF, 0xFF };
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &dataToken, sizeof(dataToken), HAL_MAX_DELAY);
 80054bc:	2201      	movs	r2, #1
 80054be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054c2:	f10d 0102 	add.w	r1, sp, #2
 80054c6:	f7fc fd1e 	bl	8001f06 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, (uint8_t*)buff, 512, HAL_MAX_DELAY);
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d2:	4621      	mov	r1, r4
 80054d4:	4814      	ldr	r0, [pc, #80]	; (8005528 <SDCARD_WriteData+0x84>)
 80054d6:	f7fc fd16 	bl	8001f06 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, crc, sizeof(crc), HAL_MAX_DELAY);
 80054da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054de:	2202      	movs	r2, #2
 80054e0:	a901      	add	r1, sp, #4
 80054e2:	4811      	ldr	r0, [pc, #68]	; (8005528 <SDCARD_WriteData+0x84>)
 80054e4:	f7fc fd0f 	bl	8001f06 <HAL_SPI_Transmit>
            010 - Data accepted
            101 - Data rejected due to CRC error
            110 - Data rejected due to write error
    */
    uint8_t dataResp;
    SDCARD_ReadBytes(&dataResp, sizeof(dataResp));
 80054e8:	2101      	movs	r1, #1
 80054ea:	f10d 0003 	add.w	r0, sp, #3
 80054ee:	f7ff fe05 	bl	80050fc <SDCARD_ReadBytes>

    if((dataResp & 0x1F) != 0x05) // data rejected
 80054f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d005      	beq.n	800550a <SDCARD_WriteData+0x66>
    {
        SDCARD_Unselect();
 80054fe:	f7ff fe4d 	bl	800519c <SDCARD_Unselect>
        return -1;
 8005502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return -2;
    }

    SDCARD_Unselect();
    return 0;
}
 8005506:	b002      	add	sp, #8
 8005508:	bd10      	pop	{r4, pc}
    if(SDCARD_WaitNotBusy() < 0)
 800550a:	f7ff fe15 	bl	8005138 <SDCARD_WaitNotBusy>
 800550e:	2800      	cmp	r0, #0
 8005510:	da04      	bge.n	800551c <SDCARD_WriteData+0x78>
        SDCARD_Unselect();
 8005512:	f7ff fe43 	bl	800519c <SDCARD_Unselect>
        return -2;
 8005516:	f06f 0001 	mvn.w	r0, #1
 800551a:	e7f4      	b.n	8005506 <SDCARD_WriteData+0x62>
    SDCARD_Unselect();
 800551c:	f7ff fe3e 	bl	800519c <SDCARD_Unselect>
    return 0;
 8005520:	2000      	movs	r0, #0
 8005522:	e7f0      	b.n	8005506 <SDCARD_WriteData+0x62>
 8005524:	08006958 	.word	0x08006958
 8005528:	200008bc 	.word	0x200008bc

0800552c <SDCARD_WriteEnd>:

int SDCARD_WriteEnd()
{
 800552c:	b507      	push	{r0, r1, r2, lr}
    SDCARD_Select();
 800552e:	f7ff fdc5 	bl	80050bc <SDCARD_Select>

    uint8_t stopTran = 0xFD; // stop transaction token for CMD25
 8005532:	a902      	add	r1, sp, #8
 8005534:	23fd      	movs	r3, #253	; 0xfd
 8005536:	f801 3d02 	strb.w	r3, [r1, #-2]!
    HAL_SPI_Transmit(&SDCARD_SPI_PORT, &stopTran, sizeof(stopTran), HAL_MAX_DELAY);
 800553a:	2201      	movs	r2, #1
 800553c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005540:	480b      	ldr	r0, [pc, #44]	; (8005570 <SDCARD_WriteEnd+0x44>)
 8005542:	f7fc fce0 	bl	8001f06 <HAL_SPI_Transmit>

    // skip one byte before readyng "busy"
    // this is required by the spec and is necessary for some real SD-cards!
    uint8_t skipByte;
    SDCARD_ReadBytes(&skipByte, sizeof(skipByte));
 8005546:	2101      	movs	r1, #1
 8005548:	f10d 0007 	add.w	r0, sp, #7
 800554c:	f7ff fdd6 	bl	80050fc <SDCARD_ReadBytes>

    if(SDCARD_WaitNotBusy() < 0)
 8005550:	f7ff fdf2 	bl	8005138 <SDCARD_WaitNotBusy>
 8005554:	2800      	cmp	r0, #0
 8005556:	da06      	bge.n	8005566 <SDCARD_WriteEnd+0x3a>
    {
        SDCARD_Unselect();
 8005558:	f7ff fe20 	bl	800519c <SDCARD_Unselect>
        return -1;
 800555c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    SDCARD_Unselect();
    return 0;
}
 8005560:	b003      	add	sp, #12
 8005562:	f85d fb04 	ldr.w	pc, [sp], #4
    SDCARD_Unselect();
 8005566:	f7ff fe19 	bl	800519c <SDCARD_Unselect>
    return 0;
 800556a:	2000      	movs	r0, #0
 800556c:	e7f8      	b.n	8005560 <SDCARD_WriteEnd+0x34>
 800556e:	bf00      	nop
 8005570:	200008bc 	.word	0x200008bc

08005574 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005574:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <HAL_MspInit+0x2c>)
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	619a      	str	r2, [r3, #24]
 800557e:	699a      	ldr	r2, [r3, #24]
{
 8005580:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005582:	f002 0201 	and.w	r2, r2, #1
 8005586:	9200      	str	r2, [sp, #0]
 8005588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005590:	61da      	str	r2, [r3, #28]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800559c:	b002      	add	sp, #8
 800559e:	4770      	bx	lr
 80055a0:	40021000 	.word	0x40021000

080055a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4604      	mov	r4, r0
 80055a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055aa:	2214      	movs	r2, #20
 80055ac:	2100      	movs	r1, #0
 80055ae:	a803      	add	r0, sp, #12
 80055b0:	f000 fd48 	bl	8006044 <memset>
  if(hspi->Instance==SPI2)
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_SPI_MspInit+0x88>)
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d135      	bne.n	8005628 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055bc:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c0:	2602      	movs	r6, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055c2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055c4:	481a      	ldr	r0, [pc, #104]	; (8005630 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ca:	61da      	str	r2, [r3, #28]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80055d2:	9200      	str	r2, [sp, #0]
 80055d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055dc:	615a      	str	r2, [r3, #20]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80055e4:	9201      	str	r2, [sp, #4]
 80055e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80055ee:	615a      	str	r2, [r3, #20]
 80055f0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055fc:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055fe:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005602:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005604:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005606:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005608:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800560a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800560c:	f7fa ff20 	bl	8000450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005610:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005616:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005618:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800561a:	4806      	ldr	r0, [pc, #24]	; (8005634 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005620:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005622:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005624:	f7fa ff14 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005628:	b008      	add	sp, #32
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	40003800 	.word	0x40003800
 8005630:	48001400 	.word	0x48001400
 8005634:	48000400 	.word	0x48000400

08005638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005638:	b510      	push	{r4, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563e:	2214      	movs	r2, #20
 8005640:	2100      	movs	r1, #0
 8005642:	a803      	add	r0, sp, #12
 8005644:	f000 fcfe 	bl	8006044 <memset>
  if(huart->Instance==USART1)
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <HAL_UART_MspInit+0x6c>)
 800564c:	429a      	cmp	r2, r3
 800564e:	d127      	bne.n	80056a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005650:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005654:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 8005656:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005658:	4813      	ldr	r0, [pc, #76]	; (80056a8 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800565a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565e:	619a      	str	r2, [r3, #24]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005666:	9201      	str	r2, [sp, #4]
 8005668:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005670:	615a      	str	r2, [r3, #20]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800567c:	2330      	movs	r3, #48	; 0x30
 800567e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005680:	2302      	movs	r3, #2
 8005682:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005684:	2303      	movs	r3, #3
 8005686:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005688:	2307      	movs	r3, #7
 800568a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800568c:	f7fa fee0 	bl	8000450 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2025      	movs	r0, #37	; 0x25
 8005694:	4611      	mov	r1, r2
 8005696:	f7fa fe61 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800569a:	2025      	movs	r0, #37	; 0x25
 800569c:	f7fa fe92 	bl	80003c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80056a0:	b008      	add	sp, #32
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	40013800 	.word	0x40013800
 80056a8:	48000800 	.word	0x48000800

080056ac <NMI_Handler>:
 80056ac:	4770      	bx	lr

080056ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ae:	e7fe      	b.n	80056ae <HardFault_Handler>

080056b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056b0:	e7fe      	b.n	80056b0 <MemManage_Handler>

080056b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056b2:	e7fe      	b.n	80056b2 <BusFault_Handler>

080056b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056b4:	e7fe      	b.n	80056b4 <UsageFault_Handler>

080056b6 <SVC_Handler>:
 80056b6:	4770      	bx	lr

080056b8 <DebugMon_Handler>:
 80056b8:	4770      	bx	lr

080056ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056ba:	4770      	bx	lr

080056bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056bc:	f7fa be16 	b.w	80002ec <HAL_IncTick>

080056c0 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 80056c2:	f7fb bb77 	b.w	8000db4 <HAL_PCD_IRQHandler>
 80056c6:	bf00      	nop
 80056c8:	20001388 	.word	0x20001388

080056cc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <USART1_IRQHandler+0x8>)
 80056ce:	f7fd b917 	b.w	8002900 <HAL_UART_IRQHandler>
 80056d2:	bf00      	nop
 80056d4:	20000920 	.word	0x20000920

080056d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d8:	4915      	ldr	r1, [pc, #84]	; (8005730 <SystemInit+0x58>)
 80056da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80056de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80056e6:	4b13      	ldr	r3, [pc, #76]	; (8005734 <SystemInit+0x5c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80056f0:	6858      	ldr	r0, [r3, #4]
 80056f2:	4a11      	ldr	r2, [pc, #68]	; (8005738 <SystemInit+0x60>)
 80056f4:	4002      	ands	r2, r0
 80056f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80056fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005702:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800570a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005712:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	f022 020f 	bic.w	r2, r2, #15
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800571c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800571e:	4a07      	ldr	r2, [pc, #28]	; (800573c <SystemInit+0x64>)
 8005720:	4002      	ands	r2, r0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005724:	2200      	movs	r2, #0
 8005726:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	4770      	bx	lr
 8005730:	e000ed00 	.word	0xe000ed00
 8005734:	40021000 	.word	0x40021000
 8005738:	f87fc00c 	.word	0xf87fc00c
 800573c:	ff00fccc 	.word	0xff00fccc

08005740 <on_reset>:
  }
}

////////////////////////////// on_reset //////////////////////////////////////
void on_reset()
{
 8005740:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_SET);
 8005742:	2201      	movs	r2, #1
 8005744:	2140      	movs	r1, #64	; 0x40
 8005746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800574a:	f7fa ff43 	bl	80005d4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800574e:	2032      	movs	r0, #50	; 0x32
 8005750:	f7fa fdde 	bl	8000310 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_RESET);
 8005754:	2200      	movs	r2, #0
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 800575c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(GPIOA, RESET_PIN_Pin, GPIO_PIN_RESET);
 8005760:	f7fa bf38 	b.w	80005d4 <HAL_GPIO_WritePin>

08005764 <on_off_boot>:

////////////////////////////// on_off_boot ///////////////////////////////////
void on_off_boot(uint8_t state)
{
  HAL_GPIO_WritePin(GPIOA, BOOT_PIN_Pin, state);
 8005764:	4602      	mov	r2, r0
 8005766:	2120      	movs	r1, #32
 8005768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800576c:	f7fa bf32 	b.w	80005d4 <HAL_GPIO_WritePin>

08005770 <boot_off_and_reset>:
}

////////////////////////////// on_off_boot ///////////////////////////////////
void boot_off_and_reset()
{
 8005770:	b508      	push	{r3, lr}
  on_off_boot(0);
 8005772:	2000      	movs	r0, #0
 8005774:	f7ff fff6 	bl	8005764 <on_off_boot>
  HAL_Delay(500);
 8005778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800577c:	f7fa fdc8 	bl	8000310 <HAL_Delay>
  on_reset();
 8005780:	f7ff ffde 	bl	8005740 <on_reset>
  CDC_Transmit_FS((uint8_t*)"Boot off and reset\r\n", strlen("Boot off and reset\r\n"));
 8005784:	2114      	movs	r1, #20
 8005786:	4802      	ldr	r0, [pc, #8]	; (8005790 <boot_off_and_reset+0x20>)
}
 8005788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CDC_Transmit_FS((uint8_t*)"Boot off and reset\r\n", strlen("Boot off and reset\r\n"));
 800578c:	f000 ba2a 	b.w	8005be4 <CDC_Transmit_FS>
 8005790:	08006cbf 	.word	0x08006cbf

08005794 <ack_byte>:
  if(ack_byte() == 0) return 0;
  else return 1;
}

uint8_t ack_byte()
{
 8005794:	b513      	push	{r0, r1, r4, lr}
	uint8_t ack_buff = 0;
 8005796:	a902      	add	r1, sp, #8
 8005798:	2300      	movs	r3, #0
 800579a:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&ack_buff, 1);
 800579e:	2201      	movs	r2, #1
 80057a0:	480a      	ldr	r0, [pc, #40]	; (80057cc <ack_byte+0x38>)
 80057a2:	f7fc fda7 	bl	80022f4 <HAL_UART_Receive_IT>
 80057a6:	f44f 74fa 	mov.w	r4, #500	; 0x1f4

	for(uint16_t i = 0; i < 500; i++)
	{
	  if(ack_buff == 'y') return 0;
 80057aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057ae:	2b79      	cmp	r3, #121	; 0x79
 80057b0:	d009      	beq.n	80057c6 <ack_byte+0x32>
 80057b2:	3c01      	subs	r4, #1
	  HAL_Delay(1);
 80057b4:	2001      	movs	r0, #1
 80057b6:	b2a4      	uxth	r4, r4
 80057b8:	f7fa fdaa 	bl	8000310 <HAL_Delay>
	for(uint16_t i = 0; i < 500; i++)
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d1f4      	bne.n	80057aa <ack_byte+0x16>
	}

	return 1;
 80057c0:	2001      	movs	r0, #1
}
 80057c2:	b002      	add	sp, #8
 80057c4:	bd10      	pop	{r4, pc}
	  if(ack_buff == 'y') return 0;
 80057c6:	2000      	movs	r0, #0
 80057c8:	e7fb      	b.n	80057c2 <ack_byte+0x2e>
 80057ca:	bf00      	nop
 80057cc:	20000920 	.word	0x20000920

080057d0 <entr_bootloader>:
{
 80057d0:	b507      	push	{r0, r1, r2, lr}
  on_off_boot(1); // подтягиваем BOOT_0 к плюсу
 80057d2:	2001      	movs	r0, #1
 80057d4:	f7ff ffc6 	bl	8005764 <on_off_boot>
  HAL_Delay(500);
 80057d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057dc:	f7fa fd98 	bl	8000310 <HAL_Delay>
  on_reset(); // нажимаем ресет
 80057e0:	f7ff ffae 	bl	8005740 <on_reset>
  HAL_Delay(200);
 80057e4:	20c8      	movs	r0, #200	; 0xc8
 80057e6:	f7fa fd93 	bl	8000310 <HAL_Delay>
  uint8_t array[1] = {0x7F};
 80057ea:	a902      	add	r1, sp, #8
 80057ec:	237f      	movs	r3, #127	; 0x7f
 80057ee:	f801 3d04 	strb.w	r3, [r1, #-4]!
  HAL_UART_Transmit(&huart1, (uint8_t*)array, 1, 1000); // первый запрос (для определения скорости)
 80057f2:	2201      	movs	r2, #1
 80057f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057f8:	4807      	ldr	r0, [pc, #28]	; (8005818 <entr_bootloader+0x48>)
 80057fa:	f7fc ff52 	bl	80026a2 <HAL_UART_Transmit>
  if(ack_byte() == 0)
 80057fe:	f7ff ffc9 	bl	8005794 <ack_byte>
 8005802:	b930      	cbnz	r0, 8005812 <entr_bootloader+0x42>
	  CDC_Transmit_FS((uint8_t*)"Bootloader - OK\r\n", strlen("Bootloader - OK\r\n"));
 8005804:	4805      	ldr	r0, [pc, #20]	; (800581c <entr_bootloader+0x4c>)
 8005806:	2111      	movs	r1, #17
	  CDC_Transmit_FS((uint8_t*)"Bootloader - ERROR\r\n", strlen("Bootloader - ERROR\r\n"));
 8005808:	f000 f9ec 	bl	8005be4 <CDC_Transmit_FS>
}
 800580c:	b003      	add	sp, #12
 800580e:	f85d fb04 	ldr.w	pc, [sp], #4
	  CDC_Transmit_FS((uint8_t*)"Bootloader - ERROR\r\n", strlen("Bootloader - ERROR\r\n"));
 8005812:	2114      	movs	r1, #20
 8005814:	4802      	ldr	r0, [pc, #8]	; (8005820 <entr_bootloader+0x50>)
 8005816:	e7f7      	b.n	8005808 <entr_bootloader+0x38>
 8005818:	20000920 	.word	0x20000920
 800581c:	08006cd4 	.word	0x08006cd4
 8005820:	08006ce6 	.word	0x08006ce6

08005824 <send_cmd>:
{
 8005824:	b508      	push	{r3, lr}
  HAL_UART_Transmit(&huart1, (uint8_t*)cmd_array, 2, 1000);
 8005826:	4601      	mov	r1, r0
 8005828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800582c:	2202      	movs	r2, #2
 800582e:	4804      	ldr	r0, [pc, #16]	; (8005840 <send_cmd+0x1c>)
 8005830:	f7fc ff37 	bl	80026a2 <HAL_UART_Transmit>
  if(ack_byte() == 0) return 0;
 8005834:	f7ff ffae 	bl	8005794 <ack_byte>
}
 8005838:	3000      	adds	r0, #0
 800583a:	bf18      	it	ne
 800583c:	2001      	movne	r0, #1
 800583e:	bd08      	pop	{r3, pc}
 8005840:	20000920 	.word	0x20000920

08005844 <erase_memory>:
{
 8005844:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_array[2] = {0x43, 0xBC}; // команда на стирание
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <erase_memory+0x48>)
  if(send_cmd(cmd_array) == 0)
 8005848:	4668      	mov	r0, sp
  uint8_t cmd_array[2] = {0x43, 0xBC}; // команда на стирание
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f8ad 3000 	strh.w	r3, [sp]
  if(send_cmd(cmd_array) == 0)
 8005850:	f7ff ffe8 	bl	8005824 <send_cmd>
 8005854:	b9b0      	cbnz	r0, 8005884 <erase_memory+0x40>
    uint8_t cmd_array[2] = {0xFF, 0x00}; // код стирания (полное)
 8005856:	23ff      	movs	r3, #255	; 0xff
 8005858:	f88d 0005 	strb.w	r0, [sp, #5]
    if(send_cmd(cmd_array) == 0)
 800585c:	a801      	add	r0, sp, #4
    uint8_t cmd_array[2] = {0xFF, 0x00}; // код стирания (полное)
 800585e:	f88d 3004 	strb.w	r3, [sp, #4]
    if(send_cmd(cmd_array) == 0)
 8005862:	f7ff ffdf 	bl	8005824 <send_cmd>
 8005866:	4604      	mov	r4, r0
 8005868:	b930      	cbnz	r0, 8005878 <erase_memory+0x34>
      CDC_Transmit_FS((uint8_t*)"Erase Memory - OK\r\n", strlen("Erase Memory - OK\r\n"));
 800586a:	2113      	movs	r1, #19
 800586c:	4808      	ldr	r0, [pc, #32]	; (8005890 <erase_memory+0x4c>)
 800586e:	f000 f9b9 	bl	8005be4 <CDC_Transmit_FS>
}
 8005872:	4620      	mov	r0, r4
 8005874:	b002      	add	sp, #8
 8005876:	bd10      	pop	{r4, pc}
    else CDC_Transmit_FS((uint8_t*)"Cmd cod Erase Memory - ERROR\r\n", strlen("Cmd cod Erase Memory - ERROR\r\n"));
 8005878:	4806      	ldr	r0, [pc, #24]	; (8005894 <erase_memory+0x50>)
 800587a:	211e      	movs	r1, #30
  else CDC_Transmit_FS((uint8_t*)"Cmd start Erase Memory - ERROR\r\n", strlen("Cmd start Erase Memory - ERROR\r\n"));
 800587c:	f000 f9b2 	bl	8005be4 <CDC_Transmit_FS>
  return 1;
 8005880:	2401      	movs	r4, #1
 8005882:	e7f6      	b.n	8005872 <erase_memory+0x2e>
  else CDC_Transmit_FS((uint8_t*)"Cmd start Erase Memory - ERROR\r\n", strlen("Cmd start Erase Memory - ERROR\r\n"));
 8005884:	2120      	movs	r1, #32
 8005886:	4804      	ldr	r0, [pc, #16]	; (8005898 <erase_memory+0x54>)
 8005888:	e7f8      	b.n	800587c <erase_memory+0x38>
 800588a:	bf00      	nop
 800588c:	0800695a 	.word	0x0800695a
 8005890:	08006cfb 	.word	0x08006cfb
 8005894:	08006d0f 	.word	0x08006d0f
 8005898:	08006d2e 	.word	0x08006d2e

0800589c <get_id>:
{
 800589c:	b530      	push	{r4, r5, lr}
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 800589e:	4b1f      	ldr	r3, [pc, #124]	; (800591c <get_id+0x80>)
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 80058a0:	481f      	ldr	r0, [pc, #124]	; (8005920 <get_id+0x84>)
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 80058a2:	881b      	ldrh	r3, [r3, #0]
{
 80058a4:	b089      	sub	sp, #36	; 0x24
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 80058a6:	2205      	movs	r2, #5
 80058a8:	a902      	add	r1, sp, #8
    uint8_t id[5] = {0,};
 80058aa:	2500      	movs	r5, #0
    uint8_t cmd_array[2] = {0x02, 0xFD}; // код Get ID
 80058ac:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint8_t id[5] = {0,};
 80058b0:	9502      	str	r5, [sp, #8]
 80058b2:	f88d 500c 	strb.w	r5, [sp, #12]
    HAL_UART_Receive_IT(&huart1, (uint8_t*)id, 5);
 80058b6:	f7fc fd1d 	bl	80022f4 <HAL_UART_Receive_IT>
    send_cmd(cmd_array);
 80058ba:	a801      	add	r0, sp, #4
 80058bc:	f7ff ffb2 	bl	8005824 <send_cmd>
    HAL_Delay(10);
 80058c0:	200a      	movs	r0, #10
 80058c2:	f7fa fd25 	bl	8000310 <HAL_Delay>
    if(id[0] == 'y')
 80058c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80058ca:	2b79      	cmp	r3, #121	; 0x79
 80058cc:	d122      	bne.n	8005914 <get_id+0x78>
		if(id[4] == 'y')
 80058ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80058d2:	2b79      	cmp	r3, #121	; 0x79
 80058d4:	d11b      	bne.n	800590e <get_id+0x72>
			stm_id = (stm_id << 8) | id[3];
 80058d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80058da:	f89d 400b 	ldrb.w	r4, [sp, #11]
			char str[16] = {0,};
 80058de:	2210      	movs	r2, #16
 80058e0:	4629      	mov	r1, r5
 80058e2:	eb0d 0002 	add.w	r0, sp, r2
			stm_id = (stm_id << 8) | id[3];
 80058e6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			char str[16] = {0,};
 80058ea:	f000 fbab 	bl	8006044 <memset>
			snprintf(str, 16, "ID_chip: 0x%X\r\n", stm_id);
 80058ee:	2110      	movs	r1, #16
 80058f0:	eb0d 0001 	add.w	r0, sp, r1
 80058f4:	4623      	mov	r3, r4
 80058f6:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <get_id+0x88>)
 80058f8:	f000 fbac 	bl	8006054 <sniprintf>
			CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80058fc:	a804      	add	r0, sp, #16
 80058fe:	f7fa fc67 	bl	80001d0 <strlen>
 8005902:	b281      	uxth	r1, r0
 8005904:	a804      	add	r0, sp, #16
    else CDC_Transmit_FS((uint8_t*)"Cmd Get ID - ERROR\r\n", strlen("Cmd Get ID - ERROR\r\n"));
 8005906:	f000 f96d 	bl	8005be4 <CDC_Transmit_FS>
}
 800590a:	b009      	add	sp, #36	; 0x24
 800590c:	bd30      	pop	{r4, r5, pc}
		else CDC_Transmit_FS((uint8_t*)"Not ID - ERROR\r\n", strlen("Not ID - ERROR\r\n"));
 800590e:	2110      	movs	r1, #16
 8005910:	4805      	ldr	r0, [pc, #20]	; (8005928 <get_id+0x8c>)
 8005912:	e7f8      	b.n	8005906 <get_id+0x6a>
    else CDC_Transmit_FS((uint8_t*)"Cmd Get ID - ERROR\r\n", strlen("Cmd Get ID - ERROR\r\n"));
 8005914:	2114      	movs	r1, #20
 8005916:	4805      	ldr	r0, [pc, #20]	; (800592c <get_id+0x90>)
 8005918:	e7f5      	b.n	8005906 <get_id+0x6a>
 800591a:	bf00      	nop
 800591c:	0800695c 	.word	0x0800695c
 8005920:	20000920 	.word	0x20000920
 8005924:	08006d4f 	.word	0x08006d4f
 8005928:	08006d5f 	.word	0x08006d5f
 800592c:	08006d70 	.word	0x08006d70

08005930 <send_adress>:
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
}

///////////////////////////// send_adress ////////////////////////////////////
uint8_t send_adress(uint32_t addr)
{
 8005930:	b507      	push	{r0, r1, r2, lr}
  uint8_t buf[5] = {0,};
  buf[0] = addr >> 24;
  buf[1] = (addr >> 16) & 0xFF;
 8005932:	f3c0 4107 	ubfx	r1, r0, #16, #8
  buf[0] = addr >> 24;
 8005936:	0e02      	lsrs	r2, r0, #24
  buf[2] = (addr >> 8) & 0xFF;
 8005938:	f3c0 2307 	ubfx	r3, r0, #8, #8
  buf[0] = addr >> 24;
 800593c:	f88d 2000 	strb.w	r2, [sp]
  buf[3] = addr & 0xFF;
 8005940:	b2c0      	uxtb	r0, r0
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8005942:	404a      	eors	r2, r1
  buf[3] = addr & 0xFF;
 8005944:	f88d 0003 	strb.w	r0, [sp, #3]
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8005948:	4050      	eors	r0, r2
 800594a:	4058      	eors	r0, r3
  buf[1] = (addr >> 16) & 0xFF;
 800594c:	f88d 1001 	strb.w	r1, [sp, #1]
  buf[2] = (addr >> 8) & 0xFF;
 8005950:	f88d 3002 	strb.w	r3, [sp, #2]
  buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8005954:	f88d 0004 	strb.w	r0, [sp, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)buf, 5, 1000);
 8005958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800595c:	2205      	movs	r2, #5
 800595e:	4669      	mov	r1, sp
 8005960:	4805      	ldr	r0, [pc, #20]	; (8005978 <send_adress+0x48>)
 8005962:	f7fc fe9e 	bl	80026a2 <HAL_UART_Transmit>

  if(ack_byte() == 0) return 0;
 8005966:	f7ff ff15 	bl	8005794 <ack_byte>
  else return 1;
}
 800596a:	3000      	adds	r0, #0
 800596c:	bf18      	it	ne
 800596e:	2001      	movne	r0, #1
 8005970:	b003      	add	sp, #12
 8005972:	f85d fb04 	ldr.w	pc, [sp], #4
 8005976:	bf00      	nop
 8005978:	20000920 	.word	0x20000920

0800597c <go_prog>:
{
 800597c:	b507      	push	{r0, r1, r2, lr}
  uint8_t cmd_array[2] = {0x21, 0xDE}; // код запуска программы
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <go_prog+0x40>)
  if(send_cmd(cmd_array) == 0)
 8005980:	a801      	add	r0, sp, #4
  uint8_t cmd_array[2] = {0x21, 0xDE}; // код запуска программы
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(send_cmd(cmd_array) == 0)
 8005988:	f7ff ff4c 	bl	8005824 <send_cmd>
 800598c:	b990      	cbnz	r0, 80059b4 <go_prog+0x38>
    CDC_Transmit_FS((uint8_t*)"Cmd start programm - OK\r\n", strlen("Cmd start programm - OK\r\n"));
 800598e:	2119      	movs	r1, #25
 8005990:	480b      	ldr	r0, [pc, #44]	; (80059c0 <go_prog+0x44>)
 8005992:	f000 f927 	bl	8005be4 <CDC_Transmit_FS>
    uint8_t ret_adr = send_adress(WRITE_ADDR);
 8005996:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800599a:	f7ff ffc9 	bl	8005930 <send_adress>
    if(ret_adr == 0)
 800599e:	b930      	cbnz	r0, 80059ae <go_prog+0x32>
      CDC_Transmit_FS((uint8_t*)"Start programm - OK\r\n", strlen("Start programm - OK\r\n"));
 80059a0:	4808      	ldr	r0, [pc, #32]	; (80059c4 <go_prog+0x48>)
 80059a2:	2115      	movs	r1, #21
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
 80059a4:	f000 f91e 	bl	8005be4 <CDC_Transmit_FS>
}
 80059a8:	b003      	add	sp, #12
 80059aa:	f85d fb04 	ldr.w	pc, [sp], #4
    else CDC_Transmit_FS((uint8_t*)"Address start programm - ERROR\r\n", strlen("Address start programm - ERROR\r\n"));
 80059ae:	2120      	movs	r1, #32
 80059b0:	4805      	ldr	r0, [pc, #20]	; (80059c8 <go_prog+0x4c>)
 80059b2:	e7f7      	b.n	80059a4 <go_prog+0x28>
  else CDC_Transmit_FS((uint8_t*)"Cmd start programm - ERROR\r\n", strlen("Cmd start programm - ERROR\r\n"));
 80059b4:	211c      	movs	r1, #28
 80059b6:	4805      	ldr	r0, [pc, #20]	; (80059cc <go_prog+0x50>)
 80059b8:	e7f4      	b.n	80059a4 <go_prog+0x28>
 80059ba:	bf00      	nop
 80059bc:	0800695e 	.word	0x0800695e
 80059c0:	08006d85 	.word	0x08006d85
 80059c4:	08006d9f 	.word	0x08006d9f
 80059c8:	08006db5 	.word	0x08006db5
 80059cc:	08006dd6 	.word	0x08006dd6

080059d0 <write_memory>:


//////////////////////////// write_memory /////////////////////////////////////
void write_memory()
{
 80059d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059d4:	f2ad 6d8c 	subw	sp, sp, #1676	; 0x68c
  FATFS fs;
  FRESULT res;
  res = f_mount(&fs, "", 1);
 80059d8:	2201      	movs	r2, #1
 80059da:	4954      	ldr	r1, [pc, #336]	; (8005b2c <write_memory+0x15c>)
 80059dc:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 80059e0:	f7fe fb66 	bl	80040b0 <f_mount>

  if(res != FR_OK)
 80059e4:	b120      	cbz	r0, 80059f0 <write_memory+0x20>
  {
	  CDC_Transmit_FS((uint8_t*)"Mount failed\r\n", strlen("Mount failed\r\n"));
 80059e6:	4852      	ldr	r0, [pc, #328]	; (8005b30 <write_memory+0x160>)
 80059e8:	210e      	movs	r1, #14

       f_close(&df);
     }
     else CDC_Transmit_FS((uint8_t*)"Not file - ERROR\r\n", strlen("Not file - ERROR\r\n"));
  }
  else CDC_Transmit_FS((uint8_t*)"Not erase Write Memory - ERROR\r\n", strlen("Not erase Write Memory - ERROR\r\n"));
 80059ea:	f000 f8fb 	bl	8005be4 <CDC_Transmit_FS>
 80059ee:	e08d      	b.n	8005b0c <write_memory+0x13c>
  if(erase_memory() == 0)
 80059f0:	f7ff ff28 	bl	8005844 <erase_memory>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f040 8096 	bne.w	8005b26 <write_memory+0x156>
     res = f_open(&df, FIRMWARE, FA_READ);
 80059fa:	2201      	movs	r2, #1
 80059fc:	494d      	ldr	r1, [pc, #308]	; (8005b34 <write_memory+0x164>)
 80059fe:	a88b      	add	r0, sp, #556	; 0x22c
 8005a00:	f7fe fb8c 	bl	800411c <f_open>
     if(res == FR_OK)
 8005a04:	4605      	mov	r5, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f040 808a 	bne.w	8005b20 <write_memory+0x150>
       uint32_t size_file = f_size(&df);
 8005a0c:	f8dd 7438 	ldr.w	r7, [sp, #1080]	; 0x438
             HAL_UART_Transmit(&huart1, (uint8_t*)buf, aligned_len + 2, 3000);
 8005a10:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005b58 <write_memory+0x188>
       char str[32] = {0,};
 8005a14:	4601      	mov	r1, r0
 8005a16:	2220      	movs	r2, #32
 8005a18:	a802      	add	r0, sp, #8
 8005a1a:	f000 fb13 	bl	8006044 <memset>
       snprintf(str, 32, "Size file: %lu\r\n", size_file);
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4a45      	ldr	r2, [pc, #276]	; (8005b38 <write_memory+0x168>)
 8005a22:	2120      	movs	r1, #32
 8005a24:	a802      	add	r0, sp, #8
 8005a26:	f000 fb15 	bl	8006054 <sniprintf>
       CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8005a2a:	a802      	add	r0, sp, #8
 8005a2c:	f7fa fbd0 	bl	80001d0 <strlen>
 8005a30:	b281      	uxth	r1, r0
 8005a32:	a802      	add	r0, sp, #8
 8005a34:	f000 f8d6 	bl	8005be4 <CDC_Transmit_FS>
       uint8_t cmd_array[2] = {0x31, 0xCE}; // код Write Memory
 8005a38:	4b40      	ldr	r3, [pc, #256]	; (8005b3c <write_memory+0x16c>)
       unsigned int len = 0;
 8005a3a:	9501      	str	r5, [sp, #4]
       uint8_t cmd_array[2] = {0x31, 0xCE}; // код Write Memory
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	f8ad 3000 	strh.w	r3, [sp]
         if(send_cmd(cmd_array) == 0)
 8005a42:	4668      	mov	r0, sp
 8005a44:	f7ff feee 	bl	8005824 <send_cmd>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d166      	bne.n	8005b1a <write_memory+0x14a>
           uint8_t ret_adr = send_adress(WRITE_ADDR + count_addr);
 8005a4c:	f105 6000 	add.w	r0, r5, #134217728	; 0x8000000
 8005a50:	f7ff ff6e 	bl	8005930 <send_adress>
           count_addr = count_addr + SIZE_WRITE;
 8005a54:	f505 7580 	add.w	r5, r5, #256	; 0x100
           if(ret_adr == 0)
 8005a58:	4604      	mov	r4, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d15a      	bne.n	8005b14 <write_memory+0x144>
             uint8_t write_buff[SIZE_WRITE] = {0,};
 8005a5e:	ae0a      	add	r6, sp, #40	; 0x28
 8005a60:	4601      	mov	r1, r0
 8005a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a66:	4630      	mov	r0, r6
 8005a68:	f000 faec 	bl	8006044 <memset>
             f_read(&df, write_buff, SIZE_WRITE, &len);
 8005a6c:	ab01      	add	r3, sp, #4
 8005a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a72:	4631      	mov	r1, r6
 8005a74:	a88b      	add	r0, sp, #556	; 0x22c
 8005a76:	f7fe fc29 	bl	80042cc <f_read>
             f_lseek(&df, SIZE_WRITE * seek_len);
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	a88b      	add	r0, sp, #556	; 0x22c
 8005a7e:	f7fe fe49 	bl	8004714 <f_lseek>
             aligned_len = (len + 3) & ~3;
 8005a82:	9801      	ldr	r0, [sp, #4]
 8005a84:	b281      	uxth	r1, r0
 8005a86:	1cca      	adds	r2, r1, #3
 8005a88:	f022 0203 	bic.w	r2, r2, #3
 8005a8c:	b292      	uxth	r2, r2
             cs = aligned_len - 1;
 8005a8e:	1e53      	subs	r3, r2, #1
 8005a90:	b2db      	uxtb	r3, r3
             buf[0] = aligned_len - 1;
 8005a92:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
 8005a96:	f104 0c01 	add.w	ip, r4, #1
             for(i = 0; i < len; i++)
 8005a9a:	b2a4      	uxth	r4, r4
 8005a9c:	4284      	cmp	r4, r0
 8005a9e:	d315      	bcc.n	8005acc <write_memory+0xfc>
               buf[i + 1] = 0xFF;
 8005aa0:	20ff      	movs	r0, #255	; 0xff
             for(i = len; i < aligned_len; i++)
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	d31d      	bcc.n	8005ae2 <write_memory+0x112>
             buf[aligned_len + 1] = cs;
 8005aa6:	a94a      	add	r1, sp, #296	; 0x128
 8005aa8:	4411      	add	r1, r2
             HAL_UART_Transmit(&huart1, (uint8_t*)buf, aligned_len + 2, 3000);
 8005aaa:	3202      	adds	r2, #2
             buf[aligned_len + 1] = cs;
 8005aac:	704b      	strb	r3, [r1, #1]
             HAL_UART_Transmit(&huart1, (uint8_t*)buf, aligned_len + 2, 3000);
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ab4:	a94a      	add	r1, sp, #296	; 0x128
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f7fc fdf3 	bl	80026a2 <HAL_UART_Transmit>
             uint8_t ab = ack_byte();
 8005abc:	f7ff fe6a 	bl	8005794 <ack_byte>
             if(ab != 0)
 8005ac0:	b1b8      	cbz	r0, 8005af2 <write_memory+0x122>
               CDC_Transmit_FS((uint8_t*)"Block not Write Memory - ERROR\r\n", strlen("Block not Write Memory - ERROR\r\n"));
 8005ac2:	481f      	ldr	r0, [pc, #124]	; (8005b40 <write_memory+0x170>)
 8005ac4:	2120      	movs	r1, #32
           CDC_Transmit_FS((uint8_t*)"Cmd cod Write Memory - ERROR\r\n", strlen("Cmd cod Write Memory - ERROR\r\n"));
 8005ac6:	f000 f88d 	bl	8005be4 <CDC_Transmit_FS>
           break;
 8005aca:	e01c      	b.n	8005b06 <write_memory+0x136>
               buf[i + 1] = write_buff[i];
 8005acc:	f50d 7994 	add.w	r9, sp, #296	; 0x128
               cs ^= write_buff[i];
 8005ad0:	f816 e004 	ldrb.w	lr, [r6, r4]
               buf[i + 1] = write_buff[i];
 8005ad4:	444c      	add	r4, r9
               cs ^= write_buff[i];
 8005ad6:	ea83 030e 	eor.w	r3, r3, lr
               buf[i + 1] = write_buff[i];
 8005ada:	f884 e001 	strb.w	lr, [r4, #1]
 8005ade:	4664      	mov	r4, ip
 8005ae0:	e7d9      	b.n	8005a96 <write_memory+0xc6>
               buf[i + 1] = 0xFF;
 8005ae2:	ac4a      	add	r4, sp, #296	; 0x128
 8005ae4:	440c      	add	r4, r1
               cs ^= 0xFF;
 8005ae6:	43db      	mvns	r3, r3
             for(i = len; i < aligned_len; i++)
 8005ae8:	3101      	adds	r1, #1
               cs ^= 0xFF;
 8005aea:	b2db      	uxtb	r3, r3
               buf[i + 1] = 0xFF;
 8005aec:	7060      	strb	r0, [r4, #1]
             for(i = len; i < aligned_len; i++)
 8005aee:	b289      	uxth	r1, r1
 8005af0:	e7d7      	b.n	8005aa2 <write_memory+0xd2>
             if(size_file == f_tell(&df))
 8005af2:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 8005af6:	429f      	cmp	r7, r3
 8005af8:	d1a3      	bne.n	8005a42 <write_memory+0x72>
               CDC_Transmit_FS((uint8_t*)"End Write Memory - OK\r\n", strlen("End Write Memory - OK\r\n"));
 8005afa:	2117      	movs	r1, #23
 8005afc:	4811      	ldr	r0, [pc, #68]	; (8005b44 <write_memory+0x174>)
 8005afe:	f000 f871 	bl	8005be4 <CDC_Transmit_FS>
               boot_off_and_reset();
 8005b02:	f7ff fe35 	bl	8005770 <boot_off_and_reset>
       f_close(&df);
 8005b06:	a88b      	add	r0, sp, #556	; 0x22c
 8005b08:	f7fe fdf3 	bl	80046f2 <f_close>
}
 8005b0c:	f20d 6d8c 	addw	sp, sp, #1676	; 0x68c
 8005b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             CDC_Transmit_FS((uint8_t*)"Address Write Memory - ERROR\r\n", strlen("Address Write Memory - ERROR\r\n"));
 8005b14:	211e      	movs	r1, #30
 8005b16:	480c      	ldr	r0, [pc, #48]	; (8005b48 <write_memory+0x178>)
 8005b18:	e7d5      	b.n	8005ac6 <write_memory+0xf6>
           CDC_Transmit_FS((uint8_t*)"Cmd cod Write Memory - ERROR\r\n", strlen("Cmd cod Write Memory - ERROR\r\n"));
 8005b1a:	211e      	movs	r1, #30
 8005b1c:	480b      	ldr	r0, [pc, #44]	; (8005b4c <write_memory+0x17c>)
 8005b1e:	e7d2      	b.n	8005ac6 <write_memory+0xf6>
     else CDC_Transmit_FS((uint8_t*)"Not file - ERROR\r\n", strlen("Not file - ERROR\r\n"));
 8005b20:	2112      	movs	r1, #18
 8005b22:	480b      	ldr	r0, [pc, #44]	; (8005b50 <write_memory+0x180>)
 8005b24:	e761      	b.n	80059ea <write_memory+0x1a>
  else CDC_Transmit_FS((uint8_t*)"Not erase Write Memory - ERROR\r\n", strlen("Not erase Write Memory - ERROR\r\n"));
 8005b26:	2120      	movs	r1, #32
 8005b28:	480a      	ldr	r0, [pc, #40]	; (8005b54 <write_memory+0x184>)
 8005b2a:	e75e      	b.n	80059ea <write_memory+0x1a>
 8005b2c:	08006c82 	.word	0x08006c82
 8005b30:	08006df3 	.word	0x08006df3
 8005b34:	08006e02 	.word	0x08006e02
 8005b38:	08006e0f 	.word	0x08006e0f
 8005b3c:	08006960 	.word	0x08006960
 8005b40:	08006e20 	.word	0x08006e20
 8005b44:	08006e41 	.word	0x08006e41
 8005b48:	08006e59 	.word	0x08006e59
 8005b4c:	08006e78 	.word	0x08006e78
 8005b50:	08006e97 	.word	0x08006e97
 8005b54:	08006eaa 	.word	0x08006eaa
 8005b58:	20000920 	.word	0x20000920

08005b5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005b5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8005b5e:	4c09      	ldr	r4, [pc, #36]	; (8005b84 <MX_USB_DEVICE_Init+0x28>)
 8005b60:	4909      	ldr	r1, [pc, #36]	; (8005b88 <MX_USB_DEVICE_Init+0x2c>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	4620      	mov	r0, r4
 8005b66:	f7fd f885 	bl	8002c74 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8005b6a:	4908      	ldr	r1, [pc, #32]	; (8005b8c <MX_USB_DEVICE_Init+0x30>)
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7fd f896 	bl	8002c9e <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005b72:	4620      	mov	r0, r4
 8005b74:	4906      	ldr	r1, [pc, #24]	; (8005b90 <MX_USB_DEVICE_Init+0x34>)
 8005b76:	f7fd f83e 	bl	8002bf6 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8005b7a:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8005b80:	f7fd b894 	b.w	8002cac <USBD_Start>
 8005b84:	20000994 	.word	0x20000994
 8005b88:	2000012c 	.word	0x2000012c
 8005b8c:	20000008 	.word	0x20000008
 8005b90:	2000011c 	.word	0x2000011c

08005b94 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	4770      	bx	lr

08005b98 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4770      	bx	lr

08005b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005b9c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN 6 */
	USB_Receive_Callback(Buf);

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005b9e:	4c06      	ldr	r4, [pc, #24]	; (8005bb8 <CDC_Receive_FS+0x1c>)
{
 8005ba0:	4605      	mov	r5, r0
	USB_Receive_Callback(Buf);
 8005ba2:	f7ff f833 	bl	8004c0c <USB_Receive_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7fd f833 	bl	8002c14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7fd f84d 	bl	8002c4e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000994 	.word	0x20000994

08005bbc <CDC_Init_FS>:
{
 8005bbc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005bbe:	4c06      	ldr	r4, [pc, #24]	; (8005bd8 <CDC_Init_FS+0x1c>)
 8005bc0:	4906      	ldr	r1, [pc, #24]	; (8005bdc <CDC_Init_FS+0x20>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7fd f81d 	bl	8002c04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005bca:	4905      	ldr	r1, [pc, #20]	; (8005be0 <CDC_Init_FS+0x24>)
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7fd f821 	bl	8002c14 <USBD_CDC_SetRxBuffer>
}
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	bd10      	pop	{r4, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000994 	.word	0x20000994
 8005bdc:	20000fa0 	.word	0x20000fa0
 8005be0:	20000bb8 	.word	0x20000bb8

08005be4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005be4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005be6:	4c09      	ldr	r4, [pc, #36]	; (8005c0c <CDC_Transmit_FS+0x28>)
 8005be8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8005bec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8005bf0:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8005bf2:	b943      	cbnz	r3, 8005c06 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005bf4:	4601      	mov	r1, r0
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7fd f804 	bl	8002c04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005bfc:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005c02:	f7fd b80d 	b.w	8002c20 <USBD_CDC_TransmitPacket>
}
 8005c06:	2001      	movs	r0, #1
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000994 	.word	0x20000994

08005c10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c10:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8005c12:	6802      	ldr	r2, [r0, #0]
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <HAL_PCD_MspInit+0x54>)
 8005c16:	429a      	cmp	r2, r3
{
 8005c18:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB)
 8005c1a:	d121      	bne.n	8005c60 <HAL_PCD_MspInit+0x50>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c20:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c22:	2302      	movs	r3, #2
 8005c24:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c26:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c28:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c2c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005c2e:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005c34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c38:	f7fa fc0a 	bl	8000450 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <HAL_PCD_MspInit+0x58>)
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005c44:	61d9      	str	r1, [r3, #28]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c4c:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8005c4e:	2014      	movs	r0, #20
 8005c50:	4622      	mov	r2, r4
 8005c52:	4621      	mov	r1, r4
    __HAL_RCC_USB_CLK_ENABLE();
 8005c54:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8005c56:	f7fa fb81 	bl	800035c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8005c5a:	2014      	movs	r0, #20
 8005c5c:	f7fa fbb2 	bl	80003c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005c60:	b006      	add	sp, #24
 8005c62:	bd10      	pop	{r4, pc}
 8005c64:	40005c00 	.word	0x40005c00
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005c6c:	f500 715d 	add.w	r1, r0, #884	; 0x374
 8005c70:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005c74:	f7fd b831 	b.w	8002cda <USBD_LL_SetupStage>

08005c78 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005c78:	231c      	movs	r3, #28
 8005c7a:	fb03 0301 	mla	r3, r3, r1, r0
 8005c7e:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005c82:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8005c86:	f7fd b855 	b.w	8002d34 <USBD_LL_DataOutStage>

08005c8a <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005c8a:	231c      	movs	r3, #28
 8005c8c:	fb03 0301 	mla	r3, r3, r1, r0
 8005c90:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c96:	f7fd b87f 	b.w	8002d98 <USBD_LL_DataInStage>

08005c9a <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005c9a:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005c9e:	f7fd b8fb 	b.w	8002e98 <USBD_LL_SOF>

08005ca2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005cac:	f7fd f8e2 	bl	8002e74 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005cb0:	f8d4 03a4 	ldr.w	r0, [r4, #932]	; 0x3a4
}
 8005cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005cb8:	f7fd b8bd 	b.w	8002e36 <USBD_LL_Reset>

08005cbc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005cc0:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005cc4:	f7fd f8d9 	bl	8002e7a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005cc8:	69a3      	ldr	r3, [r4, #24]
 8005cca:	b123      	cbz	r3, 8005cd6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ccc:	4a02      	ldr	r2, [pc, #8]	; (8005cd8 <HAL_PCD_SuspendCallback+0x1c>)
 8005cce:	6913      	ldr	r3, [r2, #16]
 8005cd0:	f043 0306 	orr.w	r3, r3, #6
 8005cd4:	6113      	str	r3, [r2, #16]
 8005cd6:	bd10      	pop	{r4, pc}
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005cdc:	f8d0 03a4 	ldr.w	r0, [r0, #932]	; 0x3a4
 8005ce0:	f7fd b8d4 	b.w	8002e8c <USBD_LL_Resume>

08005ce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ce4:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <USBD_LL_Init+0x7c>)
{
 8005ce8:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005cea:	481e      	ldr	r0, [pc, #120]	; (8005d64 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005cec:	2308      	movs	r3, #8
 8005cee:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_FS.pData = pdev;
 8005cf2:	f8c0 43a4 	str.w	r4, [r0, #932]	; 0x3a4
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005cf6:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005cf8:	2202      	movs	r2, #2
  pdev->pData = &hpcd_USB_FS;
 8005cfa:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005cfe:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8005d00:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005d02:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005d04:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005d06:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005d08:	f7fa fc69 	bl	80005de <HAL_PCD_Init>
 8005d0c:	b108      	cbz	r0, 8005d12 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8005d0e:	f7ff f8a7 	bl	8004e60 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005d12:	2200      	movs	r2, #0
 8005d14:	4611      	mov	r1, r2
 8005d16:	2318      	movs	r3, #24
 8005d18:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005d1c:	f7fb fb49 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005d20:	2358      	movs	r3, #88	; 0x58
 8005d22:	2200      	movs	r2, #0
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005d2a:	f7fb fb42 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005d2e:	23c0      	movs	r3, #192	; 0xc0
 8005d30:	2200      	movs	r2, #0
 8005d32:	2181      	movs	r1, #129	; 0x81
 8005d34:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005d38:	f7fb fb3b 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005d3c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005d40:	2200      	movs	r2, #0
 8005d42:	2101      	movs	r1, #1
 8005d44:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005d48:	f7fb fb33 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d50:	2200      	movs	r2, #0
 8005d52:	2182      	movs	r1, #130	; 0x82
 8005d54:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8005d58:	f7fb fb2b 	bl	80013b2 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	bd10      	pop	{r4, pc}
 8005d60:	40005c00 	.word	0x40005c00
 8005d64:	20001388 	.word	0x20001388

08005d68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005d68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005d6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005d6e:	f7fa fc8a 	bl	8000686 <HAL_PCD_Start>
 8005d72:	2803      	cmp	r0, #3
 8005d74:	bf9a      	itte	ls
 8005d76:	4b02      	ldrls	r3, [pc, #8]	; (8005d80 <USBD_LL_Start+0x18>)
 8005d78:	5c18      	ldrbls	r0, [r3, r0]
 8005d7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005d7c:	bd08      	pop	{r3, pc}
 8005d7e:	bf00      	nop
 8005d80:	08006ecb 	.word	0x08006ecb

08005d84 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005d84:	b510      	push	{r4, lr}
 8005d86:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d88:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	4622      	mov	r2, r4
 8005d90:	f7fa fc96 	bl	80006c0 <HAL_PCD_EP_Open>
 8005d94:	2803      	cmp	r0, #3
 8005d96:	bf9a      	itte	ls
 8005d98:	4b01      	ldrls	r3, [pc, #4]	; (8005da0 <USBD_LL_OpenEP+0x1c>)
 8005d9a:	5c18      	ldrbls	r0, [r3, r0]
 8005d9c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005d9e:	bd10      	pop	{r4, pc}
 8005da0:	08006ecb 	.word	0x08006ecb

08005da4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005da4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005da6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005daa:	f7fa fe21 	bl	80009f0 <HAL_PCD_EP_Close>
 8005dae:	2803      	cmp	r0, #3
 8005db0:	bf9a      	itte	ls
 8005db2:	4b02      	ldrls	r3, [pc, #8]	; (8005dbc <USBD_LL_CloseEP+0x18>)
 8005db4:	5c18      	ldrbls	r0, [r3, r0]
 8005db6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005db8:	bd08      	pop	{r3, pc}
 8005dba:	bf00      	nop
 8005dbc:	08006ecb 	.word	0x08006ecb

08005dc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005dc2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005dc6:	f7fb fa3f 	bl	8001248 <HAL_PCD_EP_SetStall>
 8005dca:	2803      	cmp	r0, #3
 8005dcc:	bf9a      	itte	ls
 8005dce:	4b02      	ldrls	r3, [pc, #8]	; (8005dd8 <USBD_LL_StallEP+0x18>)
 8005dd0:	5c18      	ldrbls	r0, [r3, r0]
 8005dd2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005dd4:	bd08      	pop	{r3, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08006ecb 	.word	0x08006ecb

08005ddc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ddc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005dde:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005de2:	f7fb fa82 	bl	80012ea <HAL_PCD_EP_ClrStall>
 8005de6:	2803      	cmp	r0, #3
 8005de8:	bf9a      	itte	ls
 8005dea:	4b02      	ldrls	r3, [pc, #8]	; (8005df4 <USBD_LL_ClearStallEP+0x18>)
 8005dec:	5c18      	ldrbls	r0, [r3, r0]
 8005dee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005df0:	bd08      	pop	{r3, pc}
 8005df2:	bf00      	nop
 8005df4:	08006ecb 	.word	0x08006ecb

08005df8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005df8:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005dfc:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005e00:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005e04:	bf1b      	ittet	ne
 8005e06:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005e0a:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005e0e:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005e12:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005e16:	bf08      	it	eq
 8005e18:	f891 01ce 	ldrbeq.w	r0, [r1, #462]	; 0x1ce
  }
}
 8005e1c:	4770      	bx	lr
	...

08005e20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e22:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e26:	f7fa fc34 	bl	8000692 <HAL_PCD_SetAddress>
 8005e2a:	2803      	cmp	r0, #3
 8005e2c:	bf9a      	itte	ls
 8005e2e:	4b02      	ldrls	r3, [pc, #8]	; (8005e38 <USBD_LL_SetUSBAddress+0x18>)
 8005e30:	5c18      	ldrbls	r0, [r3, r0]
 8005e32:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005e34:	bd08      	pop	{r3, pc}
 8005e36:	bf00      	nop
 8005e38:	08006ecb 	.word	0x08006ecb

08005e3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005e3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e42:	f7fa ff3b 	bl	8000cbc <HAL_PCD_EP_Transmit>
 8005e46:	2803      	cmp	r0, #3
 8005e48:	bf9a      	itte	ls
 8005e4a:	4b02      	ldrls	r3, [pc, #8]	; (8005e54 <USBD_LL_Transmit+0x18>)
 8005e4c:	5c18      	ldrbls	r0, [r3, r0]
 8005e4e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005e50:	bd08      	pop	{r3, pc}
 8005e52:	bf00      	nop
 8005e54:	08006ecb 	.word	0x08006ecb

08005e58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005e5a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e5e:	f7fa feb5 	bl	8000bcc <HAL_PCD_EP_Receive>
 8005e62:	2803      	cmp	r0, #3
 8005e64:	bf9a      	itte	ls
 8005e66:	4b02      	ldrls	r3, [pc, #8]	; (8005e70 <USBD_LL_PrepareReceive+0x18>)
 8005e68:	5c18      	ldrbls	r0, [r3, r0]
 8005e6a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005e6c:	bd08      	pop	{r3, pc}
 8005e6e:	bf00      	nop
 8005e70:	08006ecb 	.word	0x08006ecb

08005e74 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e74:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005e76:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005e7a:	f7fa ff17 	bl	8000cac <HAL_PCD_EP_GetRxCount>
}
 8005e7e:	bd08      	pop	{r3, pc}

08005e80 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005e80:	4800      	ldr	r0, [pc, #0]	; (8005e84 <USBD_static_malloc+0x4>)
 8005e82:	4770      	bx	lr
 8005e84:	20000228 	.word	0x20000228

08005e88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005e88:	4770      	bx	lr

08005e8a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8005e8a:	4770      	bx	lr

08005e8c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e8c:	2312      	movs	r3, #18
 8005e8e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005e90:	4800      	ldr	r0, [pc, #0]	; (8005e94 <USBD_FS_DeviceDescriptor+0x8>)
 8005e92:	4770      	bx	lr
 8005e94:	20000148 	.word	0x20000148

08005e98 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8005e98:	2304      	movs	r3, #4
 8005e9a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005e9c:	4800      	ldr	r0, [pc, #0]	; (8005ea0 <USBD_FS_LangIDStrDescriptor+0x8>)
 8005e9e:	4770      	bx	lr
 8005ea0:	2000015c 	.word	0x2000015c

08005ea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ea4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ea6:	4c04      	ldr	r4, [pc, #16]	; (8005eb8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005ea8:	4804      	ldr	r0, [pc, #16]	; (8005ebc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005eaa:	460a      	mov	r2, r1
 8005eac:	4621      	mov	r1, r4
 8005eae:	f7fd f994 	bl	80031da <USBD_GetString>
  return USBD_StrDesc;
}
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20001730 	.word	0x20001730
 8005ebc:	08006ee8 	.word	0x08006ee8

08005ec0 <USBD_FS_ProductStrDescriptor>:
{
 8005ec0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ec2:	4c04      	ldr	r4, [pc, #16]	; (8005ed4 <USBD_FS_ProductStrDescriptor+0x14>)
 8005ec4:	4804      	ldr	r0, [pc, #16]	; (8005ed8 <USBD_FS_ProductStrDescriptor+0x18>)
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f7fd f986 	bl	80031da <USBD_GetString>
}
 8005ece:	4620      	mov	r0, r4
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20001730 	.word	0x20001730
 8005ed8:	08006efb 	.word	0x08006efb

08005edc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005edc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005ede:	4c04      	ldr	r4, [pc, #16]	; (8005ef0 <USBD_FS_SerialStrDescriptor+0x14>)
 8005ee0:	4804      	ldr	r0, [pc, #16]	; (8005ef4 <USBD_FS_SerialStrDescriptor+0x18>)
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	f7fd f978 	bl	80031da <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005eea:	4620      	mov	r0, r4
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	20001730 	.word	0x20001730
 8005ef4:	08006f11 	.word	0x08006f11

08005ef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ef8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005efa:	4c04      	ldr	r4, [pc, #16]	; (8005f0c <USBD_FS_ConfigStrDescriptor+0x14>)
 8005efc:	4804      	ldr	r0, [pc, #16]	; (8005f10 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005efe:	460a      	mov	r2, r1
 8005f00:	4621      	mov	r1, r4
 8005f02:	f7fd f96a 	bl	80031da <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005f06:	4620      	mov	r0, r4
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20001730 	.word	0x20001730
 8005f10:	08006ecf 	.word	0x08006ecf

08005f14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f14:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f16:	4c04      	ldr	r4, [pc, #16]	; (8005f28 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005f18:	4804      	ldr	r0, [pc, #16]	; (8005f2c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f7fd f95c 	bl	80031da <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005f22:	4620      	mov	r0, r4
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	bf00      	nop
 8005f28:	20001730 	.word	0x20001730
 8005f2c:	08006eda 	.word	0x08006eda

08005f30 <USER_status>:
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return 0;
  /* USER CODE END STATUS */
}
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr

08005f34 <USER_ioctl>:
	}

    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 8005f34:	1c08      	adds	r0, r1, #0
 8005f36:	bf18      	it	ne
 8005f38:	2001      	movne	r0, #1
 8005f3a:	4770      	bx	lr

08005f3c <USER_initialize>:
{
 8005f3c:	b508      	push	{r3, lr}
	int code = SDCARD_Init();
 8005f3e:	f7ff f935 	bl	80051ac <SDCARD_Init>
}
 8005f42:	0fc0      	lsrs	r0, r0, #31
 8005f44:	bd08      	pop	{r3, pc}

08005f46 <USER_read>:
{
 8005f46:	b538      	push	{r3, r4, r5, lr}
	if(SDCARD_ReadBegin(sector) < 0)
 8005f48:	4610      	mov	r0, r2
{
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	461c      	mov	r4, r3
	if(SDCARD_ReadBegin(sector) < 0)
 8005f4e:	f7ff f9eb 	bl	8005328 <SDCARD_ReadBegin>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	da09      	bge.n	8005f6a <USER_read+0x24>
		return RES_ERROR;
 8005f56:	2001      	movs	r0, #1
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
		if(SDCARD_ReadData(buff) < 0)
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f7ff fa1a 	bl	8005394 <SDCARD_ReadData>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	dbf8      	blt.n	8005f56 <USER_read+0x10>
		buff += 512;
 8005f64:	f505 7500 	add.w	r5, r5, #512	; 0x200
		count--;
 8005f68:	3c01      	subs	r4, #1
	while(count > 0)
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	d1f5      	bne.n	8005f5a <USER_read+0x14>
	if(SDCARD_ReadEnd() < 0)
 8005f6e:	f7ff fa3b 	bl	80053e8 <SDCARD_ReadEnd>
		return RES_ERROR;
 8005f72:	0fc0      	lsrs	r0, r0, #31
}
 8005f74:	bd38      	pop	{r3, r4, r5, pc}

08005f76 <USER_write>:
{ 
 8005f76:	b538      	push	{r3, r4, r5, lr}
    if(SDCARD_WriteBegin(sector) < 0)
 8005f78:	4610      	mov	r0, r2
{ 
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	461c      	mov	r4, r3
    if(SDCARD_WriteBegin(sector) < 0)
 8005f7e:	f7ff fa5b 	bl	8005438 <SDCARD_WriteBegin>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	da09      	bge.n	8005f9a <USER_write+0x24>
        return RES_ERROR;
 8005f86:	2001      	movs	r0, #1
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
        if(SDCARD_WriteData(buff) < 0)
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff fa8a 	bl	80054a4 <SDCARD_WriteData>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	dbf8      	blt.n	8005f86 <USER_write+0x10>
        buff += 512;
 8005f94:	f505 7500 	add.w	r5, r5, #512	; 0x200
        count--;
 8005f98:	3c01      	subs	r4, #1
    while(count > 0)
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d1f5      	bne.n	8005f8a <USER_write+0x14>
    if(SDCARD_WriteEnd() < 0)
 8005f9e:	f7ff fac5 	bl	800552c <SDCARD_WriteEnd>
        return RES_ERROR;
 8005fa2:	0fc0      	lsrs	r0, r0, #31
}
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
	...

08005fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fe0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005fac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005fae:	e003      	b.n	8005fb8 <LoopCopyDataInit>

08005fb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005fb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005fb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005fb6:	3104      	adds	r1, #4

08005fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005fb8:	480b      	ldr	r0, [pc, #44]	; (8005fe8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005fba:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <LoopForever+0xe>)
	adds	r2, r0, r1
 8005fbc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005fbe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005fc0:	d3f6      	bcc.n	8005fb0 <CopyDataInit>
	ldr	r2, =_sbss
 8005fc2:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005fc4:	e002      	b.n	8005fcc <LoopFillZerobss>

08005fc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005fc6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005fc8:	f842 3b04 	str.w	r3, [r2], #4

08005fcc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <LoopForever+0x16>)
	cmp	r2, r3
 8005fce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005fd0:	d3f9      	bcc.n	8005fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005fd2:	f7ff fb81 	bl	80056d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005fd6:	f000 f811 	bl	8005ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fda:	f7fe fe81 	bl	8004ce0 <main>

08005fde <LoopForever>:

LoopForever:
    b LoopForever
 8005fde:	e7fe      	b.n	8005fde <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005fe0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8005fe4:	08006f5c 	.word	0x08006f5c
	ldr	r0, =_sdata
 8005fe8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005fec:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8005ff0:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8005ff4:	20001934 	.word	0x20001934

08005ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ff8:	e7fe      	b.n	8005ff8 <ADC1_2_IRQHandler>
	...

08005ffc <__libc_init_array>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0d      	ldr	r6, [pc, #52]	; (8006034 <__libc_init_array+0x38>)
 8006000:	4c0d      	ldr	r4, [pc, #52]	; (8006038 <__libc_init_array+0x3c>)
 8006002:	1ba4      	subs	r4, r4, r6
 8006004:	10a4      	asrs	r4, r4, #2
 8006006:	2500      	movs	r5, #0
 8006008:	42a5      	cmp	r5, r4
 800600a:	d109      	bne.n	8006020 <__libc_init_array+0x24>
 800600c:	4e0b      	ldr	r6, [pc, #44]	; (800603c <__libc_init_array+0x40>)
 800600e:	4c0c      	ldr	r4, [pc, #48]	; (8006040 <__libc_init_array+0x44>)
 8006010:	f000 fc96 	bl	8006940 <_init>
 8006014:	1ba4      	subs	r4, r4, r6
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	2500      	movs	r5, #0
 800601a:	42a5      	cmp	r5, r4
 800601c:	d105      	bne.n	800602a <__libc_init_array+0x2e>
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006024:	4798      	blx	r3
 8006026:	3501      	adds	r5, #1
 8006028:	e7ee      	b.n	8006008 <__libc_init_array+0xc>
 800602a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800602e:	4798      	blx	r3
 8006030:	3501      	adds	r5, #1
 8006032:	e7f2      	b.n	800601a <__libc_init_array+0x1e>
 8006034:	08006f54 	.word	0x08006f54
 8006038:	08006f54 	.word	0x08006f54
 800603c:	08006f54 	.word	0x08006f54
 8006040:	08006f58 	.word	0x08006f58

08006044 <memset>:
 8006044:	4402      	add	r2, r0
 8006046:	4603      	mov	r3, r0
 8006048:	4293      	cmp	r3, r2
 800604a:	d100      	bne.n	800604e <memset+0xa>
 800604c:	4770      	bx	lr
 800604e:	f803 1b01 	strb.w	r1, [r3], #1
 8006052:	e7f9      	b.n	8006048 <memset+0x4>

08006054 <sniprintf>:
 8006054:	b40c      	push	{r2, r3}
 8006056:	b530      	push	{r4, r5, lr}
 8006058:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <sniprintf+0x64>)
 800605a:	1e0c      	subs	r4, r1, #0
 800605c:	b09d      	sub	sp, #116	; 0x74
 800605e:	681d      	ldr	r5, [r3, #0]
 8006060:	da08      	bge.n	8006074 <sniprintf+0x20>
 8006062:	238b      	movs	r3, #139	; 0x8b
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606a:	b01d      	add	sp, #116	; 0x74
 800606c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006070:	b002      	add	sp, #8
 8006072:	4770      	bx	lr
 8006074:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006078:	f8ad 3014 	strh.w	r3, [sp, #20]
 800607c:	bf14      	ite	ne
 800607e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006082:	4623      	moveq	r3, r4
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	9006      	str	r0, [sp, #24]
 8006090:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006096:	ab21      	add	r3, sp, #132	; 0x84
 8006098:	a902      	add	r1, sp, #8
 800609a:	4628      	mov	r0, r5
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	f000 f8a3 	bl	80061e8 <_svfiprintf_r>
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	bfbc      	itt	lt
 80060a6:	238b      	movlt	r3, #139	; 0x8b
 80060a8:	602b      	strlt	r3, [r5, #0]
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	d0dd      	beq.n	800606a <sniprintf+0x16>
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	e7d9      	b.n	800606a <sniprintf+0x16>
 80060b6:	bf00      	nop
 80060b8:	20000174 	.word	0x20000174

080060bc <_vsniprintf_r>:
 80060bc:	b530      	push	{r4, r5, lr}
 80060be:	1e14      	subs	r4, r2, #0
 80060c0:	4605      	mov	r5, r0
 80060c2:	b09b      	sub	sp, #108	; 0x6c
 80060c4:	4618      	mov	r0, r3
 80060c6:	da05      	bge.n	80060d4 <_vsniprintf_r+0x18>
 80060c8:	238b      	movs	r3, #139	; 0x8b
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d0:	b01b      	add	sp, #108	; 0x6c
 80060d2:	bd30      	pop	{r4, r5, pc}
 80060d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80060d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80060dc:	bf14      	ite	ne
 80060de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80060e2:	4623      	moveq	r3, r4
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060ec:	9100      	str	r1, [sp, #0]
 80060ee:	9104      	str	r1, [sp, #16]
 80060f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80060f4:	4602      	mov	r2, r0
 80060f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060f8:	4669      	mov	r1, sp
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 f874 	bl	80061e8 <_svfiprintf_r>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	bfbc      	itt	lt
 8006104:	238b      	movlt	r3, #139	; 0x8b
 8006106:	602b      	strlt	r3, [r5, #0]
 8006108:	2c00      	cmp	r4, #0
 800610a:	d0e1      	beq.n	80060d0 <_vsniprintf_r+0x14>
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e7dd      	b.n	80060d0 <_vsniprintf_r+0x14>

08006114 <vsniprintf>:
 8006114:	b507      	push	{r0, r1, r2, lr}
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	460a      	mov	r2, r1
 800611c:	4601      	mov	r1, r0
 800611e:	4803      	ldr	r0, [pc, #12]	; (800612c <vsniprintf+0x18>)
 8006120:	6800      	ldr	r0, [r0, #0]
 8006122:	f7ff ffcb 	bl	80060bc <_vsniprintf_r>
 8006126:	b003      	add	sp, #12
 8006128:	f85d fb04 	ldr.w	pc, [sp], #4
 800612c:	20000174 	.word	0x20000174

08006130 <__ssputs_r>:
 8006130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	688e      	ldr	r6, [r1, #8]
 8006136:	429e      	cmp	r6, r3
 8006138:	4682      	mov	sl, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4691      	mov	r9, r2
 800613e:	4698      	mov	r8, r3
 8006140:	d835      	bhi.n	80061ae <__ssputs_r+0x7e>
 8006142:	898a      	ldrh	r2, [r1, #12]
 8006144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006148:	d031      	beq.n	80061ae <__ssputs_r+0x7e>
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	6909      	ldr	r1, [r1, #16]
 800614e:	1a6f      	subs	r7, r5, r1
 8006150:	6965      	ldr	r5, [r4, #20]
 8006152:	2302      	movs	r3, #2
 8006154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006158:	fb95 f5f3 	sdiv	r5, r5, r3
 800615c:	f108 0301 	add.w	r3, r8, #1
 8006160:	443b      	add	r3, r7
 8006162:	429d      	cmp	r5, r3
 8006164:	bf38      	it	cc
 8006166:	461d      	movcc	r5, r3
 8006168:	0553      	lsls	r3, r2, #21
 800616a:	d531      	bpl.n	80061d0 <__ssputs_r+0xa0>
 800616c:	4629      	mov	r1, r5
 800616e:	f000 fb39 	bl	80067e4 <_malloc_r>
 8006172:	4606      	mov	r6, r0
 8006174:	b950      	cbnz	r0, 800618c <__ssputs_r+0x5c>
 8006176:	230c      	movs	r3, #12
 8006178:	f8ca 3000 	str.w	r3, [sl]
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006182:	81a3      	strh	r3, [r4, #12]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	463a      	mov	r2, r7
 800618e:	6921      	ldr	r1, [r4, #16]
 8006190:	f000 fab4 	bl	80066fc <memcpy>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800619a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619e:	81a3      	strh	r3, [r4, #12]
 80061a0:	6126      	str	r6, [r4, #16]
 80061a2:	6165      	str	r5, [r4, #20]
 80061a4:	443e      	add	r6, r7
 80061a6:	1bed      	subs	r5, r5, r7
 80061a8:	6026      	str	r6, [r4, #0]
 80061aa:	60a5      	str	r5, [r4, #8]
 80061ac:	4646      	mov	r6, r8
 80061ae:	4546      	cmp	r6, r8
 80061b0:	bf28      	it	cs
 80061b2:	4646      	movcs	r6, r8
 80061b4:	4632      	mov	r2, r6
 80061b6:	4649      	mov	r1, r9
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	f000 faaa 	bl	8006712 <memmove>
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	1b9b      	subs	r3, r3, r6
 80061c2:	60a3      	str	r3, [r4, #8]
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	441e      	add	r6, r3
 80061c8:	6026      	str	r6, [r4, #0]
 80061ca:	2000      	movs	r0, #0
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	462a      	mov	r2, r5
 80061d2:	f000 fb65 	bl	80068a0 <_realloc_r>
 80061d6:	4606      	mov	r6, r0
 80061d8:	2800      	cmp	r0, #0
 80061da:	d1e1      	bne.n	80061a0 <__ssputs_r+0x70>
 80061dc:	6921      	ldr	r1, [r4, #16]
 80061de:	4650      	mov	r0, sl
 80061e0:	f000 fab2 	bl	8006748 <_free_r>
 80061e4:	e7c7      	b.n	8006176 <__ssputs_r+0x46>
	...

080061e8 <_svfiprintf_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	b09d      	sub	sp, #116	; 0x74
 80061ee:	4680      	mov	r8, r0
 80061f0:	9303      	str	r3, [sp, #12]
 80061f2:	898b      	ldrh	r3, [r1, #12]
 80061f4:	061c      	lsls	r4, r3, #24
 80061f6:	460d      	mov	r5, r1
 80061f8:	4616      	mov	r6, r2
 80061fa:	d50f      	bpl.n	800621c <_svfiprintf_r+0x34>
 80061fc:	690b      	ldr	r3, [r1, #16]
 80061fe:	b96b      	cbnz	r3, 800621c <_svfiprintf_r+0x34>
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	f000 faef 	bl	80067e4 <_malloc_r>
 8006206:	6028      	str	r0, [r5, #0]
 8006208:	6128      	str	r0, [r5, #16]
 800620a:	b928      	cbnz	r0, 8006218 <_svfiprintf_r+0x30>
 800620c:	230c      	movs	r3, #12
 800620e:	f8c8 3000 	str.w	r3, [r8]
 8006212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006216:	e0c5      	b.n	80063a4 <_svfiprintf_r+0x1bc>
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	616b      	str	r3, [r5, #20]
 800621c:	2300      	movs	r3, #0
 800621e:	9309      	str	r3, [sp, #36]	; 0x24
 8006220:	2320      	movs	r3, #32
 8006222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006226:	2330      	movs	r3, #48	; 0x30
 8006228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800622c:	f04f 0b01 	mov.w	fp, #1
 8006230:	4637      	mov	r7, r6
 8006232:	463c      	mov	r4, r7
 8006234:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d13c      	bne.n	80062b6 <_svfiprintf_r+0xce>
 800623c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006240:	d00b      	beq.n	800625a <_svfiprintf_r+0x72>
 8006242:	4653      	mov	r3, sl
 8006244:	4632      	mov	r2, r6
 8006246:	4629      	mov	r1, r5
 8006248:	4640      	mov	r0, r8
 800624a:	f7ff ff71 	bl	8006130 <__ssputs_r>
 800624e:	3001      	adds	r0, #1
 8006250:	f000 80a3 	beq.w	800639a <_svfiprintf_r+0x1b2>
 8006254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006256:	4453      	add	r3, sl
 8006258:	9309      	str	r3, [sp, #36]	; 0x24
 800625a:	783b      	ldrb	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 809c 	beq.w	800639a <_svfiprintf_r+0x1b2>
 8006262:	2300      	movs	r3, #0
 8006264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9307      	str	r3, [sp, #28]
 800626c:	9205      	str	r2, [sp, #20]
 800626e:	9306      	str	r3, [sp, #24]
 8006270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006274:	931a      	str	r3, [sp, #104]	; 0x68
 8006276:	2205      	movs	r2, #5
 8006278:	7821      	ldrb	r1, [r4, #0]
 800627a:	4850      	ldr	r0, [pc, #320]	; (80063bc <_svfiprintf_r+0x1d4>)
 800627c:	f7f9 ffb0 	bl	80001e0 <memchr>
 8006280:	1c67      	adds	r7, r4, #1
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	b9d8      	cbnz	r0, 80062be <_svfiprintf_r+0xd6>
 8006286:	06d9      	lsls	r1, r3, #27
 8006288:	bf44      	itt	mi
 800628a:	2220      	movmi	r2, #32
 800628c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	bf44      	itt	mi
 8006294:	222b      	movmi	r2, #43	; 0x2b
 8006296:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800629a:	7822      	ldrb	r2, [r4, #0]
 800629c:	2a2a      	cmp	r2, #42	; 0x2a
 800629e:	d016      	beq.n	80062ce <_svfiprintf_r+0xe6>
 80062a0:	9a07      	ldr	r2, [sp, #28]
 80062a2:	2100      	movs	r1, #0
 80062a4:	200a      	movs	r0, #10
 80062a6:	4627      	mov	r7, r4
 80062a8:	3401      	adds	r4, #1
 80062aa:	783b      	ldrb	r3, [r7, #0]
 80062ac:	3b30      	subs	r3, #48	; 0x30
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	d951      	bls.n	8006356 <_svfiprintf_r+0x16e>
 80062b2:	b1c9      	cbz	r1, 80062e8 <_svfiprintf_r+0x100>
 80062b4:	e011      	b.n	80062da <_svfiprintf_r+0xf2>
 80062b6:	2b25      	cmp	r3, #37	; 0x25
 80062b8:	d0c0      	beq.n	800623c <_svfiprintf_r+0x54>
 80062ba:	4627      	mov	r7, r4
 80062bc:	e7b9      	b.n	8006232 <_svfiprintf_r+0x4a>
 80062be:	4a3f      	ldr	r2, [pc, #252]	; (80063bc <_svfiprintf_r+0x1d4>)
 80062c0:	1a80      	subs	r0, r0, r2
 80062c2:	fa0b f000 	lsl.w	r0, fp, r0
 80062c6:	4318      	orrs	r0, r3
 80062c8:	9004      	str	r0, [sp, #16]
 80062ca:	463c      	mov	r4, r7
 80062cc:	e7d3      	b.n	8006276 <_svfiprintf_r+0x8e>
 80062ce:	9a03      	ldr	r2, [sp, #12]
 80062d0:	1d11      	adds	r1, r2, #4
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	9103      	str	r1, [sp, #12]
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	db01      	blt.n	80062de <_svfiprintf_r+0xf6>
 80062da:	9207      	str	r2, [sp, #28]
 80062dc:	e004      	b.n	80062e8 <_svfiprintf_r+0x100>
 80062de:	4252      	negs	r2, r2
 80062e0:	f043 0302 	orr.w	r3, r3, #2
 80062e4:	9207      	str	r2, [sp, #28]
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	783b      	ldrb	r3, [r7, #0]
 80062ea:	2b2e      	cmp	r3, #46	; 0x2e
 80062ec:	d10e      	bne.n	800630c <_svfiprintf_r+0x124>
 80062ee:	787b      	ldrb	r3, [r7, #1]
 80062f0:	2b2a      	cmp	r3, #42	; 0x2a
 80062f2:	f107 0101 	add.w	r1, r7, #1
 80062f6:	d132      	bne.n	800635e <_svfiprintf_r+0x176>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	9203      	str	r2, [sp, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	bfb8      	it	lt
 8006304:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006308:	3702      	adds	r7, #2
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	4c2c      	ldr	r4, [pc, #176]	; (80063c0 <_svfiprintf_r+0x1d8>)
 800630e:	7839      	ldrb	r1, [r7, #0]
 8006310:	2203      	movs	r2, #3
 8006312:	4620      	mov	r0, r4
 8006314:	f7f9 ff64 	bl	80001e0 <memchr>
 8006318:	b138      	cbz	r0, 800632a <_svfiprintf_r+0x142>
 800631a:	2340      	movs	r3, #64	; 0x40
 800631c:	1b00      	subs	r0, r0, r4
 800631e:	fa03 f000 	lsl.w	r0, r3, r0
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	4303      	orrs	r3, r0
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	3701      	adds	r7, #1
 800632a:	7839      	ldrb	r1, [r7, #0]
 800632c:	4825      	ldr	r0, [pc, #148]	; (80063c4 <_svfiprintf_r+0x1dc>)
 800632e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006332:	2206      	movs	r2, #6
 8006334:	1c7e      	adds	r6, r7, #1
 8006336:	f7f9 ff53 	bl	80001e0 <memchr>
 800633a:	2800      	cmp	r0, #0
 800633c:	d035      	beq.n	80063aa <_svfiprintf_r+0x1c2>
 800633e:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <_svfiprintf_r+0x1e0>)
 8006340:	b9fb      	cbnz	r3, 8006382 <_svfiprintf_r+0x19a>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	3307      	adds	r3, #7
 8006346:	f023 0307 	bic.w	r3, r3, #7
 800634a:	3308      	adds	r3, #8
 800634c:	9303      	str	r3, [sp, #12]
 800634e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006350:	444b      	add	r3, r9
 8006352:	9309      	str	r3, [sp, #36]	; 0x24
 8006354:	e76c      	b.n	8006230 <_svfiprintf_r+0x48>
 8006356:	fb00 3202 	mla	r2, r0, r2, r3
 800635a:	2101      	movs	r1, #1
 800635c:	e7a3      	b.n	80062a6 <_svfiprintf_r+0xbe>
 800635e:	2300      	movs	r3, #0
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	4618      	mov	r0, r3
 8006364:	240a      	movs	r4, #10
 8006366:	460f      	mov	r7, r1
 8006368:	3101      	adds	r1, #1
 800636a:	783a      	ldrb	r2, [r7, #0]
 800636c:	3a30      	subs	r2, #48	; 0x30
 800636e:	2a09      	cmp	r2, #9
 8006370:	d903      	bls.n	800637a <_svfiprintf_r+0x192>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0ca      	beq.n	800630c <_svfiprintf_r+0x124>
 8006376:	9005      	str	r0, [sp, #20]
 8006378:	e7c8      	b.n	800630c <_svfiprintf_r+0x124>
 800637a:	fb04 2000 	mla	r0, r4, r0, r2
 800637e:	2301      	movs	r3, #1
 8006380:	e7f1      	b.n	8006366 <_svfiprintf_r+0x17e>
 8006382:	ab03      	add	r3, sp, #12
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	462a      	mov	r2, r5
 8006388:	4b10      	ldr	r3, [pc, #64]	; (80063cc <_svfiprintf_r+0x1e4>)
 800638a:	a904      	add	r1, sp, #16
 800638c:	4640      	mov	r0, r8
 800638e:	f3af 8000 	nop.w
 8006392:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006396:	4681      	mov	r9, r0
 8006398:	d1d9      	bne.n	800634e <_svfiprintf_r+0x166>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	065b      	lsls	r3, r3, #25
 800639e:	f53f af38 	bmi.w	8006212 <_svfiprintf_r+0x2a>
 80063a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063a4:	b01d      	add	sp, #116	; 0x74
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	ab03      	add	r3, sp, #12
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	462a      	mov	r2, r5
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <_svfiprintf_r+0x1e4>)
 80063b2:	a904      	add	r1, sp, #16
 80063b4:	4640      	mov	r0, r8
 80063b6:	f000 f881 	bl	80064bc <_printf_i>
 80063ba:	e7ea      	b.n	8006392 <_svfiprintf_r+0x1aa>
 80063bc:	08006f1e 	.word	0x08006f1e
 80063c0:	08006f24 	.word	0x08006f24
 80063c4:	08006f28 	.word	0x08006f28
 80063c8:	00000000 	.word	0x00000000
 80063cc:	08006131 	.word	0x08006131

080063d0 <_printf_common>:
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	4691      	mov	r9, r2
 80063d6:	461f      	mov	r7, r3
 80063d8:	688a      	ldr	r2, [r1, #8]
 80063da:	690b      	ldr	r3, [r1, #16]
 80063dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063e0:	4293      	cmp	r3, r2
 80063e2:	bfb8      	it	lt
 80063e4:	4613      	movlt	r3, r2
 80063e6:	f8c9 3000 	str.w	r3, [r9]
 80063ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063ee:	4606      	mov	r6, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	b112      	cbz	r2, 80063fa <_printf_common+0x2a>
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c9 3000 	str.w	r3, [r9]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	0699      	lsls	r1, r3, #26
 80063fe:	bf42      	ittt	mi
 8006400:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006404:	3302      	addmi	r3, #2
 8006406:	f8c9 3000 	strmi.w	r3, [r9]
 800640a:	6825      	ldr	r5, [r4, #0]
 800640c:	f015 0506 	ands.w	r5, r5, #6
 8006410:	d107      	bne.n	8006422 <_printf_common+0x52>
 8006412:	f104 0a19 	add.w	sl, r4, #25
 8006416:	68e3      	ldr	r3, [r4, #12]
 8006418:	f8d9 2000 	ldr.w	r2, [r9]
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	429d      	cmp	r5, r3
 8006420:	db29      	blt.n	8006476 <_printf_common+0xa6>
 8006422:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	3300      	adds	r3, #0
 800642a:	bf18      	it	ne
 800642c:	2301      	movne	r3, #1
 800642e:	0692      	lsls	r2, r2, #26
 8006430:	d42e      	bmi.n	8006490 <_printf_common+0xc0>
 8006432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006436:	4639      	mov	r1, r7
 8006438:	4630      	mov	r0, r6
 800643a:	47c0      	blx	r8
 800643c:	3001      	adds	r0, #1
 800643e:	d021      	beq.n	8006484 <_printf_common+0xb4>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	68e5      	ldr	r5, [r4, #12]
 8006444:	f8d9 2000 	ldr.w	r2, [r9]
 8006448:	f003 0306 	and.w	r3, r3, #6
 800644c:	2b04      	cmp	r3, #4
 800644e:	bf08      	it	eq
 8006450:	1aad      	subeq	r5, r5, r2
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	6922      	ldr	r2, [r4, #16]
 8006456:	bf0c      	ite	eq
 8006458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800645c:	2500      	movne	r5, #0
 800645e:	4293      	cmp	r3, r2
 8006460:	bfc4      	itt	gt
 8006462:	1a9b      	subgt	r3, r3, r2
 8006464:	18ed      	addgt	r5, r5, r3
 8006466:	f04f 0900 	mov.w	r9, #0
 800646a:	341a      	adds	r4, #26
 800646c:	454d      	cmp	r5, r9
 800646e:	d11b      	bne.n	80064a8 <_printf_common+0xd8>
 8006470:	2000      	movs	r0, #0
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	2301      	movs	r3, #1
 8006478:	4652      	mov	r2, sl
 800647a:	4639      	mov	r1, r7
 800647c:	4630      	mov	r0, r6
 800647e:	47c0      	blx	r8
 8006480:	3001      	adds	r0, #1
 8006482:	d103      	bne.n	800648c <_printf_common+0xbc>
 8006484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648c:	3501      	adds	r5, #1
 800648e:	e7c2      	b.n	8006416 <_printf_common+0x46>
 8006490:	18e1      	adds	r1, r4, r3
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	2030      	movs	r0, #48	; 0x30
 8006496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800649a:	4422      	add	r2, r4
 800649c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064a4:	3302      	adds	r3, #2
 80064a6:	e7c4      	b.n	8006432 <_printf_common+0x62>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4622      	mov	r2, r4
 80064ac:	4639      	mov	r1, r7
 80064ae:	4630      	mov	r0, r6
 80064b0:	47c0      	blx	r8
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0e6      	beq.n	8006484 <_printf_common+0xb4>
 80064b6:	f109 0901 	add.w	r9, r9, #1
 80064ba:	e7d7      	b.n	800646c <_printf_common+0x9c>

080064bc <_printf_i>:
 80064bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c0:	4617      	mov	r7, r2
 80064c2:	7e0a      	ldrb	r2, [r1, #24]
 80064c4:	b085      	sub	sp, #20
 80064c6:	2a6e      	cmp	r2, #110	; 0x6e
 80064c8:	4698      	mov	r8, r3
 80064ca:	4606      	mov	r6, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80064d4:	f000 80bc 	beq.w	8006650 <_printf_i+0x194>
 80064d8:	d81a      	bhi.n	8006510 <_printf_i+0x54>
 80064da:	2a63      	cmp	r2, #99	; 0x63
 80064dc:	d02e      	beq.n	800653c <_printf_i+0x80>
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x3a>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	f000 80c8 	beq.w	8006676 <_printf_i+0x1ba>
 80064e6:	2a58      	cmp	r2, #88	; 0x58
 80064e8:	f000 808a 	beq.w	8006600 <_printf_i+0x144>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80064f4:	e02a      	b.n	800654c <_printf_i+0x90>
 80064f6:	2a64      	cmp	r2, #100	; 0x64
 80064f8:	d001      	beq.n	80064fe <_printf_i+0x42>
 80064fa:	2a69      	cmp	r2, #105	; 0x69
 80064fc:	d1f6      	bne.n	80064ec <_printf_i+0x30>
 80064fe:	6821      	ldr	r1, [r4, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006506:	d023      	beq.n	8006550 <_printf_i+0x94>
 8006508:	1d11      	adds	r1, r2, #4
 800650a:	6019      	str	r1, [r3, #0]
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	e027      	b.n	8006560 <_printf_i+0xa4>
 8006510:	2a73      	cmp	r2, #115	; 0x73
 8006512:	f000 80b4 	beq.w	800667e <_printf_i+0x1c2>
 8006516:	d808      	bhi.n	800652a <_printf_i+0x6e>
 8006518:	2a6f      	cmp	r2, #111	; 0x6f
 800651a:	d02a      	beq.n	8006572 <_printf_i+0xb6>
 800651c:	2a70      	cmp	r2, #112	; 0x70
 800651e:	d1e5      	bne.n	80064ec <_printf_i+0x30>
 8006520:	680a      	ldr	r2, [r1, #0]
 8006522:	f042 0220 	orr.w	r2, r2, #32
 8006526:	600a      	str	r2, [r1, #0]
 8006528:	e003      	b.n	8006532 <_printf_i+0x76>
 800652a:	2a75      	cmp	r2, #117	; 0x75
 800652c:	d021      	beq.n	8006572 <_printf_i+0xb6>
 800652e:	2a78      	cmp	r2, #120	; 0x78
 8006530:	d1dc      	bne.n	80064ec <_printf_i+0x30>
 8006532:	2278      	movs	r2, #120	; 0x78
 8006534:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006538:	496e      	ldr	r1, [pc, #440]	; (80066f4 <_printf_i+0x238>)
 800653a:	e064      	b.n	8006606 <_printf_i+0x14a>
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006542:	1d11      	adds	r1, r2, #4
 8006544:	6019      	str	r1, [r3, #0]
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800654c:	2301      	movs	r3, #1
 800654e:	e0a3      	b.n	8006698 <_printf_i+0x1dc>
 8006550:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006554:	f102 0104 	add.w	r1, r2, #4
 8006558:	6019      	str	r1, [r3, #0]
 800655a:	d0d7      	beq.n	800650c <_printf_i+0x50>
 800655c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xb0>
 8006564:	222d      	movs	r2, #45	; 0x2d
 8006566:	425b      	negs	r3, r3
 8006568:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800656c:	4962      	ldr	r1, [pc, #392]	; (80066f8 <_printf_i+0x23c>)
 800656e:	220a      	movs	r2, #10
 8006570:	e017      	b.n	80065a2 <_printf_i+0xe6>
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	6819      	ldr	r1, [r3, #0]
 8006576:	f010 0f80 	tst.w	r0, #128	; 0x80
 800657a:	d003      	beq.n	8006584 <_printf_i+0xc8>
 800657c:	1d08      	adds	r0, r1, #4
 800657e:	6018      	str	r0, [r3, #0]
 8006580:	680b      	ldr	r3, [r1, #0]
 8006582:	e006      	b.n	8006592 <_printf_i+0xd6>
 8006584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006588:	f101 0004 	add.w	r0, r1, #4
 800658c:	6018      	str	r0, [r3, #0]
 800658e:	d0f7      	beq.n	8006580 <_printf_i+0xc4>
 8006590:	880b      	ldrh	r3, [r1, #0]
 8006592:	4959      	ldr	r1, [pc, #356]	; (80066f8 <_printf_i+0x23c>)
 8006594:	2a6f      	cmp	r2, #111	; 0x6f
 8006596:	bf14      	ite	ne
 8006598:	220a      	movne	r2, #10
 800659a:	2208      	moveq	r2, #8
 800659c:	2000      	movs	r0, #0
 800659e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80065a2:	6865      	ldr	r5, [r4, #4]
 80065a4:	60a5      	str	r5, [r4, #8]
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f2c0 809c 	blt.w	80066e4 <_printf_i+0x228>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	f020 0004 	bic.w	r0, r0, #4
 80065b2:	6020      	str	r0, [r4, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13f      	bne.n	8006638 <_printf_i+0x17c>
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	f040 8095 	bne.w	80066e8 <_printf_i+0x22c>
 80065be:	4675      	mov	r5, lr
 80065c0:	2a08      	cmp	r2, #8
 80065c2:	d10b      	bne.n	80065dc <_printf_i+0x120>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	07da      	lsls	r2, r3, #31
 80065c8:	d508      	bpl.n	80065dc <_printf_i+0x120>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6862      	ldr	r2, [r4, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bfde      	ittt	le
 80065d2:	2330      	movle	r3, #48	; 0x30
 80065d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065dc:	ebae 0305 	sub.w	r3, lr, r5
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	f8cd 8000 	str.w	r8, [sp]
 80065e6:	463b      	mov	r3, r7
 80065e8:	aa03      	add	r2, sp, #12
 80065ea:	4621      	mov	r1, r4
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7ff feef 	bl	80063d0 <_printf_common>
 80065f2:	3001      	adds	r0, #1
 80065f4:	d155      	bne.n	80066a2 <_printf_i+0x1e6>
 80065f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065fa:	b005      	add	sp, #20
 80065fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006600:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006604:	493c      	ldr	r1, [pc, #240]	; (80066f8 <_printf_i+0x23c>)
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800660e:	f100 0504 	add.w	r5, r0, #4
 8006612:	601d      	str	r5, [r3, #0]
 8006614:	d001      	beq.n	800661a <_printf_i+0x15e>
 8006616:	6803      	ldr	r3, [r0, #0]
 8006618:	e002      	b.n	8006620 <_printf_i+0x164>
 800661a:	0655      	lsls	r5, r2, #25
 800661c:	d5fb      	bpl.n	8006616 <_printf_i+0x15a>
 800661e:	8803      	ldrh	r3, [r0, #0]
 8006620:	07d0      	lsls	r0, r2, #31
 8006622:	bf44      	itt	mi
 8006624:	f042 0220 	orrmi.w	r2, r2, #32
 8006628:	6022      	strmi	r2, [r4, #0]
 800662a:	b91b      	cbnz	r3, 8006634 <_printf_i+0x178>
 800662c:	6822      	ldr	r2, [r4, #0]
 800662e:	f022 0220 	bic.w	r2, r2, #32
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	2210      	movs	r2, #16
 8006636:	e7b1      	b.n	800659c <_printf_i+0xe0>
 8006638:	4675      	mov	r5, lr
 800663a:	fbb3 f0f2 	udiv	r0, r3, r2
 800663e:	fb02 3310 	mls	r3, r2, r0, r3
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006648:	4603      	mov	r3, r0
 800664a:	2800      	cmp	r0, #0
 800664c:	d1f5      	bne.n	800663a <_printf_i+0x17e>
 800664e:	e7b7      	b.n	80065c0 <_printf_i+0x104>
 8006650:	6808      	ldr	r0, [r1, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6949      	ldr	r1, [r1, #20]
 8006656:	f010 0f80 	tst.w	r0, #128	; 0x80
 800665a:	d004      	beq.n	8006666 <_printf_i+0x1aa>
 800665c:	1d10      	adds	r0, r2, #4
 800665e:	6018      	str	r0, [r3, #0]
 8006660:	6813      	ldr	r3, [r2, #0]
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	e007      	b.n	8006676 <_printf_i+0x1ba>
 8006666:	f010 0f40 	tst.w	r0, #64	; 0x40
 800666a:	f102 0004 	add.w	r0, r2, #4
 800666e:	6018      	str	r0, [r3, #0]
 8006670:	6813      	ldr	r3, [r2, #0]
 8006672:	d0f6      	beq.n	8006662 <_printf_i+0x1a6>
 8006674:	8019      	strh	r1, [r3, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	6123      	str	r3, [r4, #16]
 800667a:	4675      	mov	r5, lr
 800667c:	e7b1      	b.n	80065e2 <_printf_i+0x126>
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	1d11      	adds	r1, r2, #4
 8006682:	6019      	str	r1, [r3, #0]
 8006684:	6815      	ldr	r5, [r2, #0]
 8006686:	6862      	ldr	r2, [r4, #4]
 8006688:	2100      	movs	r1, #0
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 fda8 	bl	80001e0 <memchr>
 8006690:	b108      	cbz	r0, 8006696 <_printf_i+0x1da>
 8006692:	1b40      	subs	r0, r0, r5
 8006694:	6060      	str	r0, [r4, #4]
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	2300      	movs	r3, #0
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a0:	e79f      	b.n	80065e2 <_printf_i+0x126>
 80066a2:	6923      	ldr	r3, [r4, #16]
 80066a4:	462a      	mov	r2, r5
 80066a6:	4639      	mov	r1, r7
 80066a8:	4630      	mov	r0, r6
 80066aa:	47c0      	blx	r8
 80066ac:	3001      	adds	r0, #1
 80066ae:	d0a2      	beq.n	80065f6 <_printf_i+0x13a>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	079b      	lsls	r3, r3, #30
 80066b4:	d507      	bpl.n	80066c6 <_printf_i+0x20a>
 80066b6:	2500      	movs	r5, #0
 80066b8:	f104 0919 	add.w	r9, r4, #25
 80066bc:	68e3      	ldr	r3, [r4, #12]
 80066be:	9a03      	ldr	r2, [sp, #12]
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	429d      	cmp	r5, r3
 80066c4:	db05      	blt.n	80066d2 <_printf_i+0x216>
 80066c6:	68e0      	ldr	r0, [r4, #12]
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	4298      	cmp	r0, r3
 80066cc:	bfb8      	it	lt
 80066ce:	4618      	movlt	r0, r3
 80066d0:	e793      	b.n	80065fa <_printf_i+0x13e>
 80066d2:	2301      	movs	r3, #1
 80066d4:	464a      	mov	r2, r9
 80066d6:	4639      	mov	r1, r7
 80066d8:	4630      	mov	r0, r6
 80066da:	47c0      	blx	r8
 80066dc:	3001      	adds	r0, #1
 80066de:	d08a      	beq.n	80065f6 <_printf_i+0x13a>
 80066e0:	3501      	adds	r5, #1
 80066e2:	e7eb      	b.n	80066bc <_printf_i+0x200>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1a7      	bne.n	8006638 <_printf_i+0x17c>
 80066e8:	780b      	ldrb	r3, [r1, #0]
 80066ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f2:	e765      	b.n	80065c0 <_printf_i+0x104>
 80066f4:	08006f40 	.word	0x08006f40
 80066f8:	08006f2f 	.word	0x08006f2f

080066fc <memcpy>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	1e43      	subs	r3, r0, #1
 8006700:	440a      	add	r2, r1
 8006702:	4291      	cmp	r1, r2
 8006704:	d100      	bne.n	8006708 <memcpy+0xc>
 8006706:	bd10      	pop	{r4, pc}
 8006708:	f811 4b01 	ldrb.w	r4, [r1], #1
 800670c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006710:	e7f7      	b.n	8006702 <memcpy+0x6>

08006712 <memmove>:
 8006712:	4288      	cmp	r0, r1
 8006714:	b510      	push	{r4, lr}
 8006716:	eb01 0302 	add.w	r3, r1, r2
 800671a:	d803      	bhi.n	8006724 <memmove+0x12>
 800671c:	1e42      	subs	r2, r0, #1
 800671e:	4299      	cmp	r1, r3
 8006720:	d10c      	bne.n	800673c <memmove+0x2a>
 8006722:	bd10      	pop	{r4, pc}
 8006724:	4298      	cmp	r0, r3
 8006726:	d2f9      	bcs.n	800671c <memmove+0xa>
 8006728:	1881      	adds	r1, r0, r2
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	42d3      	cmn	r3, r2
 800672e:	d100      	bne.n	8006732 <memmove+0x20>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006736:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800673a:	e7f7      	b.n	800672c <memmove+0x1a>
 800673c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006740:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006744:	e7eb      	b.n	800671e <memmove+0xc>
	...

08006748 <_free_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4605      	mov	r5, r0
 800674c:	2900      	cmp	r1, #0
 800674e:	d045      	beq.n	80067dc <_free_r+0x94>
 8006750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006754:	1f0c      	subs	r4, r1, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfb8      	it	lt
 800675a:	18e4      	addlt	r4, r4, r3
 800675c:	f000 f8d6 	bl	800690c <__malloc_lock>
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <_free_r+0x98>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	4610      	mov	r0, r2
 8006766:	b933      	cbnz	r3, 8006776 <_free_r+0x2e>
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	6014      	str	r4, [r2, #0]
 800676c:	4628      	mov	r0, r5
 800676e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006772:	f000 b8cc 	b.w	800690e <__malloc_unlock>
 8006776:	42a3      	cmp	r3, r4
 8006778:	d90c      	bls.n	8006794 <_free_r+0x4c>
 800677a:	6821      	ldr	r1, [r4, #0]
 800677c:	1862      	adds	r2, r4, r1
 800677e:	4293      	cmp	r3, r2
 8006780:	bf04      	itt	eq
 8006782:	681a      	ldreq	r2, [r3, #0]
 8006784:	685b      	ldreq	r3, [r3, #4]
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	bf04      	itt	eq
 800678a:	1852      	addeq	r2, r2, r1
 800678c:	6022      	streq	r2, [r4, #0]
 800678e:	6004      	str	r4, [r0, #0]
 8006790:	e7ec      	b.n	800676c <_free_r+0x24>
 8006792:	4613      	mov	r3, r2
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	b10a      	cbz	r2, 800679c <_free_r+0x54>
 8006798:	42a2      	cmp	r2, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x4a>
 800679c:	6819      	ldr	r1, [r3, #0]
 800679e:	1858      	adds	r0, r3, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x74>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1858      	adds	r0, r3, r1
 80067aa:	4282      	cmp	r2, r0
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	d1dd      	bne.n	800676c <_free_r+0x24>
 80067b0:	6810      	ldr	r0, [r2, #0]
 80067b2:	6852      	ldr	r2, [r2, #4]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	4401      	add	r1, r0
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e7d7      	b.n	800676c <_free_r+0x24>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x7c>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d3      	b.n	800676c <_free_r+0x24>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428a      	cmp	r2, r1
 80067ca:	bf04      	itt	eq
 80067cc:	6811      	ldreq	r1, [r2, #0]
 80067ce:	6852      	ldreq	r2, [r2, #4]
 80067d0:	6062      	str	r2, [r4, #4]
 80067d2:	bf04      	itt	eq
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	605c      	str	r4, [r3, #4]
 80067da:	e7c7      	b.n	800676c <_free_r+0x24>
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	20000448 	.word	0x20000448

080067e4 <_malloc_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	1ccd      	adds	r5, r1, #3
 80067e8:	f025 0503 	bic.w	r5, r5, #3
 80067ec:	3508      	adds	r5, #8
 80067ee:	2d0c      	cmp	r5, #12
 80067f0:	bf38      	it	cc
 80067f2:	250c      	movcc	r5, #12
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	4606      	mov	r6, r0
 80067f8:	db01      	blt.n	80067fe <_malloc_r+0x1a>
 80067fa:	42a9      	cmp	r1, r5
 80067fc:	d903      	bls.n	8006806 <_malloc_r+0x22>
 80067fe:	230c      	movs	r3, #12
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	2000      	movs	r0, #0
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	f000 f881 	bl	800690c <__malloc_lock>
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <_malloc_r+0xb4>)
 800680c:	6814      	ldr	r4, [r2, #0]
 800680e:	4621      	mov	r1, r4
 8006810:	b991      	cbnz	r1, 8006838 <_malloc_r+0x54>
 8006812:	4c22      	ldr	r4, [pc, #136]	; (800689c <_malloc_r+0xb8>)
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	b91b      	cbnz	r3, 8006820 <_malloc_r+0x3c>
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f867 	bl	80068ec <_sbrk_r>
 800681e:	6020      	str	r0, [r4, #0]
 8006820:	4629      	mov	r1, r5
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f862 	bl	80068ec <_sbrk_r>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d126      	bne.n	800687a <_malloc_r+0x96>
 800682c:	230c      	movs	r3, #12
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f86c 	bl	800690e <__malloc_unlock>
 8006836:	e7e4      	b.n	8006802 <_malloc_r+0x1e>
 8006838:	680b      	ldr	r3, [r1, #0]
 800683a:	1b5b      	subs	r3, r3, r5
 800683c:	d41a      	bmi.n	8006874 <_malloc_r+0x90>
 800683e:	2b0b      	cmp	r3, #11
 8006840:	d90f      	bls.n	8006862 <_malloc_r+0x7e>
 8006842:	600b      	str	r3, [r1, #0]
 8006844:	50cd      	str	r5, [r1, r3]
 8006846:	18cc      	adds	r4, r1, r3
 8006848:	4630      	mov	r0, r6
 800684a:	f000 f860 	bl	800690e <__malloc_unlock>
 800684e:	f104 000b 	add.w	r0, r4, #11
 8006852:	1d23      	adds	r3, r4, #4
 8006854:	f020 0007 	bic.w	r0, r0, #7
 8006858:	1ac3      	subs	r3, r0, r3
 800685a:	d01b      	beq.n	8006894 <_malloc_r+0xb0>
 800685c:	425a      	negs	r2, r3
 800685e:	50e2      	str	r2, [r4, r3]
 8006860:	bd70      	pop	{r4, r5, r6, pc}
 8006862:	428c      	cmp	r4, r1
 8006864:	bf0d      	iteet	eq
 8006866:	6863      	ldreq	r3, [r4, #4]
 8006868:	684b      	ldrne	r3, [r1, #4]
 800686a:	6063      	strne	r3, [r4, #4]
 800686c:	6013      	streq	r3, [r2, #0]
 800686e:	bf18      	it	ne
 8006870:	460c      	movne	r4, r1
 8006872:	e7e9      	b.n	8006848 <_malloc_r+0x64>
 8006874:	460c      	mov	r4, r1
 8006876:	6849      	ldr	r1, [r1, #4]
 8006878:	e7ca      	b.n	8006810 <_malloc_r+0x2c>
 800687a:	1cc4      	adds	r4, r0, #3
 800687c:	f024 0403 	bic.w	r4, r4, #3
 8006880:	42a0      	cmp	r0, r4
 8006882:	d005      	beq.n	8006890 <_malloc_r+0xac>
 8006884:	1a21      	subs	r1, r4, r0
 8006886:	4630      	mov	r0, r6
 8006888:	f000 f830 	bl	80068ec <_sbrk_r>
 800688c:	3001      	adds	r0, #1
 800688e:	d0cd      	beq.n	800682c <_malloc_r+0x48>
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	e7d9      	b.n	8006848 <_malloc_r+0x64>
 8006894:	bd70      	pop	{r4, r5, r6, pc}
 8006896:	bf00      	nop
 8006898:	20000448 	.word	0x20000448
 800689c:	2000044c 	.word	0x2000044c

080068a0 <_realloc_r>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	4607      	mov	r7, r0
 80068a4:	4614      	mov	r4, r2
 80068a6:	460e      	mov	r6, r1
 80068a8:	b921      	cbnz	r1, 80068b4 <_realloc_r+0x14>
 80068aa:	4611      	mov	r1, r2
 80068ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068b0:	f7ff bf98 	b.w	80067e4 <_malloc_r>
 80068b4:	b922      	cbnz	r2, 80068c0 <_realloc_r+0x20>
 80068b6:	f7ff ff47 	bl	8006748 <_free_r>
 80068ba:	4625      	mov	r5, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c0:	f000 f826 	bl	8006910 <_malloc_usable_size_r>
 80068c4:	4284      	cmp	r4, r0
 80068c6:	d90f      	bls.n	80068e8 <_realloc_r+0x48>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4638      	mov	r0, r7
 80068cc:	f7ff ff8a 	bl	80067e4 <_malloc_r>
 80068d0:	4605      	mov	r5, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d0f2      	beq.n	80068bc <_realloc_r+0x1c>
 80068d6:	4631      	mov	r1, r6
 80068d8:	4622      	mov	r2, r4
 80068da:	f7ff ff0f 	bl	80066fc <memcpy>
 80068de:	4631      	mov	r1, r6
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff ff31 	bl	8006748 <_free_r>
 80068e6:	e7e9      	b.n	80068bc <_realloc_r+0x1c>
 80068e8:	4635      	mov	r5, r6
 80068ea:	e7e7      	b.n	80068bc <_realloc_r+0x1c>

080068ec <_sbrk_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4c06      	ldr	r4, [pc, #24]	; (8006908 <_sbrk_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4605      	mov	r5, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	f000 f814 	bl	8006924 <_sbrk>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_sbrk_r+0x1a>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	b103      	cbz	r3, 8006906 <_sbrk_r+0x1a>
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20001930 	.word	0x20001930

0800690c <__malloc_lock>:
 800690c:	4770      	bx	lr

0800690e <__malloc_unlock>:
 800690e:	4770      	bx	lr

08006910 <_malloc_usable_size_r>:
 8006910:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006914:	2800      	cmp	r0, #0
 8006916:	f1a0 0004 	sub.w	r0, r0, #4
 800691a:	bfbc      	itt	lt
 800691c:	580b      	ldrlt	r3, [r1, r0]
 800691e:	18c0      	addlt	r0, r0, r3
 8006920:	4770      	bx	lr
	...

08006924 <_sbrk>:
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <_sbrk+0x14>)
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	4602      	mov	r2, r0
 800692a:	b909      	cbnz	r1, 8006930 <_sbrk+0xc>
 800692c:	4903      	ldr	r1, [pc, #12]	; (800693c <_sbrk+0x18>)
 800692e:	6019      	str	r1, [r3, #0]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	4402      	add	r2, r0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	4770      	bx	lr
 8006938:	20000450 	.word	0x20000450
 800693c:	20001934 	.word	0x20001934

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
