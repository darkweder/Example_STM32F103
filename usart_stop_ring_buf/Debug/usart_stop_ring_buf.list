
usart_stop_ring_buf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08001f74  08001f74  00011f74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  0800205c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000118  20000074  080020d0  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000018c  080020d0  0002018c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010bf4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002189  00000000  00000000  00030c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c9d  00000000  00000000  00032e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000810  00000000  00000000  00038ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b38  00000000  00000000  000392c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000463e  00000000  00000000  00039e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003316  00000000  00000000  0003e43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041754  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001afc  00000000  00000000  000417d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f5c 	.word	0x08001f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08001f5c 	.word	0x08001f5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f928 	bl	8001410 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000c0 	.word	0x200000c0

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e6:	4616      	mov	r6, r2
 80002e8:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ea:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b0>
 80002ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000494 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002f2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000300:	45a0      	cmp	r8, r4
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80af 	beq.w	800046a <HAL_GPIO_Init+0x18a>
 800030c:	f200 8088 	bhi.w	8000420 <HAL_GPIO_Init+0x140>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a7 	beq.w	8000464 <HAL_GPIO_Init+0x184>
 8000316:	d87c      	bhi.n	8000412 <HAL_GPIO_Init+0x132>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 808e 	beq.w	800043a <HAL_GPIO_Init+0x15a>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 809e 	beq.w	8000460 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2cff      	cmp	r4, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d47      	ldr	r5, [pc, #284]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 8000368:	4f46      	ldr	r7, [pc, #280]	; (8000484 <HAL_GPIO_Init+0x1a4>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	4d3a      	ldr	r5, [pc, #232]	; (8000488 <HAL_GPIO_Init+0x1a8>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d068      	beq.n	8000474 <HAL_GPIO_Init+0x194>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d066      	beq.n	8000478 <HAL_GPIO_Init+0x198>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d064      	beq.n	800047c <HAL_GPIO_Init+0x19c>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	43a5      	biceq	r5, r4
 80003d6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	43a5      	biceq	r5, r4
 80003e4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	43a5      	biceq	r5, r4
 80003f2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0404 	biceq.w	r4, r5, r4
 8000402:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000404:	3601      	adds	r6, #1
 8000406:	2e10      	cmp	r6, #16
 8000408:	f47f af73 	bne.w	80002f2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800040c:	b003      	add	sp, #12
 800040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000412:	2d03      	cmp	r5, #3
 8000414:	d022      	beq.n	800045c <HAL_GPIO_Init+0x17c>
 8000416:	2d11      	cmp	r5, #17
 8000418:	d184      	bne.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800041a:	68ca      	ldr	r2, [r1, #12]
 800041c:	3204      	adds	r2, #4
          break;
 800041e:	e781      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000420:	4f1a      	ldr	r7, [pc, #104]	; (800048c <HAL_GPIO_Init+0x1ac>)
 8000422:	42bd      	cmp	r5, r7
 8000424:	d009      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000426:	d812      	bhi.n	800044e <HAL_GPIO_Init+0x16e>
 8000428:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000498 <HAL_GPIO_Init+0x1b8>
 800042c:	454d      	cmp	r5, r9
 800042e:	d004      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000430:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000434:	454d      	cmp	r5, r9
 8000436:	f47f af75 	bne.w	8000324 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800043a:	688a      	ldr	r2, [r1, #8]
 800043c:	b1c2      	cbz	r2, 8000470 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000440:	bf0c      	ite	eq
 8000442:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000446:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044a:	2208      	movs	r2, #8
 800044c:	e76a      	b.n	8000324 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044e:	4575      	cmp	r5, lr
 8000450:	d0f3      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000452:	4565      	cmp	r5, ip
 8000454:	d0f1      	beq.n	800043a <HAL_GPIO_Init+0x15a>
 8000456:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800049c <HAL_GPIO_Init+0x1bc>
 800045a:	e7eb      	b.n	8000434 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800045c:	2200      	movs	r2, #0
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
          break;
 8000462:	e75f      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000464:	68ca      	ldr	r2, [r1, #12]
 8000466:	3208      	adds	r2, #8
          break;
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800046a:	68ca      	ldr	r2, [r1, #12]
 800046c:	320c      	adds	r2, #12
          break;
 800046e:	e759      	b.n	8000324 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000470:	2204      	movs	r2, #4
 8000472:	e757      	b.n	8000324 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000474:	2500      	movs	r5, #0
 8000476:	e7a2      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000478:	2501      	movs	r5, #1
 800047a:	e7a0      	b.n	80003be <HAL_GPIO_Init+0xde>
 800047c:	2502      	movs	r5, #2
 800047e:	e79e      	b.n	80003be <HAL_GPIO_Init+0xde>
 8000480:	40010400 	.word	0x40010400
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	10210000 	.word	0x10210000
 8000490:	10310000 	.word	0x10310000
 8000494:	10320000 	.word	0x10320000
 8000498:	10110000 	.word	0x10110000
 800049c:	10220000 	.word	0x10220000

080004a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a0:	b10a      	cbz	r2, 80004a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004a2:	6101      	str	r1, [r0, #16]
 80004a4:	4770      	bx	lr
 80004a6:	0409      	lsls	r1, r1, #16
 80004a8:	e7fb      	b.n	80004a2 <HAL_GPIO_WritePin+0x2>
	...

080004ac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ac:	6803      	ldr	r3, [r0, #0]
{
 80004ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b2:	07db      	lsls	r3, r3, #31
{
 80004b4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b6:	d410      	bmi.n	80004da <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004b8:	682b      	ldr	r3, [r5, #0]
 80004ba:	079f      	lsls	r7, r3, #30
 80004bc:	d45e      	bmi.n	800057c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004be:	682b      	ldr	r3, [r5, #0]
 80004c0:	0719      	lsls	r1, r3, #28
 80004c2:	f100 8095 	bmi.w	80005f0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	075a      	lsls	r2, r3, #29
 80004ca:	f100 80bf 	bmi.w	800064c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004ce:	69ea      	ldr	r2, [r5, #28]
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 812d 	bne.w	8000730 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004d6:	2000      	movs	r0, #0
 80004d8:	e014      	b.n	8000504 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004da:	4c90      	ldr	r4, [pc, #576]	; (800071c <HAL_RCC_OscConfig+0x270>)
 80004dc:	6863      	ldr	r3, [r4, #4]
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d007      	beq.n	80004f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	f003 030c 	and.w	r3, r3, #12
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d10c      	bne.n	800050a <HAL_RCC_OscConfig+0x5e>
 80004f0:	6863      	ldr	r3, [r4, #4]
 80004f2:	03de      	lsls	r6, r3, #15
 80004f4:	d509      	bpl.n	800050a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	039c      	lsls	r4, r3, #14
 80004fa:	d5dd      	bpl.n	80004b8 <HAL_RCC_OscConfig+0xc>
 80004fc:	686b      	ldr	r3, [r5, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d1da      	bne.n	80004b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
}
 8000504:	b002      	add	sp, #8
 8000506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050a:	686b      	ldr	r3, [r5, #4]
 800050c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000510:	d110      	bne.n	8000534 <HAL_RCC_OscConfig+0x88>
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000518:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051a:	f7ff fe61 	bl	80001e0 <HAL_GetTick>
 800051e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000520:	6823      	ldr	r3, [r4, #0]
 8000522:	0398      	lsls	r0, r3, #14
 8000524:	d4c8      	bmi.n	80004b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000526:	f7ff fe5b 	bl	80001e0 <HAL_GetTick>
 800052a:	1b80      	subs	r0, r0, r6
 800052c:	2864      	cmp	r0, #100	; 0x64
 800052e:	d9f7      	bls.n	8000520 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000530:	2003      	movs	r0, #3
 8000532:	e7e7      	b.n	8000504 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000534:	b99b      	cbnz	r3, 800055e <HAL_RCC_OscConfig+0xb2>
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053c:	6023      	str	r3, [r4, #0]
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000544:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000546:	f7ff fe4b 	bl	80001e0 <HAL_GetTick>
 800054a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	0399      	lsls	r1, r3, #14
 8000550:	d5b2      	bpl.n	80004b8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000552:	f7ff fe45 	bl	80001e0 <HAL_GetTick>
 8000556:	1b80      	subs	r0, r0, r6
 8000558:	2864      	cmp	r0, #100	; 0x64
 800055a:	d9f7      	bls.n	800054c <HAL_RCC_OscConfig+0xa0>
 800055c:	e7e8      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	d103      	bne.n	800056e <HAL_RCC_OscConfig+0xc2>
 8000566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056a:	6023      	str	r3, [r4, #0]
 800056c:	e7d1      	b.n	8000512 <HAL_RCC_OscConfig+0x66>
 800056e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000572:	6023      	str	r3, [r4, #0]
 8000574:	6823      	ldr	r3, [r4, #0]
 8000576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800057a:	e7cd      	b.n	8000518 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800057c:	4c67      	ldr	r4, [pc, #412]	; (800071c <HAL_RCC_OscConfig+0x270>)
 800057e:	6863      	ldr	r3, [r4, #4]
 8000580:	f013 0f0c 	tst.w	r3, #12
 8000584:	d007      	beq.n	8000596 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000586:	6863      	ldr	r3, [r4, #4]
 8000588:	f003 030c 	and.w	r3, r3, #12
 800058c:	2b08      	cmp	r3, #8
 800058e:	d110      	bne.n	80005b2 <HAL_RCC_OscConfig+0x106>
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	03da      	lsls	r2, r3, #15
 8000594:	d40d      	bmi.n	80005b2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	079b      	lsls	r3, r3, #30
 800059a:	d502      	bpl.n	80005a2 <HAL_RCC_OscConfig+0xf6>
 800059c:	692b      	ldr	r3, [r5, #16]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d1af      	bne.n	8000502 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	696a      	ldr	r2, [r5, #20]
 80005a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005ae:	6023      	str	r3, [r4, #0]
 80005b0:	e785      	b.n	80004be <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005b2:	692a      	ldr	r2, [r5, #16]
 80005b4:	4b5a      	ldr	r3, [pc, #360]	; (8000720 <HAL_RCC_OscConfig+0x274>)
 80005b6:	b16a      	cbz	r2, 80005d4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005bc:	f7ff fe10 	bl	80001e0 <HAL_GetTick>
 80005c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	079f      	lsls	r7, r3, #30
 80005c6:	d4ec      	bmi.n	80005a2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c8:	f7ff fe0a 	bl	80001e0 <HAL_GetTick>
 80005cc:	1b80      	subs	r0, r0, r6
 80005ce:	2802      	cmp	r0, #2
 80005d0:	d9f7      	bls.n	80005c2 <HAL_RCC_OscConfig+0x116>
 80005d2:	e7ad      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005d6:	f7ff fe03 	bl	80001e0 <HAL_GetTick>
 80005da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	0798      	lsls	r0, r3, #30
 80005e0:	f57f af6d 	bpl.w	80004be <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005e4:	f7ff fdfc 	bl	80001e0 <HAL_GetTick>
 80005e8:	1b80      	subs	r0, r0, r6
 80005ea:	2802      	cmp	r0, #2
 80005ec:	d9f6      	bls.n	80005dc <HAL_RCC_OscConfig+0x130>
 80005ee:	e79f      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005f0:	69aa      	ldr	r2, [r5, #24]
 80005f2:	4c4a      	ldr	r4, [pc, #296]	; (800071c <HAL_RCC_OscConfig+0x270>)
 80005f4:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <HAL_RCC_OscConfig+0x278>)
 80005f6:	b1da      	cbz	r2, 8000630 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005fc:	f7ff fdf0 	bl	80001e0 <HAL_GetTick>
 8000600:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000604:	079b      	lsls	r3, r3, #30
 8000606:	d50d      	bpl.n	8000624 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000608:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800060c:	4b46      	ldr	r3, [pc, #280]	; (8000728 <HAL_RCC_OscConfig+0x27c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	fbb3 f3f2 	udiv	r3, r3, r2
 8000614:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000616:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000618:	9b01      	ldr	r3, [sp, #4]
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	9201      	str	r2, [sp, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1f9      	bne.n	8000616 <HAL_RCC_OscConfig+0x16a>
 8000622:	e750      	b.n	80004c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000624:	f7ff fddc 	bl	80001e0 <HAL_GetTick>
 8000628:	1b80      	subs	r0, r0, r6
 800062a:	2802      	cmp	r0, #2
 800062c:	d9e9      	bls.n	8000602 <HAL_RCC_OscConfig+0x156>
 800062e:	e77f      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000630:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000632:	f7ff fdd5 	bl	80001e0 <HAL_GetTick>
 8000636:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800063a:	079f      	lsls	r7, r3, #30
 800063c:	f57f af43 	bpl.w	80004c6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000640:	f7ff fdce 	bl	80001e0 <HAL_GetTick>
 8000644:	1b80      	subs	r0, r0, r6
 8000646:	2802      	cmp	r0, #2
 8000648:	d9f6      	bls.n	8000638 <HAL_RCC_OscConfig+0x18c>
 800064a:	e771      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800064c:	4c33      	ldr	r4, [pc, #204]	; (800071c <HAL_RCC_OscConfig+0x270>)
 800064e:	69e3      	ldr	r3, [r4, #28]
 8000650:	00d8      	lsls	r0, r3, #3
 8000652:	d424      	bmi.n	800069e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000654:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	69e3      	ldr	r3, [r4, #28]
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61e3      	str	r3, [r4, #28]
 800065e:	69e3      	ldr	r3, [r4, #28]
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000668:	4e30      	ldr	r6, [pc, #192]	; (800072c <HAL_RCC_OscConfig+0x280>)
 800066a:	6833      	ldr	r3, [r6, #0]
 800066c:	05d9      	lsls	r1, r3, #23
 800066e:	d518      	bpl.n	80006a2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000670:	68eb      	ldr	r3, [r5, #12]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d126      	bne.n	80006c4 <HAL_RCC_OscConfig+0x218>
 8000676:	6a23      	ldr	r3, [r4, #32]
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800067e:	f7ff fdaf 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000682:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000686:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000688:	6a23      	ldr	r3, [r4, #32]
 800068a:	079b      	lsls	r3, r3, #30
 800068c:	d53f      	bpl.n	800070e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800068e:	2f00      	cmp	r7, #0
 8000690:	f43f af1d 	beq.w	80004ce <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000694:	69e3      	ldr	r3, [r4, #28]
 8000696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800069a:	61e3      	str	r3, [r4, #28]
 800069c:	e717      	b.n	80004ce <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800069e:	2700      	movs	r7, #0
 80006a0:	e7e2      	b.n	8000668 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006a2:	6833      	ldr	r3, [r6, #0]
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006aa:	f7ff fd99 	bl	80001e0 <HAL_GetTick>
 80006ae:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006b0:	6833      	ldr	r3, [r6, #0]
 80006b2:	05da      	lsls	r2, r3, #23
 80006b4:	d4dc      	bmi.n	8000670 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006b6:	f7ff fd93 	bl	80001e0 <HAL_GetTick>
 80006ba:	eba0 0008 	sub.w	r0, r0, r8
 80006be:	2864      	cmp	r0, #100	; 0x64
 80006c0:	d9f6      	bls.n	80006b0 <HAL_RCC_OscConfig+0x204>
 80006c2:	e735      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c4:	b9ab      	cbnz	r3, 80006f2 <HAL_RCC_OscConfig+0x246>
 80006c6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	6223      	str	r3, [r4, #32]
 80006d2:	6a23      	ldr	r3, [r4, #32]
 80006d4:	f023 0304 	bic.w	r3, r3, #4
 80006d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006da:	f7ff fd81 	bl	80001e0 <HAL_GetTick>
 80006de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006e0:	6a23      	ldr	r3, [r4, #32]
 80006e2:	0798      	lsls	r0, r3, #30
 80006e4:	d5d3      	bpl.n	800068e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e6:	f7ff fd7b 	bl	80001e0 <HAL_GetTick>
 80006ea:	1b80      	subs	r0, r0, r6
 80006ec:	4540      	cmp	r0, r8
 80006ee:	d9f7      	bls.n	80006e0 <HAL_RCC_OscConfig+0x234>
 80006f0:	e71e      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	d103      	bne.n	8000700 <HAL_RCC_OscConfig+0x254>
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6223      	str	r3, [r4, #32]
 80006fe:	e7ba      	b.n	8000676 <HAL_RCC_OscConfig+0x1ca>
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	6223      	str	r3, [r4, #32]
 8000706:	6a23      	ldr	r3, [r4, #32]
 8000708:	f023 0304 	bic.w	r3, r3, #4
 800070c:	e7b6      	b.n	800067c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800070e:	f7ff fd67 	bl	80001e0 <HAL_GetTick>
 8000712:	eba0 0008 	sub.w	r0, r0, r8
 8000716:	42b0      	cmp	r0, r6
 8000718:	d9b6      	bls.n	8000688 <HAL_RCC_OscConfig+0x1dc>
 800071a:	e709      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
 800071c:	40021000 	.word	0x40021000
 8000720:	42420000 	.word	0x42420000
 8000724:	42420480 	.word	0x42420480
 8000728:	2000000c 	.word	0x2000000c
 800072c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000730:	4c22      	ldr	r4, [pc, #136]	; (80007bc <HAL_RCC_OscConfig+0x310>)
 8000732:	6863      	ldr	r3, [r4, #4]
 8000734:	f003 030c 	and.w	r3, r3, #12
 8000738:	2b08      	cmp	r3, #8
 800073a:	f43f aee2 	beq.w	8000502 <HAL_RCC_OscConfig+0x56>
 800073e:	2300      	movs	r3, #0
 8000740:	4e1f      	ldr	r6, [pc, #124]	; (80007c0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000742:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000744:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000746:	d12b      	bne.n	80007a0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000748:	f7ff fd4a 	bl	80001e0 <HAL_GetTick>
 800074c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	0199      	lsls	r1, r3, #6
 8000752:	d41f      	bmi.n	8000794 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000754:	6a2b      	ldr	r3, [r5, #32]
 8000756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800075a:	d105      	bne.n	8000768 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800075c:	6862      	ldr	r2, [r4, #4]
 800075e:	68a9      	ldr	r1, [r5, #8]
 8000760:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000764:	430a      	orrs	r2, r1
 8000766:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000768:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800076a:	6862      	ldr	r2, [r4, #4]
 800076c:	430b      	orrs	r3, r1
 800076e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000772:	4313      	orrs	r3, r2
 8000774:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000776:	2301      	movs	r3, #1
 8000778:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800077a:	f7ff fd31 	bl	80001e0 <HAL_GetTick>
 800077e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	019a      	lsls	r2, r3, #6
 8000784:	f53f aea7 	bmi.w	80004d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000788:	f7ff fd2a 	bl	80001e0 <HAL_GetTick>
 800078c:	1b40      	subs	r0, r0, r5
 800078e:	2802      	cmp	r0, #2
 8000790:	d9f6      	bls.n	8000780 <HAL_RCC_OscConfig+0x2d4>
 8000792:	e6cd      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000794:	f7ff fd24 	bl	80001e0 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	2802      	cmp	r0, #2
 800079c:	d9d7      	bls.n	800074e <HAL_RCC_OscConfig+0x2a2>
 800079e:	e6c7      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007a0:	f7ff fd1e 	bl	80001e0 <HAL_GetTick>
 80007a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	f57f ae94 	bpl.w	80004d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007ae:	f7ff fd17 	bl	80001e0 <HAL_GetTick>
 80007b2:	1b40      	subs	r0, r0, r5
 80007b4:	2802      	cmp	r0, #2
 80007b6:	d9f6      	bls.n	80007a6 <HAL_RCC_OscConfig+0x2fa>
 80007b8:	e6ba      	b.n	8000530 <HAL_RCC_OscConfig+0x84>
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	42420060 	.word	0x42420060

080007c4 <HAL_RCC_GetSysClockFreq>:
{
 80007c4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ca:	ac02      	add	r4, sp, #8
 80007cc:	f103 0510 	add.w	r5, r3, #16
 80007d0:	4622      	mov	r2, r4
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	6859      	ldr	r1, [r3, #4]
 80007d6:	3308      	adds	r3, #8
 80007d8:	c203      	stmia	r2!, {r0, r1}
 80007da:	42ab      	cmp	r3, r5
 80007dc:	4614      	mov	r4, r2
 80007de:	d1f7      	bne.n	80007d0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007e0:	2301      	movs	r3, #1
 80007e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80007e6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007e8:	4911      	ldr	r1, [pc, #68]	; (8000830 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ea:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007ee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f0:	f003 020c 	and.w	r2, r3, #12
 80007f4:	2a08      	cmp	r2, #8
 80007f6:	d117      	bne.n	8000828 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007fc:	a806      	add	r0, sp, #24
 80007fe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000800:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000802:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000806:	d50c      	bpl.n	8000822 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000808:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080a:	480a      	ldr	r0, [pc, #40]	; (8000834 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800080c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000810:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000812:	aa06      	add	r2, sp, #24
 8000814:	4413      	add	r3, r2
 8000816:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800081a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800081e:	b007      	add	sp, #28
 8000820:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_RCC_GetSysClockFreq+0x74>)
 8000824:	4350      	muls	r0, r2
 8000826:	e7fa      	b.n	800081e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800082a:	e7f8      	b.n	800081e <HAL_RCC_GetSysClockFreq+0x5a>
 800082c:	08001f74 	.word	0x08001f74
 8000830:	40021000 	.word	0x40021000
 8000834:	007a1200 	.word	0x007a1200
 8000838:	003d0900 	.word	0x003d0900

0800083c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083c:	4a54      	ldr	r2, [pc, #336]	; (8000990 <HAL_RCC_ClockConfig+0x154>)
{
 800083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000842:	6813      	ldr	r3, [r2, #0]
{
 8000844:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	428b      	cmp	r3, r1
{
 800084c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800084e:	d32a      	bcc.n	80008a6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000850:	6829      	ldr	r1, [r5, #0]
 8000852:	078c      	lsls	r4, r1, #30
 8000854:	d434      	bmi.n	80008c0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000856:	07ca      	lsls	r2, r1, #31
 8000858:	d447      	bmi.n	80008ea <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800085a:	4a4d      	ldr	r2, [pc, #308]	; (8000990 <HAL_RCC_ClockConfig+0x154>)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	429e      	cmp	r6, r3
 8000864:	f0c0 8082 	bcc.w	800096c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000868:	682a      	ldr	r2, [r5, #0]
 800086a:	4c4a      	ldr	r4, [pc, #296]	; (8000994 <HAL_RCC_ClockConfig+0x158>)
 800086c:	f012 0f04 	tst.w	r2, #4
 8000870:	f040 8087 	bne.w	8000982 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000874:	0713      	lsls	r3, r2, #28
 8000876:	d506      	bpl.n	8000886 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	692a      	ldr	r2, [r5, #16]
 800087c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000880:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000884:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000886:	f7ff ff9d 	bl	80007c4 <HAL_RCC_GetSysClockFreq>
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	4a42      	ldr	r2, [pc, #264]	; (8000998 <HAL_RCC_ClockConfig+0x15c>)
 800088e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	40d8      	lsrs	r0, r3
 8000896:	4b41      	ldr	r3, [pc, #260]	; (800099c <HAL_RCC_ClockConfig+0x160>)
 8000898:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fc5e 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80008a0:	2000      	movs	r0, #0
}
 80008a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	f023 0307 	bic.w	r3, r3, #7
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b0:	6813      	ldr	r3, [r2, #0]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d0ca      	beq.n	8000850 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ba:	2001      	movs	r0, #1
 80008bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008c6:	bf1e      	ittt	ne
 80008c8:	685a      	ldrne	r2, [r3, #4]
 80008ca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008ce:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008d2:	bf42      	ittt	mi
 80008d4:	685a      	ldrmi	r2, [r3, #4]
 80008d6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008da:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	68a8      	ldr	r0, [r5, #8]
 80008e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008e4:	4302      	orrs	r2, r0
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	e7b5      	b.n	8000856 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	686a      	ldr	r2, [r5, #4]
 80008ec:	4c29      	ldr	r4, [pc, #164]	; (8000994 <HAL_RCC_ClockConfig+0x158>)
 80008ee:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f2:	d11c      	bne.n	800092e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	d0df      	beq.n	80008ba <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fa:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000900:	f023 0303 	bic.w	r3, r3, #3
 8000904:	4313      	orrs	r3, r2
 8000906:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000908:	f7ff fc6a 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800090c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800090e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000910:	2b01      	cmp	r3, #1
 8000912:	d114      	bne.n	800093e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b04      	cmp	r3, #4
 800091c:	d09d      	beq.n	800085a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc5f 	bl	80001e0 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	d9f5      	bls.n	8000914 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000928:	2003      	movs	r0, #3
 800092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800092e:	2a02      	cmp	r2, #2
 8000930:	d102      	bne.n	8000938 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000932:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000936:	e7df      	b.n	80008f8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	f013 0f02 	tst.w	r3, #2
 800093c:	e7dc      	b.n	80008f8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800093e:	2b02      	cmp	r3, #2
 8000940:	d10f      	bne.n	8000962 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000942:	6863      	ldr	r3, [r4, #4]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	2b08      	cmp	r3, #8
 800094a:	d086      	beq.n	800085a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800094c:	f7ff fc48 	bl	80001e0 <HAL_GetTick>
 8000950:	1bc0      	subs	r0, r0, r7
 8000952:	4540      	cmp	r0, r8
 8000954:	d9f5      	bls.n	8000942 <HAL_RCC_ClockConfig+0x106>
 8000956:	e7e7      	b.n	8000928 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000958:	f7ff fc42 	bl	80001e0 <HAL_GetTick>
 800095c:	1bc0      	subs	r0, r0, r7
 800095e:	4540      	cmp	r0, r8
 8000960:	d8e2      	bhi.n	8000928 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000962:	6863      	ldr	r3, [r4, #4]
 8000964:	f013 0f0c 	tst.w	r3, #12
 8000968:	d1f6      	bne.n	8000958 <HAL_RCC_ClockConfig+0x11c>
 800096a:	e776      	b.n	800085a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f023 0307 	bic.w	r3, r3, #7
 8000972:	4333      	orrs	r3, r6
 8000974:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	429e      	cmp	r6, r3
 800097e:	d19c      	bne.n	80008ba <HAL_RCC_ClockConfig+0x7e>
 8000980:	e772      	b.n	8000868 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000982:	6863      	ldr	r3, [r4, #4]
 8000984:	68e9      	ldr	r1, [r5, #12]
 8000986:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800098a:	430b      	orrs	r3, r1
 800098c:	6063      	str	r3, [r4, #4]
 800098e:	e771      	b.n	8000874 <HAL_RCC_ClockConfig+0x38>
 8000990:	40022000 	.word	0x40022000
 8000994:	40021000 	.word	0x40021000
 8000998:	08002007 	.word	0x08002007
 800099c:	2000000c 	.word	0x2000000c

080009a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009ae:	6810      	ldr	r0, [r2, #0]
}    
 80009b0:	40d8      	lsrs	r0, r3
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000
 80009b8:	08002017 	.word	0x08002017
 80009bc:	2000000c 	.word	0x2000000c

080009c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009ca:	5cd3      	ldrb	r3, [r2, r3]
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009ce:	6810      	ldr	r0, [r2, #0]
} 
 80009d0:	40d8      	lsrs	r0, r3
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000
 80009d8:	08002017 	.word	0x08002017
 80009dc:	2000000c 	.word	0x2000000c

080009e0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009e0:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80009e2:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	f042 0201 	orr.w	r2, r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f042 0201 	orr.w	r2, r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	4770      	bx	lr

080009f6 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80009f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80009fa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	f04f 0302 	mov.w	r3, #2
 8000a02:	d01c      	beq.n	8000a3e <HAL_TIM_ConfigClockSource+0x48>
 8000a04:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000a06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000a0a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a10:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a12:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a16:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000a1c:	680a      	ldr	r2, [r1, #0]
 8000a1e:	2a40      	cmp	r2, #64	; 0x40
 8000a20:	d079      	beq.n	8000b16 <HAL_TIM_ConfigClockSource+0x120>
 8000a22:	d819      	bhi.n	8000a58 <HAL_TIM_ConfigClockSource+0x62>
 8000a24:	2a10      	cmp	r2, #16
 8000a26:	f000 8093 	beq.w	8000b50 <HAL_TIM_ConfigClockSource+0x15a>
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_TIM_ConfigClockSource+0x4c>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f000 8089 	beq.w	8000b44 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a3e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a42:	2a20      	cmp	r2, #32
 8000a44:	f000 808a 	beq.w	8000b5c <HAL_TIM_ConfigClockSource+0x166>
 8000a48:	2a30      	cmp	r2, #48	; 0x30
 8000a4a:	d1f2      	bne.n	8000a32 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a4c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a52:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a56:	e036      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a58:	2a70      	cmp	r2, #112	; 0x70
 8000a5a:	d036      	beq.n	8000aca <HAL_TIM_ConfigClockSource+0xd4>
 8000a5c:	d81b      	bhi.n	8000a96 <HAL_TIM_ConfigClockSource+0xa0>
 8000a5e:	2a50      	cmp	r2, #80	; 0x50
 8000a60:	d042      	beq.n	8000ae8 <HAL_TIM_ConfigClockSource+0xf2>
 8000a62:	2a60      	cmp	r2, #96	; 0x60
 8000a64:	d1e5      	bne.n	8000a32 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a66:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a68:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a6a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a6e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a70:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a72:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a74:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a76:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a7e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a82:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a86:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a88:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a8a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a90:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000a94:	e017      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a96:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000a9a:	d011      	beq.n	8000ac0 <HAL_TIM_ConfigClockSource+0xca>
 8000a9c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000aa0:	d1c7      	bne.n	8000a32 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aa2:	688a      	ldr	r2, [r1, #8]
 8000aa4:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000aa6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aa8:	68c9      	ldr	r1, [r1, #12]
 8000aaa:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000aac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ab0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ab4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ab6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000abe:	e002      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	e7b3      	b.n	8000a32 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aca:	688a      	ldr	r2, [r1, #8]
 8000acc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ace:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ad0:	68c9      	ldr	r1, [r1, #12]
 8000ad2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ad4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ad8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000adc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000ade:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ae0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ae2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ae6:	e7ee      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ae8:	684c      	ldr	r4, [r1, #4]
 8000aea:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000aec:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000aee:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000af0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000af4:	f025 0501 	bic.w	r5, r5, #1
 8000af8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000afa:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000afc:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000afe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b02:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b08:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b0a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b10:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b14:	e7d7      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b16:	684c      	ldr	r4, [r1, #4]
 8000b18:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b1a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b1c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b1e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b22:	f025 0501 	bic.w	r5, r5, #1
 8000b26:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b28:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b2a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b30:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b36:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b38:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b3e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b42:	e7c0      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b44:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b4a:	f042 0207 	orr.w	r2, r2, #7
 8000b4e:	e7ba      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b50:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b56:	f042 0217 	orr.w	r2, r2, #23
 8000b5a:	e7b4      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b5c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b62:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b66:	e7ae      	b.n	8000ac6 <HAL_TIM_ConfigClockSource+0xd0>

08000b68 <HAL_TIM_OC_DelayElapsedCallback>:
 8000b68:	4770      	bx	lr

08000b6a <HAL_TIM_IC_CaptureCallback>:
 8000b6a:	4770      	bx	lr

08000b6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b6c:	4770      	bx	lr

08000b6e <HAL_TIM_TriggerCallback>:
 8000b6e:	4770      	bx	lr

08000b70 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b70:	6803      	ldr	r3, [r0, #0]
{
 8000b72:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b74:	691a      	ldr	r2, [r3, #16]
{
 8000b76:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b78:	0791      	lsls	r1, r2, #30
 8000b7a:	d50e      	bpl.n	8000b9a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	0792      	lsls	r2, r2, #30
 8000b80:	d50b      	bpl.n	8000b9a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b82:	f06f 0202 	mvn.w	r2, #2
 8000b86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b88:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b8a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b8c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b8e:	079b      	lsls	r3, r3, #30
 8000b90:	d077      	beq.n	8000c82 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000b92:	f7ff ffea 	bl	8000b6a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b96:	2300      	movs	r3, #0
 8000b98:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	0750      	lsls	r0, r2, #29
 8000ba0:	d510      	bpl.n	8000bc4 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	0751      	lsls	r1, r2, #29
 8000ba6:	d50d      	bpl.n	8000bc4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ba8:	f06f 0204 	mvn.w	r2, #4
 8000bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bae:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bb2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bb4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000bb8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bba:	d068      	beq.n	8000c8e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bbc:	f7ff ffd5 	bl	8000b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	0712      	lsls	r2, r2, #28
 8000bca:	d50f      	bpl.n	8000bec <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	0710      	lsls	r0, r2, #28
 8000bd0:	d50c      	bpl.n	8000bec <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000bd2:	f06f 0208 	mvn.w	r2, #8
 8000bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bd8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bda:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bdc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bde:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000be0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000be2:	d05a      	beq.n	8000c9a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000be4:	f7ff ffc1 	bl	8000b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000be8:	2300      	movs	r3, #0
 8000bea:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	06d2      	lsls	r2, r2, #27
 8000bf2:	d510      	bpl.n	8000c16 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	06d0      	lsls	r0, r2, #27
 8000bf8:	d50d      	bpl.n	8000c16 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000bfa:	f06f 0210 	mvn.w	r2, #16
 8000bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c00:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c02:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c04:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c06:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000c0a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c0c:	d04b      	beq.n	8000ca6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c0e:	f7ff ffac 	bl	8000b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c12:	2300      	movs	r3, #0
 8000c14:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	07d1      	lsls	r1, r2, #31
 8000c1c:	d508      	bpl.n	8000c30 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	07d2      	lsls	r2, r2, #31
 8000c22:	d505      	bpl.n	8000c30 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c24:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c2c:	f000 fa08 	bl	8001040 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	0610      	lsls	r0, r2, #24
 8000c36:	d508      	bpl.n	8000c4a <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	0611      	lsls	r1, r2, #24
 8000c3c:	d505      	bpl.n	8000c4a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c46:	f000 f8aa 	bl	8000d9e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	0652      	lsls	r2, r2, #25
 8000c50:	d508      	bpl.n	8000c64 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	0650      	lsls	r0, r2, #25
 8000c56:	d505      	bpl.n	8000c64 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c60:	f7ff ff85 	bl	8000b6e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	0691      	lsls	r1, r2, #26
 8000c6a:	d522      	bpl.n	8000cb2 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	0692      	lsls	r2, r2, #26
 8000c70:	d51f      	bpl.n	8000cb2 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c72:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c76:	4620      	mov	r0, r4
}
 8000c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c7e:	f000 b88d 	b.w	8000d9c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c82:	f7ff ff71 	bl	8000b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c86:	4620      	mov	r0, r4
 8000c88:	f7ff ff70 	bl	8000b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c8c:	e783      	b.n	8000b96 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c8e:	f7ff ff6b 	bl	8000b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff ff6a 	bl	8000b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8000c98:	e792      	b.n	8000bc0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c9a:	f7ff ff65 	bl	8000b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff ff64 	bl	8000b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca4:	e7a0      	b.n	8000be8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ca6:	f7ff ff5f 	bl	8000b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff ff5e 	bl	8000b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8000cb0:	e7af      	b.n	8000c12 <HAL_TIM_IRQHandler+0xa2>
 8000cb2:	bd10      	pop	{r4, pc}

08000cb4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000cb6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	d00a      	beq.n	8000cd2 <TIM_Base_SetConfig+0x1e>
 8000cbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cc0:	d007      	beq.n	8000cd2 <TIM_Base_SetConfig+0x1e>
 8000cc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d003      	beq.n	8000cd2 <TIM_Base_SetConfig+0x1e>
 8000cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d115      	bne.n	8000cfe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000cd2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cd8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <TIM_Base_SetConfig+0x6c>)
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	d00a      	beq.n	8000cf6 <TIM_Base_SetConfig+0x42>
 8000ce0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ce4:	d007      	beq.n	8000cf6 <TIM_Base_SetConfig+0x42>
 8000ce6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d003      	beq.n	8000cf6 <TIM_Base_SetConfig+0x42>
 8000cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d103      	bne.n	8000cfe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cf6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000cfc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000cfe:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000d06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d08:	688b      	ldr	r3, [r1, #8]
 8000d0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d0c:	680b      	ldr	r3, [r1, #0]
 8000d0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <TIM_Base_SetConfig+0x6c>)
 8000d12:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000d14:	bf04      	itt	eq
 8000d16:	690b      	ldreq	r3, [r1, #16]
 8000d18:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	6143      	str	r3, [r0, #20]
 8000d1e:	4770      	bx	lr
 8000d20:	40012c00 	.word	0x40012c00

08000d24 <HAL_TIM_Base_Init>:
{
 8000d24:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d26:	4604      	mov	r4, r0
 8000d28:	b1a0      	cbz	r0, 8000d54 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d32:	b91b      	cbnz	r3, 8000d3c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d38:	f000 fb8c 	bl	8001454 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d3c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d3e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d44:	1d21      	adds	r1, r4, #4
 8000d46:	f7ff ffb5 	bl	8000cb4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d4a:	2301      	movs	r3, #1
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d54:	2001      	movs	r0, #1
}
 8000d56:	bd10      	pop	{r4, pc}

08000d58 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d5c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	f04f 0302 	mov.w	r3, #2
 8000d64:	d018      	beq.n	8000d98 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d6a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d6c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d6e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d70:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d76:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4322      	orrs	r2, r4
 8000d7c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d84:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000d92:	2300      	movs	r3, #0
 8000d94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000d98:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000d9a:	bd10      	pop	{r4, pc}

08000d9c <HAL_TIMEx_CommutationCallback>:
 8000d9c:	4770      	bx	lr

08000d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d9e:	4770      	bx	lr

08000da0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000da4:	6805      	ldr	r5, [r0, #0]
 8000da6:	68c2      	ldr	r2, [r0, #12]
 8000da8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000daa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db0:	4313      	orrs	r3, r2
 8000db2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000db6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000dbc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000dc0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dc4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dca:	696b      	ldr	r3, [r5, #20]
 8000dcc:	6982      	ldr	r2, [r0, #24]
 8000dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <UART_SetConfig+0x138>)
{
 8000dd8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000dda:	429d      	cmp	r5, r3
 8000ddc:	f04f 0419 	mov.w	r4, #25
 8000de0:	d146      	bne.n	8000e70 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000de2:	f7ff fded 	bl	80009c0 <HAL_RCC_GetPCLK2Freq>
 8000de6:	fb04 f300 	mul.w	r3, r4, r0
 8000dea:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000dee:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000df2:	00b6      	lsls	r6, r6, #2
 8000df4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000df8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000dfc:	011e      	lsls	r6, r3, #4
 8000dfe:	f7ff fddf 	bl	80009c0 <HAL_RCC_GetPCLK2Freq>
 8000e02:	4360      	muls	r0, r4
 8000e04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e0e:	f7ff fdd7 	bl	80009c0 <HAL_RCC_GetPCLK2Freq>
 8000e12:	4360      	muls	r0, r4
 8000e14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e22:	fb08 7313 	mls	r3, r8, r3, r7
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	3332      	adds	r3, #50	; 0x32
 8000e2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e2e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e32:	f7ff fdc5 	bl	80009c0 <HAL_RCC_GetPCLK2Freq>
 8000e36:	4360      	muls	r0, r4
 8000e38:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	fbb0 faf2 	udiv	sl, r0, r2
 8000e42:	f7ff fdbd 	bl	80009c0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e46:	4360      	muls	r0, r4
 8000e48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e56:	fb08 a313 	mls	r3, r8, r3, sl
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	3332      	adds	r3, #50	; 0x32
 8000e5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	433b      	orrs	r3, r7
 8000e68:	4433      	add	r3, r6
 8000e6a:	60ab      	str	r3, [r5, #8]
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	f7ff fd96 	bl	80009a0 <HAL_RCC_GetPCLK1Freq>
 8000e74:	fb04 f300 	mul.w	r3, r4, r0
 8000e78:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e7c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e80:	00b6      	lsls	r6, r6, #2
 8000e82:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e86:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e8a:	011e      	lsls	r6, r3, #4
 8000e8c:	f7ff fd88 	bl	80009a0 <HAL_RCC_GetPCLK1Freq>
 8000e90:	4360      	muls	r0, r4
 8000e92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e9c:	f7ff fd80 	bl	80009a0 <HAL_RCC_GetPCLK1Freq>
 8000ea0:	4360      	muls	r0, r4
 8000ea2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eac:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb0:	fb08 7313 	mls	r3, r8, r3, r7
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	3332      	adds	r3, #50	; 0x32
 8000eb8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ebc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ec0:	f7ff fd6e 	bl	80009a0 <HAL_RCC_GetPCLK1Freq>
 8000ec4:	4360      	muls	r0, r4
 8000ec6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	fbb0 faf2 	udiv	sl, r0, r2
 8000ed0:	f7ff fd66 	bl	80009a0 <HAL_RCC_GetPCLK1Freq>
 8000ed4:	e7b7      	b.n	8000e46 <UART_SetConfig+0xa6>
 8000ed6:	bf00      	nop
 8000ed8:	40013800 	.word	0x40013800

08000edc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ede:	4604      	mov	r4, r0
 8000ee0:	460e      	mov	r6, r1
 8000ee2:	4617      	mov	r7, r2
 8000ee4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	680b      	ldr	r3, [r1, #0]
 8000eea:	ea36 0303 	bics.w	r3, r6, r3
 8000eee:	d101      	bne.n	8000ef4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ef0:	2000      	movs	r0, #0
}
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ef4:	1c6b      	adds	r3, r5, #1
 8000ef6:	d0f7      	beq.n	8000ee8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ef8:	b995      	cbnz	r5, 8000f20 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000efc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f06:	695a      	ldr	r2, [r3, #20]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f0e:	2320      	movs	r3, #32
 8000f10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f14:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f20:	f7ff f95e 	bl	80001e0 <HAL_GetTick>
 8000f24:	1bc0      	subs	r0, r0, r7
 8000f26:	4285      	cmp	r5, r0
 8000f28:	d2dd      	bcs.n	8000ee6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f2a:	e7e6      	b.n	8000efa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f2c <HAL_UART_Init>:
{
 8000f2c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b340      	cbz	r0, 8000f84 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3a:	b91b      	cbnz	r3, 8000f44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f40:	f000 faa6 	bl	8001490 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f44:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f46:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f4c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f54:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f56:	f7ff ff23 	bl	8000da0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f5a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f5c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f6c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f74:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f84:	2001      	movs	r0, #1
}
 8000f86:	bd10      	pop	{r4, pc}

08000f88 <HAL_UART_Transmit>:
{
 8000f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000f92:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000f94:	2b20      	cmp	r3, #32
{
 8000f96:	460d      	mov	r5, r1
 8000f98:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f9a:	d14e      	bne.n	800103a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000f9c:	2900      	cmp	r1, #0
 8000f9e:	d049      	beq.n	8001034 <HAL_UART_Transmit+0xac>
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d047      	beq.n	8001034 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000fa4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d046      	beq.n	800103a <HAL_UART_Transmit+0xb2>
 8000fac:	2301      	movs	r3, #1
 8000fae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fb6:	2321      	movs	r3, #33	; 0x21
 8000fb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000fbc:	f7ff f910 	bl	80001e0 <HAL_GetTick>
 8000fc0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000fc2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fc6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000fca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b96b      	cbnz	r3, 8000fec <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ff80 	bl	8000edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fdc:	b9a8      	cbnz	r0, 800100a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000fde:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000fe0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000fe4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000fec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fee:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ff6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ff8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ffe:	4620      	mov	r0, r4
 8001000:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001002:	d10e      	bne.n	8001022 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001004:	f7ff ff6a 	bl	8000edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001008:	b110      	cbz	r0, 8001010 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
 800100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001010:	882b      	ldrh	r3, [r5, #0]
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001018:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800101a:	6923      	ldr	r3, [r4, #16]
 800101c:	b943      	cbnz	r3, 8001030 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800101e:	3502      	adds	r5, #2
 8001020:	e7d3      	b.n	8000fca <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001022:	f7ff ff5b 	bl	8000edc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001026:	2800      	cmp	r0, #0
 8001028:	d1ef      	bne.n	800100a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	782a      	ldrb	r2, [r5, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	3501      	adds	r5, #1
 8001032:	e7ca      	b.n	8000fca <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001034:	2001      	movs	r0, #1
 8001036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800103a:	2002      	movs	r0, #2
}
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001040 <HAL_TIM_PeriodElapsedCallback>:
char ch = 65;
char *p;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM1)
 8001040:	6802      	ldr	r2, [r0, #0]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001044:	429a      	cmp	r2, r3
 8001046:	d110      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ch++;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x30>)
		if(ch > 89) ch = 65;
		p = (char*)&ch;
		HAL_UART_Transmit(&huart2, (uint8_t*)p, 1, 1000);
 800104a:	4909      	ldr	r1, [pc, #36]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x30>)
		ch++;
 800104c:	781a      	ldrb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)p, 1, 1000);
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x34>)
		ch++;
 8001050:	3201      	adds	r2, #1
 8001052:	b2d2      	uxtb	r2, r2
		if(ch > 89) ch = 65;
 8001054:	2a59      	cmp	r2, #89	; 0x59
 8001056:	bf88      	it	hi
 8001058:	2241      	movhi	r2, #65	; 0x41
 800105a:	701a      	strb	r2, [r3, #0]
		p = (char*)&ch;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800105e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)p, 1, 1000);
 8001060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001064:	2201      	movs	r2, #1
 8001066:	f7ff bf8f 	b.w	8000f88 <HAL_UART_Transmit>
 800106a:	4770      	bx	lr
 800106c:	40012c00 	.word	0x40012c00
 8001070:	20000008 	.word	0x20000008
 8001074:	20000148 	.word	0x20000148
 8001078:	200000c4 	.word	0x200000c4

0800107c <GetByte>:
	}
}

uint8_t GetByte()
{
	myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <GetByte+0x28>)
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <GetByte+0x2c>)
 8001080:	7819      	ldrb	r1, [r3, #0]
 8001082:	7813      	ldrb	r3, [r2, #0]

	if(new_dat > 0)
 8001084:	4299      	cmp	r1, r3
 8001086:	d00a      	beq.n	800109e <GetByte+0x22>
	{
		uint8_t sym = buff_main[index_r++ & BUFFER_MASK]; // прочитать символ из буфера и инкрементировать индекс
 8001088:	7813      	ldrb	r3, [r2, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	1c59      	adds	r1, r3, #1
 800108e:	b2c9      	uxtb	r1, r1
 8001090:	7011      	strb	r1, [r2, #0]
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <GetByte+0x30>)
 8001094:	f003 031f 	and.w	r3, r3, #31
 8001098:	5cd0      	ldrb	r0, [r2, r3]
 800109a:	b2c0      	uxtb	r0, r0
		return sym;
 800109c:	4770      	bx	lr
	}

	return 0;
 800109e:	2000      	movs	r0, #0
}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000b1 	.word	0x200000b1
 80010a8:	200000b0 	.word	0x200000b0
 80010ac:	20000090 	.word	0x20000090

080010b0 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	4801      	ldr	r0, [pc, #4]	; (80010bc <Error_Handler+0xc>)
 80010b8:	f7ff b9f2 	b.w	80004a0 <HAL_GPIO_WritePin>
 80010bc:	40011000 	.word	0x40011000

080010c0 <SystemClock_Config>:
{
 80010c0:	b510      	push	{r4, lr}
 80010c2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c4:	2228      	movs	r2, #40	; 0x28
 80010c6:	2100      	movs	r1, #0
 80010c8:	a806      	add	r0, sp, #24
 80010ca:	f000 faf5 	bl	80016b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ce:	2214      	movs	r2, #20
 80010d0:	2100      	movs	r1, #0
 80010d2:	a801      	add	r0, sp, #4
 80010d4:	f000 faf0 	bl	80016b8 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010de:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ea:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010f0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	f7ff f9db 	bl	80004ac <HAL_RCC_OscConfig>
 80010f6:	b108      	cbz	r0, 80010fc <SystemClock_Config+0x3c>
    Error_Handler();
 80010f8:	f7ff ffda 	bl	80010b0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001106:	2102      	movs	r1, #2
 8001108:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001112:	f7ff fb93 	bl	800083c <HAL_RCC_ClockConfig>
 8001116:	b108      	cbz	r0, 800111c <SystemClock_Config+0x5c>
    Error_Handler();
 8001118:	f7ff ffca 	bl	80010b0 <Error_Handler>
}
 800111c:	b010      	add	sp, #64	; 0x40
 800111e:	bd10      	pop	{r4, pc}

08001120 <main>:
{
 8001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	b0e3      	sub	sp, #396	; 0x18c
  HAL_Init();
 8001126:	f7ff f83d 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800112a:	f7ff ffc9 	bl	80010c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	2210      	movs	r2, #16
 8001130:	2100      	movs	r1, #0
 8001132:	a822      	add	r0, sp, #136	; 0x88
 8001134:	f000 fac0 	bl	80016b8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	4ba3      	ldr	r3, [pc, #652]	; (80013c8 <main+0x2a8>)
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 8001140:	48a2      	ldr	r0, [pc, #648]	; (80013cc <main+0x2ac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	f042 0210 	orr.w	r2, r2, #16
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	f002 0210 	and.w	r2, r2, #16
 8001150:	9202      	str	r2, [sp, #8]
 8001152:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8001156:	4c9e      	ldr	r4, [pc, #632]	; (80013d0 <main+0x2b0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	f002 0220 	and.w	r2, r2, #32
 8001164:	9203      	str	r2, [sp, #12]
 8001166:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	f042 0204 	orr.w	r2, r2, #4
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	f002 0204 	and.w	r2, r2, #4
 8001176:	9204      	str	r2, [sp, #16]
 8001178:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	f042 0208 	orr.w	r2, r2, #8
 8001180:	619a      	str	r2, [r3, #24]
 8001182:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	9305      	str	r3, [sp, #20]
 800118c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 800118e:	f7ff f987 	bl	80004a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = led13_Pin;
 8001192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001196:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2302      	movs	r3, #2
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 800119e:	a922      	add	r1, sp, #136	; 0x88
 80011a0:	488a      	ldr	r0, [pc, #552]	; (80013cc <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	9325      	str	r3, [sp, #148]	; 0x94
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f7ff f89b 	bl	80002e0 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80011aa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80011ae:	4b89      	ldr	r3, [pc, #548]	; (80013d4 <main+0x2b4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b0:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80011b2:	e884 4008 	stmia.w	r4, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b6:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b8:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ba:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011bc:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	61e5      	str	r5, [r4, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c2:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c4:	f7ff feb2 	bl	8000f2c <HAL_UART_Init>
 80011c8:	4625      	mov	r5, r4
 80011ca:	b108      	cbz	r0, 80011d0 <main+0xb0>
    Error_Handler();
 80011cc:	f7ff ff70 	bl	80010b0 <Error_Handler>
  huart2.Init.BaudRate = 115200;
 80011d0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  huart2.Instance = USART2;
 80011d4:	4880      	ldr	r0, [pc, #512]	; (80013d8 <main+0x2b8>)
  huart2.Init.BaudRate = 115200;
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <main+0x2bc>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80011da:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e0:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e6:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e8:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ea:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ec:	f7ff fe9e 	bl	8000f2c <HAL_UART_Init>
 80011f0:	b108      	cbz	r0, 80011f6 <main+0xd6>
    Error_Handler();
 80011f2:	f7ff ff5d 	bl	80010b0 <Error_Handler>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	2210      	movs	r2, #16
 80011f8:	2100      	movs	r1, #0
 80011fa:	a822      	add	r0, sp, #136	; 0x88
 80011fc:	f000 fa5c 	bl	80016b8 <memset>
  htim1.Init.Prescaler = 720;
 8001200:	f44f 7234 	mov.w	r2, #720	; 0x2d0
  htim1.Instance = TIM1;
 8001204:	4876      	ldr	r0, [pc, #472]	; (80013e0 <main+0x2c0>)
  htim1.Init.Prescaler = 720;
 8001206:	4977      	ldr	r1, [pc, #476]	; (80013e4 <main+0x2c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 720;
 800120a:	e880 0006 	stmia.w	r0, {r1, r2}
  htim1.Init.Period = 700;
 800120e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	ac0f      	add	r4, sp, #60	; 0x3c
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 700;
 800121a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800121e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001222:	f7ff fd7f 	bl	8000d24 <HAL_TIM_Base_Init>
 8001226:	b108      	cbz	r0, 800122c <main+0x10c>
    Error_Handler();
 8001228:	f7ff ff42 	bl	80010b0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001230:	a922      	add	r1, sp, #136	; 0x88
 8001232:	486b      	ldr	r0, [pc, #428]	; (80013e0 <main+0x2c0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	9322      	str	r3, [sp, #136]	; 0x88
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001236:	f7ff fbde 	bl	80009f6 <HAL_TIM_ConfigClockSource>
 800123a:	b108      	cbz	r0, 8001240 <main+0x120>
    Error_Handler();
 800123c:	f7ff ff38 	bl	80010b0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	4621      	mov	r1, r4
 8001244:	4866      	ldr	r0, [pc, #408]	; (80013e0 <main+0x2c0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	6023      	str	r3, [r4, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	6063      	str	r3, [r4, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124a:	f7ff fd85 	bl	8000d58 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	b108      	cbz	r0, 8001254 <main+0x134>
    Error_Handler();
 8001250:	f7ff ff2e 	bl	80010b0 <Error_Handler>
  HAL_TIM_Base_Start_IT(&htim1);
 8001254:	4862      	ldr	r0, [pc, #392]	; (80013e0 <main+0x2c0>)
 8001256:	f7ff fbc3 	bl	80009e0 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); // прерывание при появлении данных в приёмном регистре - DR
 800125a:	682a      	ldr	r2, [r5, #0]
  uint8_t read_buff[SIZE_BUF + 1] = {0,}; // + 1 для корректного вывода на печать
 800125c:	af06      	add	r7, sp, #24
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); // прерывание при появлении данных в приёмном регистре - DR
 800125e:	68d3      	ldr	r3, [r2, #12]
  uint8_t read_buff[SIZE_BUF + 1] = {0,}; // + 1 для корректного вывода на печать
 8001260:	2100      	movs	r1, #0
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); // прерывание при появлении данных в приёмном регистре - DR
 8001262:	f043 0320 	orr.w	r3, r3, #32
 8001266:	60d3      	str	r3, [r2, #12]
  uint8_t read_buff[SIZE_BUF + 1] = {0,}; // + 1 для корректного вывода на печать
 8001268:	4638      	mov	r0, r7
 800126a:	2221      	movs	r2, #33	; 0x21
 800126c:	f000 fa24 	bl	80016b8 <memset>
	  myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 8001270:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001404 <main+0x2e4>
  char trans_str[BUF_OUT] = {0,};
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	2100      	movs	r1, #0
 800127a:	a822      	add	r0, sp, #136	; 0x88
 800127c:	f000 fa1c 	bl	80016b8 <memset>
  char dot_str[SIZE_BUF * 2 + 10] = {0,};
 8001280:	224a      	movs	r2, #74	; 0x4a
 8001282:	2100      	movs	r1, #0
 8001284:	4620      	mov	r0, r4
 8001286:	f000 fa17 	bl	80016b8 <memset>
 800128a:	46ca      	mov	sl, r9
	  myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 800128c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001408 <main+0x2e8>
	  HAL_Delay(595); // двигая это значение, и кол-во считываемых байт, можно посмотреть с какой скоростью вычитывается буфер (read_buff)
 8001290:	f240 2053 	movw	r0, #595	; 0x253
 8001294:	f7fe ffaa 	bl	80001ec <HAL_Delay>
	  myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 8001298:	f898 3000 	ldrb.w	r3, [r8]
 800129c:	f899 2000 	ldrb.w	r2, [r9]
 80012a0:	1a9b      	subs	r3, r3, r2
	  if(new_dat > 0)
 80012a2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80012a6:	f000 808c 	beq.w	80013c2 <main+0x2a2>
		  snprintf(trans_str, BUF_OUT - 1, "------------\nNew_dat: %d, index_r: %d, index_w: %d_END\n", new_dat, (index_r & BUFFER_MASK), (index_w & BUFFER_MASK));
 80012aa:	f899 2000 	ldrb.w	r2, [r9]
 80012ae:	f898 1000 	ldrb.w	r1, [r8]
 80012b2:	f002 021f 	and.w	r2, r2, #31
 80012b6:	f001 011f 	and.w	r1, r1, #31
 80012ba:	9101      	str	r1, [sp, #4]
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	4a49      	ldr	r2, [pc, #292]	; (80013e8 <main+0x2c8>)
 80012c2:	a822      	add	r0, sp, #136	; 0x88
 80012c4:	f000 fa00 	bl	80016c8 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80012c8:	a822      	add	r0, sp, #136	; 0x88
 80012ca:	f7fe ff3f 	bl	800014c <strlen>
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	b282      	uxth	r2, r0
 80012d4:	a922      	add	r1, sp, #136	; 0x88
 80012d6:	483e      	ldr	r0, [pc, #248]	; (80013d0 <main+0x2b0>)
 80012d8:	f7ff fe56 	bl	8000f88 <HAL_UART_Transmit>
		  ns = (index_w & BUFFER_MASK);
 80012dc:	f898 3000 	ldrb.w	r3, [r8]
		  snprintf(trans_str, BUF_OUT - 1, "%s|%c| write\n", dot_str, buff_main[ns]);
 80012e0:	4e42      	ldr	r6, [pc, #264]	; (80013ec <main+0x2cc>)
		  ns = ((ns - 1) & BUFFER_MASK);
 80012e2:	331f      	adds	r3, #31
		  snprintf(trans_str, BUF_OUT - 1, "%s|%c| write\n", dot_str, buff_main[ns]);
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	5cf3      	ldrb	r3, [r6, r3]
 80012ea:	4a41      	ldr	r2, [pc, #260]	; (80013f0 <main+0x2d0>)
 80012ec:	21ff      	movs	r1, #255	; 0xff
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	a822      	add	r0, sp, #136	; 0x88
 80012f2:	4623      	mov	r3, r4
 80012f4:	f000 f9e8 	bl	80016c8 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80012f8:	a822      	add	r0, sp, #136	; 0x88
 80012fa:	f7fe ff27 	bl	800014c <strlen>
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	b282      	uxth	r2, r0
 8001304:	a922      	add	r1, sp, #136	; 0x88
 8001306:	4832      	ldr	r0, [pc, #200]	; (80013d0 <main+0x2b0>)
 8001308:	f7ff fe3e 	bl	8000f88 <HAL_UART_Transmit>
 800130c:	2500      	movs	r5, #0
				  snprintf(trans_str, 5, "|%c|\n", buff_main[i]);
 800130e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 800140c <main+0x2ec>
			  if(i == SIZE_BUF - 1)
 8001312:	2d1f      	cmp	r5, #31
				  snprintf(trans_str, SIZE_BUF + 11, "|%c", buff_main[i]);
 8001314:	bf11      	iteee	ne
 8001316:	5d73      	ldrbne	r3, [r6, r5]
				  snprintf(trans_str, 5, "|%c|\n", buff_main[i]);
 8001318:	7ff3      	ldrbeq	r3, [r6, #31]
 800131a:	465a      	moveq	r2, fp
 800131c:	2105      	moveq	r1, #5
				  snprintf(trans_str, SIZE_BUF + 11, "|%c", buff_main[i]);
 800131e:	bf1c      	itt	ne
 8001320:	4a34      	ldrne	r2, [pc, #208]	; (80013f4 <main+0x2d4>)
 8001322:	212b      	movne	r1, #43	; 0x2b
 8001324:	a822      	add	r0, sp, #136	; 0x88
 8001326:	f000 f9cf 	bl	80016c8 <sniprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800132a:	a822      	add	r0, sp, #136	; 0x88
 800132c:	f7fe ff0e 	bl	800014c <strlen>
 8001330:	3501      	adds	r5, #1
 8001332:	b282      	uxth	r2, r0
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	a922      	add	r1, sp, #136	; 0x88
 800133a:	4825      	ldr	r0, [pc, #148]	; (80013d0 <main+0x2b0>)
 800133c:	f7ff fe24 	bl	8000f88 <HAL_UART_Transmit>
		  for(myuBUF_t i = 0; i < SIZE_BUF; i++)
 8001340:	2d20      	cmp	r5, #32
 8001342:	d1e6      	bne.n	8001312 <main+0x1f2>
		  memset(dot_str, 0, SIZE_BUF * 2 + 10);
 8001344:	224a      	movs	r2, #74	; 0x4a
 8001346:	2100      	movs	r1, #0
 8001348:	4620      	mov	r0, r4
 800134a:	f000 f9b5 	bl	80016b8 <memset>
		  for(myuBUF_t i = 0; i < (index_r & BUFFER_MASK); i++)
 800134e:	2300      	movs	r3, #0
 8001350:	f89a 2000 	ldrb.w	r2, [sl]
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	0058      	lsls	r0, r3, #1
 800135c:	4291      	cmp	r1, r2
 800135e:	b2c0      	uxtb	r0, r0
 8001360:	f103 0301 	add.w	r3, r3, #1
 8001364:	db27      	blt.n	80013b6 <main+0x296>
		  		read_buff[i] = GetByte();
 8001366:	f7ff fe89 	bl	800107c <GetByte>
		  snprintf(trans_str, BUF_OUT - 1, "%s|%s| read\n", dot_str, read_buff);
 800136a:	4623      	mov	r3, r4
		  		read_buff[i] = GetByte();
 800136c:	7038      	strb	r0, [r7, #0]
		  snprintf(trans_str, BUF_OUT - 1, "%s|%s| read\n", dot_str, read_buff);
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <main+0x2d8>)
 8001370:	21ff      	movs	r1, #255	; 0xff
 8001372:	9700      	str	r7, [sp, #0]
 8001374:	a822      	add	r0, sp, #136	; 0x88
 8001376:	f000 f9a7 	bl	80016c8 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800137a:	a822      	add	r0, sp, #136	; 0x88
 800137c:	f7fe fee6 	bl	800014c <strlen>
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	b282      	uxth	r2, r0
 8001386:	a922      	add	r1, sp, #136	; 0x88
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <main+0x2b0>)
 800138a:	f7ff fdfd 	bl	8000f88 <HAL_UART_Transmit>
		  snprintf(trans_str, BUF_OUT - 1, "index_r: %d_END\n", (index_r & BUFFER_MASK));
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	f89a 3000 	ldrb.w	r3, [sl]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <main+0x2dc>)
 8001396:	f003 031f 	and.w	r3, r3, #31
		  snprintf(trans_str, 30, "Not new_dat: %d_END\n", new_dat); // если в буфере ничего нового не появилось
 800139a:	a822      	add	r0, sp, #136	; 0x88
 800139c:	f000 f994 	bl	80016c8 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80013a0:	a822      	add	r0, sp, #136	; 0x88
 80013a2:	f7fe fed3 	bl	800014c <strlen>
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	b282      	uxth	r2, r0
 80013ac:	a922      	add	r1, sp, #136	; 0x88
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <main+0x2b0>)
 80013b0:	f7ff fdea 	bl	8000f88 <HAL_UART_Transmit>
 80013b4:	e76c      	b.n	8001290 <main+0x170>
		  	dot_str[s] = ' ';
 80013b6:	005a      	lsls	r2, r3, #1
 80013b8:	3a01      	subs	r2, #1
 80013ba:	b2d2      	uxtb	r2, r2
		  	dot_str[s] = ' ';
 80013bc:	5425      	strb	r5, [r4, r0]
		  	dot_str[s] = ' ';
 80013be:	54a5      	strb	r5, [r4, r2]
 80013c0:	e7c6      	b.n	8001350 <main+0x230>
		  snprintf(trans_str, 30, "Not new_dat: %d_END\n", new_dat); // если в буфере ничего нового не появилось
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <main+0x2e0>)
 80013c4:	211e      	movs	r1, #30
 80013c6:	e7e8      	b.n	800139a <main+0x27a>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40011000 	.word	0x40011000
 80013d0:	200000c8 	.word	0x200000c8
 80013d4:	40013800 	.word	0x40013800
 80013d8:	20000148 	.word	0x20000148
 80013dc:	40004400 	.word	0x40004400
 80013e0:	20000108 	.word	0x20000108
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	08001f84 	.word	0x08001f84
 80013ec:	20000090 	.word	0x20000090
 80013f0:	08001fbc 	.word	0x08001fbc
 80013f4:	08001fd0 	.word	0x08001fd0
 80013f8:	08001fd4 	.word	0x08001fd4
 80013fc:	08001fe1 	.word	0x08001fe1
 8001400:	08001ff2 	.word	0x08001ff2
 8001404:	200000b0 	.word	0x200000b0
 8001408:	200000b1 	.word	0x200000b1
 800140c:	08001fca 	.word	0x08001fca

08001410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_MspInit+0x3c>)
{
 8001412:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	619a      	str	r2, [r3, #24]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	f002 0201 	and.w	r2, r2, #1
 8001422:	9200      	str	r2, [sp, #0]
 8001424:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800142c:	61da      	str	r2, [r3, #28]
 800142e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143a:	6853      	ldr	r3, [r2, #4]
 800143c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	b002      	add	sp, #8
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_Base_MspInit+0x38>)
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d112      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001462:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001464:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800146a:	619a      	str	r2, [r3, #24]
 800146c:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 800146e:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001474:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001476:	2101      	movs	r1, #1
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001478:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 800147a:	f7fe fedb 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800147e:	2019      	movs	r0, #25
 8001480:	f7fe ff0c 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001484:	b003      	add	sp, #12
 8001486:	f85d fb04 	ldr.w	pc, [sp], #4
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00

08001490 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	2210      	movs	r2, #16
{
 8001492:	b510      	push	{r4, lr}
 8001494:	4604      	mov	r4, r0
 8001496:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	eb0d 0002 	add.w	r0, sp, r2
 800149c:	2100      	movs	r1, #0
 800149e:	f000 f90b 	bl	80016b8 <memset>
  if(huart->Instance==USART1)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_UART_MspInit+0xd4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d131      	bne.n	800150e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_UART_MspInit+0xd8>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	482e      	ldr	r0, [pc, #184]	; (800156c <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ba:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80014bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014c0:	9200      	str	r2, [sp, #0]
 80014c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	f042 0204 	orr.w	r2, r2, #4
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f7fe fefc 	bl	80002e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	a904      	add	r1, sp, #16
 80014ee:	481f      	ldr	r0, [pc, #124]	; (800156c <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f7fe fef3 	bl	80002e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fa:	2025      	movs	r0, #37	; 0x25
 80014fc:	4622      	mov	r2, r4
 80014fe:	4621      	mov	r1, r4
 8001500:	f7fe fe98 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f7fe fec9 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150a:	b008      	add	sp, #32
 800150c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <HAL_UART_MspInit+0xe0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d1fa      	bne.n	800150a <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001518:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001520:	61da      	str	r2, [r3, #28]
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001528:	9202      	str	r2, [sp, #8]
 800152a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	f042 0204 	orr.w	r2, r2, #4
 8001532:	619a      	str	r2, [r3, #24]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800153e:	2304      	movs	r3, #4
 8001540:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f7fe fec9 	bl	80002e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800154e:	2308      	movs	r3, #8
 8001550:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	a904      	add	r1, sp, #16
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f7fe fec0 	bl	80002e0 <HAL_GPIO_Init>
}
 8001560:	e7d3      	b.n	800150a <HAL_UART_MspInit+0x7a>
 8001562:	bf00      	nop
 8001564:	40013800 	.word	0x40013800
 8001568:	40021000 	.word	0x40021000
 800156c:	40010800 	.word	0x40010800
 8001570:	40004400 	.word	0x40004400

08001574 <NMI_Handler>:
 8001574:	4770      	bx	lr

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	e7fe      	b.n	800157a <BusFault_Handler>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler>

0800157e <SVC_Handler>:
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f7fe be20 	b.w	80001c8 <HAL_IncTick>

08001588 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001588:	4801      	ldr	r0, [pc, #4]	; (8001590 <TIM1_UP_IRQHandler+0x8>)
 800158a:	f7ff baf1 	b.w	8000b70 <HAL_TIM_IRQHandler>
 800158e:	bf00      	nop
 8001590:	20000108 	.word	0x20000108

08001594 <USART1_IRQHandler>:
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	if((huart1.Instance->SR & USART_SR_RXNE) != RESET)
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <USART1_IRQHandler+0x34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	0692      	lsls	r2, r2, #26
 800159c:	d512      	bpl.n	80015c4 <USART1_IRQHandler+0x30>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра

		myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 800159e:	490b      	ldr	r1, [pc, #44]	; (80015cc <USART1_IRQHandler+0x38>)
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <USART1_IRQHandler+0x3c>)
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80015a2:	685a      	ldr	r2, [r3, #4]
		myuBUF_t new_dat = (myuBUF_t)index_w - (myuBUF_t)index_r; // кол-во новых байт в буфере
 80015a4:	780b      	ldrb	r3, [r1, #0]
 80015a6:	7800      	ldrb	r0, [r0, #0]
 80015a8:	1a1b      	subs	r3, r3, r0

		if(new_dat < SIZE_BUF)
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b1f      	cmp	r3, #31
 80015ae:	d809      	bhi.n	80015c4 <USART1_IRQHandler+0x30>
		{
			buff_main[index_w++ & BUFFER_MASK] = rbyte; // записать символ в буфер и инкрементировать индекс
 80015b0:	780b      	ldrb	r3, [r1, #0]
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 80015b2:	b2d2      	uxtb	r2, r2
			buff_main[index_w++ & BUFFER_MASK] = rbyte; // записать символ в буфер и инкрементировать индекс
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	1c58      	adds	r0, r3, #1
 80015b8:	b2c0      	uxtb	r0, r0
 80015ba:	7008      	strb	r0, [r1, #0]
 80015bc:	4905      	ldr	r1, [pc, #20]	; (80015d4 <USART1_IRQHandler+0x40>)
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	54ca      	strb	r2, [r1, r3]
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200000c8 	.word	0x200000c8
 80015cc:	200000b1 	.word	0x200000b1
 80015d0:	200000b0 	.word	0x200000b0
 80015d4:	20000090 	.word	0x20000090

080015d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <SystemInit+0x40>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f042 0201 	orr.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <SystemInit+0x44>)
 80015e6:	400a      	ands	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015f4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001604:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001606:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800160a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800160c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <SystemInit+0x48>)
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	f8ff0000 	.word	0xf8ff0000
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001624:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001626:	e003      	b.n	8001630 <LoopCopyDataInit>

08001628 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800162a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800162c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800162e:	3104      	adds	r1, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001634:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001638:	d3f6      	bcc.n	8001628 <CopyDataInit>
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800163c:	e002      	b.n	8001644 <LoopFillZerobss>

0800163e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001640:	f842 3b04 	str.w	r3, [r2], #4

08001644 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001646:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001648:	d3f9      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800164a:	f7ff ffc5 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f000 f80f 	bl	8001670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001652:	f7ff fd65 	bl	8001120 <main>
  bx lr
 8001656:	4770      	bx	lr
  ldr r3, =_sidata
 8001658:	0800205c 	.word	0x0800205c
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001660:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001664:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001668:	2000018c 	.word	0x2000018c

0800166c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_2_IRQHandler>
	...

08001670 <__libc_init_array>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	2500      	movs	r5, #0
 8001674:	4e0c      	ldr	r6, [pc, #48]	; (80016a8 <__libc_init_array+0x38>)
 8001676:	4c0d      	ldr	r4, [pc, #52]	; (80016ac <__libc_init_array+0x3c>)
 8001678:	1ba4      	subs	r4, r4, r6
 800167a:	10a4      	asrs	r4, r4, #2
 800167c:	42a5      	cmp	r5, r4
 800167e:	d109      	bne.n	8001694 <__libc_init_array+0x24>
 8001680:	f000 fc6c 	bl	8001f5c <_init>
 8001684:	2500      	movs	r5, #0
 8001686:	4e0a      	ldr	r6, [pc, #40]	; (80016b0 <__libc_init_array+0x40>)
 8001688:	4c0a      	ldr	r4, [pc, #40]	; (80016b4 <__libc_init_array+0x44>)
 800168a:	1ba4      	subs	r4, r4, r6
 800168c:	10a4      	asrs	r4, r4, #2
 800168e:	42a5      	cmp	r5, r4
 8001690:	d105      	bne.n	800169e <__libc_init_array+0x2e>
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001698:	4798      	blx	r3
 800169a:	3501      	adds	r5, #1
 800169c:	e7ee      	b.n	800167c <__libc_init_array+0xc>
 800169e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016a2:	4798      	blx	r3
 80016a4:	3501      	adds	r5, #1
 80016a6:	e7f2      	b.n	800168e <__libc_init_array+0x1e>
 80016a8:	08002054 	.word	0x08002054
 80016ac:	08002054 	.word	0x08002054
 80016b0:	08002054 	.word	0x08002054
 80016b4:	08002058 	.word	0x08002058

080016b8 <memset>:
 80016b8:	4603      	mov	r3, r0
 80016ba:	4402      	add	r2, r0
 80016bc:	4293      	cmp	r3, r2
 80016be:	d100      	bne.n	80016c2 <memset+0xa>
 80016c0:	4770      	bx	lr
 80016c2:	f803 1b01 	strb.w	r1, [r3], #1
 80016c6:	e7f9      	b.n	80016bc <memset+0x4>

080016c8 <sniprintf>:
 80016c8:	b40c      	push	{r2, r3}
 80016ca:	b530      	push	{r4, r5, lr}
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <sniprintf+0x64>)
 80016ce:	1e0c      	subs	r4, r1, #0
 80016d0:	b09d      	sub	sp, #116	; 0x74
 80016d2:	681d      	ldr	r5, [r3, #0]
 80016d4:	da08      	bge.n	80016e8 <sniprintf+0x20>
 80016d6:	238b      	movs	r3, #139	; 0x8b
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016dc:	602b      	str	r3, [r5, #0]
 80016de:	b01d      	add	sp, #116	; 0x74
 80016e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016e4:	b002      	add	sp, #8
 80016e6:	4770      	bx	lr
 80016e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80016ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80016f0:	bf0c      	ite	eq
 80016f2:	4623      	moveq	r3, r4
 80016f4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80016f8:	9304      	str	r3, [sp, #16]
 80016fa:	9307      	str	r3, [sp, #28]
 80016fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001700:	9002      	str	r0, [sp, #8]
 8001702:	9006      	str	r0, [sp, #24]
 8001704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001708:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800170a:	ab21      	add	r3, sp, #132	; 0x84
 800170c:	a902      	add	r1, sp, #8
 800170e:	4628      	mov	r0, r5
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	f000 f869 	bl	80017e8 <_svfiprintf_r>
 8001716:	1c43      	adds	r3, r0, #1
 8001718:	bfbc      	itt	lt
 800171a:	238b      	movlt	r3, #139	; 0x8b
 800171c:	602b      	strlt	r3, [r5, #0]
 800171e:	2c00      	cmp	r4, #0
 8001720:	d0dd      	beq.n	80016de <sniprintf+0x16>
 8001722:	2200      	movs	r2, #0
 8001724:	9b02      	ldr	r3, [sp, #8]
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e7d9      	b.n	80016de <sniprintf+0x16>
 800172a:	bf00      	nop
 800172c:	20000010 	.word	0x20000010

08001730 <__ssputs_r>:
 8001730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001734:	688e      	ldr	r6, [r1, #8]
 8001736:	4682      	mov	sl, r0
 8001738:	429e      	cmp	r6, r3
 800173a:	460c      	mov	r4, r1
 800173c:	4691      	mov	r9, r2
 800173e:	4698      	mov	r8, r3
 8001740:	d835      	bhi.n	80017ae <__ssputs_r+0x7e>
 8001742:	898a      	ldrh	r2, [r1, #12]
 8001744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001748:	d031      	beq.n	80017ae <__ssputs_r+0x7e>
 800174a:	2302      	movs	r3, #2
 800174c:	6825      	ldr	r5, [r4, #0]
 800174e:	6909      	ldr	r1, [r1, #16]
 8001750:	1a6f      	subs	r7, r5, r1
 8001752:	6965      	ldr	r5, [r4, #20]
 8001754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001758:	fb95 f5f3 	sdiv	r5, r5, r3
 800175c:	f108 0301 	add.w	r3, r8, #1
 8001760:	443b      	add	r3, r7
 8001762:	429d      	cmp	r5, r3
 8001764:	bf38      	it	cc
 8001766:	461d      	movcc	r5, r3
 8001768:	0553      	lsls	r3, r2, #21
 800176a:	d531      	bpl.n	80017d0 <__ssputs_r+0xa0>
 800176c:	4629      	mov	r1, r5
 800176e:	f000 fb47 	bl	8001e00 <_malloc_r>
 8001772:	4606      	mov	r6, r0
 8001774:	b950      	cbnz	r0, 800178c <__ssputs_r+0x5c>
 8001776:	230c      	movs	r3, #12
 8001778:	f8ca 3000 	str.w	r3, [sl]
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001786:	81a3      	strh	r3, [r4, #12]
 8001788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800178c:	463a      	mov	r2, r7
 800178e:	6921      	ldr	r1, [r4, #16]
 8001790:	f000 fac4 	bl	8001d1c <memcpy>
 8001794:	89a3      	ldrh	r3, [r4, #12]
 8001796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800179a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179e:	81a3      	strh	r3, [r4, #12]
 80017a0:	6126      	str	r6, [r4, #16]
 80017a2:	443e      	add	r6, r7
 80017a4:	6026      	str	r6, [r4, #0]
 80017a6:	4646      	mov	r6, r8
 80017a8:	6165      	str	r5, [r4, #20]
 80017aa:	1bed      	subs	r5, r5, r7
 80017ac:	60a5      	str	r5, [r4, #8]
 80017ae:	4546      	cmp	r6, r8
 80017b0:	bf28      	it	cs
 80017b2:	4646      	movcs	r6, r8
 80017b4:	4649      	mov	r1, r9
 80017b6:	4632      	mov	r2, r6
 80017b8:	6820      	ldr	r0, [r4, #0]
 80017ba:	f000 faba 	bl	8001d32 <memmove>
 80017be:	68a3      	ldr	r3, [r4, #8]
 80017c0:	2000      	movs	r0, #0
 80017c2:	1b9b      	subs	r3, r3, r6
 80017c4:	60a3      	str	r3, [r4, #8]
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	441e      	add	r6, r3
 80017ca:	6026      	str	r6, [r4, #0]
 80017cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017d0:	462a      	mov	r2, r5
 80017d2:	f000 fb73 	bl	8001ebc <_realloc_r>
 80017d6:	4606      	mov	r6, r0
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1e1      	bne.n	80017a0 <__ssputs_r+0x70>
 80017dc:	6921      	ldr	r1, [r4, #16]
 80017de:	4650      	mov	r0, sl
 80017e0:	f000 fac2 	bl	8001d68 <_free_r>
 80017e4:	e7c7      	b.n	8001776 <__ssputs_r+0x46>
	...

080017e8 <_svfiprintf_r>:
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ec:	b09d      	sub	sp, #116	; 0x74
 80017ee:	9303      	str	r3, [sp, #12]
 80017f0:	898b      	ldrh	r3, [r1, #12]
 80017f2:	4680      	mov	r8, r0
 80017f4:	061c      	lsls	r4, r3, #24
 80017f6:	460d      	mov	r5, r1
 80017f8:	4616      	mov	r6, r2
 80017fa:	d50f      	bpl.n	800181c <_svfiprintf_r+0x34>
 80017fc:	690b      	ldr	r3, [r1, #16]
 80017fe:	b96b      	cbnz	r3, 800181c <_svfiprintf_r+0x34>
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	f000 fafd 	bl	8001e00 <_malloc_r>
 8001806:	6028      	str	r0, [r5, #0]
 8001808:	6128      	str	r0, [r5, #16]
 800180a:	b928      	cbnz	r0, 8001818 <_svfiprintf_r+0x30>
 800180c:	230c      	movs	r3, #12
 800180e:	f8c8 3000 	str.w	r3, [r8]
 8001812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001816:	e0c4      	b.n	80019a2 <_svfiprintf_r+0x1ba>
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	616b      	str	r3, [r5, #20]
 800181c:	2300      	movs	r3, #0
 800181e:	9309      	str	r3, [sp, #36]	; 0x24
 8001820:	2320      	movs	r3, #32
 8001822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001826:	2330      	movs	r3, #48	; 0x30
 8001828:	f04f 0b01 	mov.w	fp, #1
 800182c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001830:	4637      	mov	r7, r6
 8001832:	463c      	mov	r4, r7
 8001834:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d13c      	bne.n	80018b6 <_svfiprintf_r+0xce>
 800183c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001840:	d00b      	beq.n	800185a <_svfiprintf_r+0x72>
 8001842:	4653      	mov	r3, sl
 8001844:	4632      	mov	r2, r6
 8001846:	4629      	mov	r1, r5
 8001848:	4640      	mov	r0, r8
 800184a:	f7ff ff71 	bl	8001730 <__ssputs_r>
 800184e:	3001      	adds	r0, #1
 8001850:	f000 80a2 	beq.w	8001998 <_svfiprintf_r+0x1b0>
 8001854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001856:	4453      	add	r3, sl
 8001858:	9309      	str	r3, [sp, #36]	; 0x24
 800185a:	783b      	ldrb	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 809b 	beq.w	8001998 <_svfiprintf_r+0x1b0>
 8001862:	2300      	movs	r3, #0
 8001864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001868:	9304      	str	r3, [sp, #16]
 800186a:	9307      	str	r3, [sp, #28]
 800186c:	9205      	str	r2, [sp, #20]
 800186e:	9306      	str	r3, [sp, #24]
 8001870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001874:	931a      	str	r3, [sp, #104]	; 0x68
 8001876:	2205      	movs	r2, #5
 8001878:	7821      	ldrb	r1, [r4, #0]
 800187a:	4850      	ldr	r0, [pc, #320]	; (80019bc <_svfiprintf_r+0x1d4>)
 800187c:	f000 fa40 	bl	8001d00 <memchr>
 8001880:	1c67      	adds	r7, r4, #1
 8001882:	9b04      	ldr	r3, [sp, #16]
 8001884:	b9d8      	cbnz	r0, 80018be <_svfiprintf_r+0xd6>
 8001886:	06d9      	lsls	r1, r3, #27
 8001888:	bf44      	itt	mi
 800188a:	2220      	movmi	r2, #32
 800188c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001890:	071a      	lsls	r2, r3, #28
 8001892:	bf44      	itt	mi
 8001894:	222b      	movmi	r2, #43	; 0x2b
 8001896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800189a:	7822      	ldrb	r2, [r4, #0]
 800189c:	2a2a      	cmp	r2, #42	; 0x2a
 800189e:	d016      	beq.n	80018ce <_svfiprintf_r+0xe6>
 80018a0:	2100      	movs	r1, #0
 80018a2:	200a      	movs	r0, #10
 80018a4:	9a07      	ldr	r2, [sp, #28]
 80018a6:	4627      	mov	r7, r4
 80018a8:	783b      	ldrb	r3, [r7, #0]
 80018aa:	3401      	adds	r4, #1
 80018ac:	3b30      	subs	r3, #48	; 0x30
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d950      	bls.n	8001954 <_svfiprintf_r+0x16c>
 80018b2:	b1c9      	cbz	r1, 80018e8 <_svfiprintf_r+0x100>
 80018b4:	e011      	b.n	80018da <_svfiprintf_r+0xf2>
 80018b6:	2b25      	cmp	r3, #37	; 0x25
 80018b8:	d0c0      	beq.n	800183c <_svfiprintf_r+0x54>
 80018ba:	4627      	mov	r7, r4
 80018bc:	e7b9      	b.n	8001832 <_svfiprintf_r+0x4a>
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <_svfiprintf_r+0x1d4>)
 80018c0:	463c      	mov	r4, r7
 80018c2:	1a80      	subs	r0, r0, r2
 80018c4:	fa0b f000 	lsl.w	r0, fp, r0
 80018c8:	4318      	orrs	r0, r3
 80018ca:	9004      	str	r0, [sp, #16]
 80018cc:	e7d3      	b.n	8001876 <_svfiprintf_r+0x8e>
 80018ce:	9a03      	ldr	r2, [sp, #12]
 80018d0:	1d11      	adds	r1, r2, #4
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	9103      	str	r1, [sp, #12]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	db01      	blt.n	80018de <_svfiprintf_r+0xf6>
 80018da:	9207      	str	r2, [sp, #28]
 80018dc:	e004      	b.n	80018e8 <_svfiprintf_r+0x100>
 80018de:	4252      	negs	r2, r2
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	9207      	str	r2, [sp, #28]
 80018e6:	9304      	str	r3, [sp, #16]
 80018e8:	783b      	ldrb	r3, [r7, #0]
 80018ea:	2b2e      	cmp	r3, #46	; 0x2e
 80018ec:	d10d      	bne.n	800190a <_svfiprintf_r+0x122>
 80018ee:	787b      	ldrb	r3, [r7, #1]
 80018f0:	1c79      	adds	r1, r7, #1
 80018f2:	2b2a      	cmp	r3, #42	; 0x2a
 80018f4:	d132      	bne.n	800195c <_svfiprintf_r+0x174>
 80018f6:	9b03      	ldr	r3, [sp, #12]
 80018f8:	3702      	adds	r7, #2
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	9203      	str	r2, [sp, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	bfb8      	it	lt
 8001904:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001908:	9305      	str	r3, [sp, #20]
 800190a:	4c2d      	ldr	r4, [pc, #180]	; (80019c0 <_svfiprintf_r+0x1d8>)
 800190c:	2203      	movs	r2, #3
 800190e:	7839      	ldrb	r1, [r7, #0]
 8001910:	4620      	mov	r0, r4
 8001912:	f000 f9f5 	bl	8001d00 <memchr>
 8001916:	b138      	cbz	r0, 8001928 <_svfiprintf_r+0x140>
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	1b00      	subs	r0, r0, r4
 800191c:	fa03 f000 	lsl.w	r0, r3, r0
 8001920:	9b04      	ldr	r3, [sp, #16]
 8001922:	3701      	adds	r7, #1
 8001924:	4303      	orrs	r3, r0
 8001926:	9304      	str	r3, [sp, #16]
 8001928:	7839      	ldrb	r1, [r7, #0]
 800192a:	2206      	movs	r2, #6
 800192c:	4825      	ldr	r0, [pc, #148]	; (80019c4 <_svfiprintf_r+0x1dc>)
 800192e:	1c7e      	adds	r6, r7, #1
 8001930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001934:	f000 f9e4 	bl	8001d00 <memchr>
 8001938:	2800      	cmp	r0, #0
 800193a:	d035      	beq.n	80019a8 <_svfiprintf_r+0x1c0>
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <_svfiprintf_r+0x1e0>)
 800193e:	b9fb      	cbnz	r3, 8001980 <_svfiprintf_r+0x198>
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	3307      	adds	r3, #7
 8001944:	f023 0307 	bic.w	r3, r3, #7
 8001948:	3308      	adds	r3, #8
 800194a:	9303      	str	r3, [sp, #12]
 800194c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800194e:	444b      	add	r3, r9
 8001950:	9309      	str	r3, [sp, #36]	; 0x24
 8001952:	e76d      	b.n	8001830 <_svfiprintf_r+0x48>
 8001954:	fb00 3202 	mla	r2, r0, r2, r3
 8001958:	2101      	movs	r1, #1
 800195a:	e7a4      	b.n	80018a6 <_svfiprintf_r+0xbe>
 800195c:	2300      	movs	r3, #0
 800195e:	240a      	movs	r4, #10
 8001960:	4618      	mov	r0, r3
 8001962:	9305      	str	r3, [sp, #20]
 8001964:	460f      	mov	r7, r1
 8001966:	783a      	ldrb	r2, [r7, #0]
 8001968:	3101      	adds	r1, #1
 800196a:	3a30      	subs	r2, #48	; 0x30
 800196c:	2a09      	cmp	r2, #9
 800196e:	d903      	bls.n	8001978 <_svfiprintf_r+0x190>
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ca      	beq.n	800190a <_svfiprintf_r+0x122>
 8001974:	9005      	str	r0, [sp, #20]
 8001976:	e7c8      	b.n	800190a <_svfiprintf_r+0x122>
 8001978:	fb04 2000 	mla	r0, r4, r0, r2
 800197c:	2301      	movs	r3, #1
 800197e:	e7f1      	b.n	8001964 <_svfiprintf_r+0x17c>
 8001980:	ab03      	add	r3, sp, #12
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	462a      	mov	r2, r5
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_svfiprintf_r+0x1e4>)
 8001988:	a904      	add	r1, sp, #16
 800198a:	4640      	mov	r0, r8
 800198c:	f3af 8000 	nop.w
 8001990:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001994:	4681      	mov	r9, r0
 8001996:	d1d9      	bne.n	800194c <_svfiprintf_r+0x164>
 8001998:	89ab      	ldrh	r3, [r5, #12]
 800199a:	065b      	lsls	r3, r3, #25
 800199c:	f53f af39 	bmi.w	8001812 <_svfiprintf_r+0x2a>
 80019a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019a2:	b01d      	add	sp, #116	; 0x74
 80019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a8:	ab03      	add	r3, sp, #12
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	462a      	mov	r2, r5
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_svfiprintf_r+0x1e4>)
 80019b0:	a904      	add	r1, sp, #16
 80019b2:	4640      	mov	r0, r8
 80019b4:	f000 f884 	bl	8001ac0 <_printf_i>
 80019b8:	e7ea      	b.n	8001990 <_svfiprintf_r+0x1a8>
 80019ba:	bf00      	nop
 80019bc:	0800201f 	.word	0x0800201f
 80019c0:	08002025 	.word	0x08002025
 80019c4:	08002029 	.word	0x08002029
 80019c8:	00000000 	.word	0x00000000
 80019cc:	08001731 	.word	0x08001731

080019d0 <_printf_common>:
 80019d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d4:	4691      	mov	r9, r2
 80019d6:	461f      	mov	r7, r3
 80019d8:	688a      	ldr	r2, [r1, #8]
 80019da:	690b      	ldr	r3, [r1, #16]
 80019dc:	4606      	mov	r6, r0
 80019de:	4293      	cmp	r3, r2
 80019e0:	bfb8      	it	lt
 80019e2:	4613      	movlt	r3, r2
 80019e4:	f8c9 3000 	str.w	r3, [r9]
 80019e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019ec:	460c      	mov	r4, r1
 80019ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019f2:	b112      	cbz	r2, 80019fa <_printf_common+0x2a>
 80019f4:	3301      	adds	r3, #1
 80019f6:	f8c9 3000 	str.w	r3, [r9]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	0699      	lsls	r1, r3, #26
 80019fe:	bf42      	ittt	mi
 8001a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a04:	3302      	addmi	r3, #2
 8001a06:	f8c9 3000 	strmi.w	r3, [r9]
 8001a0a:	6825      	ldr	r5, [r4, #0]
 8001a0c:	f015 0506 	ands.w	r5, r5, #6
 8001a10:	d107      	bne.n	8001a22 <_printf_common+0x52>
 8001a12:	f104 0a19 	add.w	sl, r4, #25
 8001a16:	68e3      	ldr	r3, [r4, #12]
 8001a18:	f8d9 2000 	ldr.w	r2, [r9]
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	429d      	cmp	r5, r3
 8001a20:	db2a      	blt.n	8001a78 <_printf_common+0xa8>
 8001a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	3300      	adds	r3, #0
 8001a2a:	bf18      	it	ne
 8001a2c:	2301      	movne	r3, #1
 8001a2e:	0692      	lsls	r2, r2, #26
 8001a30:	d42f      	bmi.n	8001a92 <_printf_common+0xc2>
 8001a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a36:	4639      	mov	r1, r7
 8001a38:	4630      	mov	r0, r6
 8001a3a:	47c0      	blx	r8
 8001a3c:	3001      	adds	r0, #1
 8001a3e:	d022      	beq.n	8001a86 <_printf_common+0xb6>
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	68e5      	ldr	r5, [r4, #12]
 8001a44:	f003 0306 	and.w	r3, r3, #6
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	bf18      	it	ne
 8001a4c:	2500      	movne	r5, #0
 8001a4e:	f8d9 2000 	ldr.w	r2, [r9]
 8001a52:	f04f 0900 	mov.w	r9, #0
 8001a56:	bf08      	it	eq
 8001a58:	1aad      	subeq	r5, r5, r2
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	6922      	ldr	r2, [r4, #16]
 8001a5e:	bf08      	it	eq
 8001a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bfc4      	itt	gt
 8001a68:	1a9b      	subgt	r3, r3, r2
 8001a6a:	18ed      	addgt	r5, r5, r3
 8001a6c:	341a      	adds	r4, #26
 8001a6e:	454d      	cmp	r5, r9
 8001a70:	d11b      	bne.n	8001aaa <_printf_common+0xda>
 8001a72:	2000      	movs	r0, #0
 8001a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a78:	2301      	movs	r3, #1
 8001a7a:	4652      	mov	r2, sl
 8001a7c:	4639      	mov	r1, r7
 8001a7e:	4630      	mov	r0, r6
 8001a80:	47c0      	blx	r8
 8001a82:	3001      	adds	r0, #1
 8001a84:	d103      	bne.n	8001a8e <_printf_common+0xbe>
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a8e:	3501      	adds	r5, #1
 8001a90:	e7c1      	b.n	8001a16 <_printf_common+0x46>
 8001a92:	2030      	movs	r0, #48	; 0x30
 8001a94:	18e1      	adds	r1, r4, r3
 8001a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001aa0:	4422      	add	r2, r4
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aa8:	e7c3      	b.n	8001a32 <_printf_common+0x62>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4622      	mov	r2, r4
 8001aae:	4639      	mov	r1, r7
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	47c0      	blx	r8
 8001ab4:	3001      	adds	r0, #1
 8001ab6:	d0e6      	beq.n	8001a86 <_printf_common+0xb6>
 8001ab8:	f109 0901 	add.w	r9, r9, #1
 8001abc:	e7d7      	b.n	8001a6e <_printf_common+0x9e>
	...

08001ac0 <_printf_i>:
 8001ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ac4:	4617      	mov	r7, r2
 8001ac6:	7e0a      	ldrb	r2, [r1, #24]
 8001ac8:	b085      	sub	sp, #20
 8001aca:	2a6e      	cmp	r2, #110	; 0x6e
 8001acc:	4698      	mov	r8, r3
 8001ace:	4606      	mov	r6, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ad4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001ad8:	f000 80bc 	beq.w	8001c54 <_printf_i+0x194>
 8001adc:	d81a      	bhi.n	8001b14 <_printf_i+0x54>
 8001ade:	2a63      	cmp	r2, #99	; 0x63
 8001ae0:	d02e      	beq.n	8001b40 <_printf_i+0x80>
 8001ae2:	d80a      	bhi.n	8001afa <_printf_i+0x3a>
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	f000 80c8 	beq.w	8001c7a <_printf_i+0x1ba>
 8001aea:	2a58      	cmp	r2, #88	; 0x58
 8001aec:	f000 808a 	beq.w	8001c04 <_printf_i+0x144>
 8001af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001af4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001af8:	e02a      	b.n	8001b50 <_printf_i+0x90>
 8001afa:	2a64      	cmp	r2, #100	; 0x64
 8001afc:	d001      	beq.n	8001b02 <_printf_i+0x42>
 8001afe:	2a69      	cmp	r2, #105	; 0x69
 8001b00:	d1f6      	bne.n	8001af0 <_printf_i+0x30>
 8001b02:	6821      	ldr	r1, [r4, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b0a:	d023      	beq.n	8001b54 <_printf_i+0x94>
 8001b0c:	1d11      	adds	r1, r2, #4
 8001b0e:	6019      	str	r1, [r3, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	e027      	b.n	8001b64 <_printf_i+0xa4>
 8001b14:	2a73      	cmp	r2, #115	; 0x73
 8001b16:	f000 80b4 	beq.w	8001c82 <_printf_i+0x1c2>
 8001b1a:	d808      	bhi.n	8001b2e <_printf_i+0x6e>
 8001b1c:	2a6f      	cmp	r2, #111	; 0x6f
 8001b1e:	d02a      	beq.n	8001b76 <_printf_i+0xb6>
 8001b20:	2a70      	cmp	r2, #112	; 0x70
 8001b22:	d1e5      	bne.n	8001af0 <_printf_i+0x30>
 8001b24:	680a      	ldr	r2, [r1, #0]
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	600a      	str	r2, [r1, #0]
 8001b2c:	e003      	b.n	8001b36 <_printf_i+0x76>
 8001b2e:	2a75      	cmp	r2, #117	; 0x75
 8001b30:	d021      	beq.n	8001b76 <_printf_i+0xb6>
 8001b32:	2a78      	cmp	r2, #120	; 0x78
 8001b34:	d1dc      	bne.n	8001af0 <_printf_i+0x30>
 8001b36:	2278      	movs	r2, #120	; 0x78
 8001b38:	496f      	ldr	r1, [pc, #444]	; (8001cf8 <_printf_i+0x238>)
 8001b3a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001b3e:	e064      	b.n	8001c0a <_printf_i+0x14a>
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b46:	1d11      	adds	r1, r2, #4
 8001b48:	6019      	str	r1, [r3, #0]
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0a3      	b.n	8001c9c <_printf_i+0x1dc>
 8001b54:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b58:	f102 0104 	add.w	r1, r2, #4
 8001b5c:	6019      	str	r1, [r3, #0]
 8001b5e:	d0d7      	beq.n	8001b10 <_printf_i+0x50>
 8001b60:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	da03      	bge.n	8001b70 <_printf_i+0xb0>
 8001b68:	222d      	movs	r2, #45	; 0x2d
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b70:	4962      	ldr	r1, [pc, #392]	; (8001cfc <_printf_i+0x23c>)
 8001b72:	220a      	movs	r2, #10
 8001b74:	e017      	b.n	8001ba6 <_printf_i+0xe6>
 8001b76:	6820      	ldr	r0, [r4, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b7e:	d003      	beq.n	8001b88 <_printf_i+0xc8>
 8001b80:	1d08      	adds	r0, r1, #4
 8001b82:	6018      	str	r0, [r3, #0]
 8001b84:	680b      	ldr	r3, [r1, #0]
 8001b86:	e006      	b.n	8001b96 <_printf_i+0xd6>
 8001b88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b8c:	f101 0004 	add.w	r0, r1, #4
 8001b90:	6018      	str	r0, [r3, #0]
 8001b92:	d0f7      	beq.n	8001b84 <_printf_i+0xc4>
 8001b94:	880b      	ldrh	r3, [r1, #0]
 8001b96:	2a6f      	cmp	r2, #111	; 0x6f
 8001b98:	bf14      	ite	ne
 8001b9a:	220a      	movne	r2, #10
 8001b9c:	2208      	moveq	r2, #8
 8001b9e:	4957      	ldr	r1, [pc, #348]	; (8001cfc <_printf_i+0x23c>)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001ba6:	6865      	ldr	r5, [r4, #4]
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	60a5      	str	r5, [r4, #8]
 8001bac:	f2c0 809c 	blt.w	8001ce8 <_printf_i+0x228>
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	f020 0004 	bic.w	r0, r0, #4
 8001bb6:	6020      	str	r0, [r4, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13f      	bne.n	8001c3c <_printf_i+0x17c>
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	f040 8095 	bne.w	8001cec <_printf_i+0x22c>
 8001bc2:	4675      	mov	r5, lr
 8001bc4:	2a08      	cmp	r2, #8
 8001bc6:	d10b      	bne.n	8001be0 <_printf_i+0x120>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	07da      	lsls	r2, r3, #31
 8001bcc:	d508      	bpl.n	8001be0 <_printf_i+0x120>
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	bfde      	ittt	le
 8001bd6:	2330      	movle	r3, #48	; 0x30
 8001bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bdc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001be0:	ebae 0305 	sub.w	r3, lr, r5
 8001be4:	6123      	str	r3, [r4, #16]
 8001be6:	f8cd 8000 	str.w	r8, [sp]
 8001bea:	463b      	mov	r3, r7
 8001bec:	aa03      	add	r2, sp, #12
 8001bee:	4621      	mov	r1, r4
 8001bf0:	4630      	mov	r0, r6
 8001bf2:	f7ff feed 	bl	80019d0 <_printf_common>
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	d155      	bne.n	8001ca6 <_printf_i+0x1e6>
 8001bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfe:	b005      	add	sp, #20
 8001c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c08:	493c      	ldr	r1, [pc, #240]	; (8001cfc <_printf_i+0x23c>)
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c12:	f100 0504 	add.w	r5, r0, #4
 8001c16:	601d      	str	r5, [r3, #0]
 8001c18:	d001      	beq.n	8001c1e <_printf_i+0x15e>
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	e002      	b.n	8001c24 <_printf_i+0x164>
 8001c1e:	0655      	lsls	r5, r2, #25
 8001c20:	d5fb      	bpl.n	8001c1a <_printf_i+0x15a>
 8001c22:	8803      	ldrh	r3, [r0, #0]
 8001c24:	07d0      	lsls	r0, r2, #31
 8001c26:	bf44      	itt	mi
 8001c28:	f042 0220 	orrmi.w	r2, r2, #32
 8001c2c:	6022      	strmi	r2, [r4, #0]
 8001c2e:	b91b      	cbnz	r3, 8001c38 <_printf_i+0x178>
 8001c30:	6822      	ldr	r2, [r4, #0]
 8001c32:	f022 0220 	bic.w	r2, r2, #32
 8001c36:	6022      	str	r2, [r4, #0]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	e7b1      	b.n	8001ba0 <_printf_i+0xe0>
 8001c3c:	4675      	mov	r5, lr
 8001c3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c42:	fb02 3310 	mls	r3, r2, r0, r3
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d1f5      	bne.n	8001c3e <_printf_i+0x17e>
 8001c52:	e7b7      	b.n	8001bc4 <_printf_i+0x104>
 8001c54:	6808      	ldr	r0, [r1, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c5c:	6949      	ldr	r1, [r1, #20]
 8001c5e:	d004      	beq.n	8001c6a <_printf_i+0x1aa>
 8001c60:	1d10      	adds	r0, r2, #4
 8001c62:	6018      	str	r0, [r3, #0]
 8001c64:	6813      	ldr	r3, [r2, #0]
 8001c66:	6019      	str	r1, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <_printf_i+0x1ba>
 8001c6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c6e:	f102 0004 	add.w	r0, r2, #4
 8001c72:	6018      	str	r0, [r3, #0]
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	d0f6      	beq.n	8001c66 <_printf_i+0x1a6>
 8001c78:	8019      	strh	r1, [r3, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	4675      	mov	r5, lr
 8001c7e:	6123      	str	r3, [r4, #16]
 8001c80:	e7b1      	b.n	8001be6 <_printf_i+0x126>
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	1d11      	adds	r1, r2, #4
 8001c86:	6019      	str	r1, [r3, #0]
 8001c88:	6815      	ldr	r5, [r2, #0]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6862      	ldr	r2, [r4, #4]
 8001c8e:	4628      	mov	r0, r5
 8001c90:	f000 f836 	bl	8001d00 <memchr>
 8001c94:	b108      	cbz	r0, 8001c9a <_printf_i+0x1da>
 8001c96:	1b40      	subs	r0, r0, r5
 8001c98:	6060      	str	r0, [r4, #4]
 8001c9a:	6863      	ldr	r3, [r4, #4]
 8001c9c:	6123      	str	r3, [r4, #16]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ca4:	e79f      	b.n	8001be6 <_printf_i+0x126>
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	462a      	mov	r2, r5
 8001caa:	4639      	mov	r1, r7
 8001cac:	4630      	mov	r0, r6
 8001cae:	47c0      	blx	r8
 8001cb0:	3001      	adds	r0, #1
 8001cb2:	d0a2      	beq.n	8001bfa <_printf_i+0x13a>
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	079b      	lsls	r3, r3, #30
 8001cb8:	d507      	bpl.n	8001cca <_printf_i+0x20a>
 8001cba:	2500      	movs	r5, #0
 8001cbc:	f104 0919 	add.w	r9, r4, #25
 8001cc0:	68e3      	ldr	r3, [r4, #12]
 8001cc2:	9a03      	ldr	r2, [sp, #12]
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	429d      	cmp	r5, r3
 8001cc8:	db05      	blt.n	8001cd6 <_printf_i+0x216>
 8001cca:	68e0      	ldr	r0, [r4, #12]
 8001ccc:	9b03      	ldr	r3, [sp, #12]
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	bfb8      	it	lt
 8001cd2:	4618      	movlt	r0, r3
 8001cd4:	e793      	b.n	8001bfe <_printf_i+0x13e>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	464a      	mov	r2, r9
 8001cda:	4639      	mov	r1, r7
 8001cdc:	4630      	mov	r0, r6
 8001cde:	47c0      	blx	r8
 8001ce0:	3001      	adds	r0, #1
 8001ce2:	d08a      	beq.n	8001bfa <_printf_i+0x13a>
 8001ce4:	3501      	adds	r5, #1
 8001ce6:	e7eb      	b.n	8001cc0 <_printf_i+0x200>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1a7      	bne.n	8001c3c <_printf_i+0x17c>
 8001cec:	780b      	ldrb	r3, [r1, #0]
 8001cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cf6:	e765      	b.n	8001bc4 <_printf_i+0x104>
 8001cf8:	08002041 	.word	0x08002041
 8001cfc:	08002030 	.word	0x08002030

08001d00 <memchr>:
 8001d00:	b510      	push	{r4, lr}
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	4402      	add	r2, r0
 8001d06:	4290      	cmp	r0, r2
 8001d08:	4603      	mov	r3, r0
 8001d0a:	d101      	bne.n	8001d10 <memchr+0x10>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	781c      	ldrb	r4, [r3, #0]
 8001d12:	3001      	adds	r0, #1
 8001d14:	428c      	cmp	r4, r1
 8001d16:	d1f6      	bne.n	8001d06 <memchr+0x6>
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd10      	pop	{r4, pc}

08001d1c <memcpy>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	1e43      	subs	r3, r0, #1
 8001d20:	440a      	add	r2, r1
 8001d22:	4291      	cmp	r1, r2
 8001d24:	d100      	bne.n	8001d28 <memcpy+0xc>
 8001d26:	bd10      	pop	{r4, pc}
 8001d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d30:	e7f7      	b.n	8001d22 <memcpy+0x6>

08001d32 <memmove>:
 8001d32:	4288      	cmp	r0, r1
 8001d34:	b510      	push	{r4, lr}
 8001d36:	eb01 0302 	add.w	r3, r1, r2
 8001d3a:	d803      	bhi.n	8001d44 <memmove+0x12>
 8001d3c:	1e42      	subs	r2, r0, #1
 8001d3e:	4299      	cmp	r1, r3
 8001d40:	d10c      	bne.n	8001d5c <memmove+0x2a>
 8001d42:	bd10      	pop	{r4, pc}
 8001d44:	4298      	cmp	r0, r3
 8001d46:	d2f9      	bcs.n	8001d3c <memmove+0xa>
 8001d48:	1881      	adds	r1, r0, r2
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	42d3      	cmn	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <memmove+0x20>
 8001d50:	bd10      	pop	{r4, pc}
 8001d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001d5a:	e7f7      	b.n	8001d4c <memmove+0x1a>
 8001d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001d64:	e7eb      	b.n	8001d3e <memmove+0xc>
	...

08001d68 <_free_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d043      	beq.n	8001df8 <_free_r+0x90>
 8001d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d74:	1f0c      	subs	r4, r1, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bfb8      	it	lt
 8001d7a:	18e4      	addlt	r4, r4, r3
 8001d7c:	f000 f8d4 	bl	8001f28 <__malloc_lock>
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <_free_r+0x94>)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	4610      	mov	r0, r2
 8001d86:	b933      	cbnz	r3, 8001d96 <_free_r+0x2e>
 8001d88:	6063      	str	r3, [r4, #4]
 8001d8a:	6014      	str	r4, [r2, #0]
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d92:	f000 b8ca 	b.w	8001f2a <__malloc_unlock>
 8001d96:	42a3      	cmp	r3, r4
 8001d98:	d90b      	bls.n	8001db2 <_free_r+0x4a>
 8001d9a:	6821      	ldr	r1, [r4, #0]
 8001d9c:	1862      	adds	r2, r4, r1
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	bf01      	itttt	eq
 8001da2:	681a      	ldreq	r2, [r3, #0]
 8001da4:	685b      	ldreq	r3, [r3, #4]
 8001da6:	1852      	addeq	r2, r2, r1
 8001da8:	6022      	streq	r2, [r4, #0]
 8001daa:	6063      	str	r3, [r4, #4]
 8001dac:	6004      	str	r4, [r0, #0]
 8001dae:	e7ed      	b.n	8001d8c <_free_r+0x24>
 8001db0:	4613      	mov	r3, r2
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	b10a      	cbz	r2, 8001dba <_free_r+0x52>
 8001db6:	42a2      	cmp	r2, r4
 8001db8:	d9fa      	bls.n	8001db0 <_free_r+0x48>
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	1858      	adds	r0, r3, r1
 8001dbe:	42a0      	cmp	r0, r4
 8001dc0:	d10b      	bne.n	8001dda <_free_r+0x72>
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	4401      	add	r1, r0
 8001dc6:	1858      	adds	r0, r3, r1
 8001dc8:	4282      	cmp	r2, r0
 8001dca:	6019      	str	r1, [r3, #0]
 8001dcc:	d1de      	bne.n	8001d8c <_free_r+0x24>
 8001dce:	6810      	ldr	r0, [r2, #0]
 8001dd0:	6852      	ldr	r2, [r2, #4]
 8001dd2:	4401      	add	r1, r0
 8001dd4:	6019      	str	r1, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	e7d8      	b.n	8001d8c <_free_r+0x24>
 8001dda:	d902      	bls.n	8001de2 <_free_r+0x7a>
 8001ddc:	230c      	movs	r3, #12
 8001dde:	602b      	str	r3, [r5, #0]
 8001de0:	e7d4      	b.n	8001d8c <_free_r+0x24>
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	1821      	adds	r1, r4, r0
 8001de6:	428a      	cmp	r2, r1
 8001de8:	bf01      	itttt	eq
 8001dea:	6811      	ldreq	r1, [r2, #0]
 8001dec:	6852      	ldreq	r2, [r2, #4]
 8001dee:	1809      	addeq	r1, r1, r0
 8001df0:	6021      	streq	r1, [r4, #0]
 8001df2:	6062      	str	r2, [r4, #4]
 8001df4:	605c      	str	r4, [r3, #4]
 8001df6:	e7c9      	b.n	8001d8c <_free_r+0x24>
 8001df8:	bd38      	pop	{r3, r4, r5, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200000b4 	.word	0x200000b4

08001e00 <_malloc_r>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	1ccd      	adds	r5, r1, #3
 8001e04:	f025 0503 	bic.w	r5, r5, #3
 8001e08:	3508      	adds	r5, #8
 8001e0a:	2d0c      	cmp	r5, #12
 8001e0c:	bf38      	it	cc
 8001e0e:	250c      	movcc	r5, #12
 8001e10:	2d00      	cmp	r5, #0
 8001e12:	4606      	mov	r6, r0
 8001e14:	db01      	blt.n	8001e1a <_malloc_r+0x1a>
 8001e16:	42a9      	cmp	r1, r5
 8001e18:	d903      	bls.n	8001e22 <_malloc_r+0x22>
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	6033      	str	r3, [r6, #0]
 8001e1e:	2000      	movs	r0, #0
 8001e20:	bd70      	pop	{r4, r5, r6, pc}
 8001e22:	f000 f881 	bl	8001f28 <__malloc_lock>
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <_malloc_r+0xb4>)
 8001e28:	6814      	ldr	r4, [r2, #0]
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	b991      	cbnz	r1, 8001e54 <_malloc_r+0x54>
 8001e2e:	4c22      	ldr	r4, [pc, #136]	; (8001eb8 <_malloc_r+0xb8>)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	b91b      	cbnz	r3, 8001e3c <_malloc_r+0x3c>
 8001e34:	4630      	mov	r0, r6
 8001e36:	f000 f867 	bl	8001f08 <_sbrk_r>
 8001e3a:	6020      	str	r0, [r4, #0]
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f000 f862 	bl	8001f08 <_sbrk_r>
 8001e44:	1c43      	adds	r3, r0, #1
 8001e46:	d126      	bne.n	8001e96 <_malloc_r+0x96>
 8001e48:	230c      	movs	r3, #12
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	6033      	str	r3, [r6, #0]
 8001e4e:	f000 f86c 	bl	8001f2a <__malloc_unlock>
 8001e52:	e7e4      	b.n	8001e1e <_malloc_r+0x1e>
 8001e54:	680b      	ldr	r3, [r1, #0]
 8001e56:	1b5b      	subs	r3, r3, r5
 8001e58:	d41a      	bmi.n	8001e90 <_malloc_r+0x90>
 8001e5a:	2b0b      	cmp	r3, #11
 8001e5c:	d90f      	bls.n	8001e7e <_malloc_r+0x7e>
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	18cc      	adds	r4, r1, r3
 8001e62:	50cd      	str	r5, [r1, r3]
 8001e64:	4630      	mov	r0, r6
 8001e66:	f000 f860 	bl	8001f2a <__malloc_unlock>
 8001e6a:	f104 000b 	add.w	r0, r4, #11
 8001e6e:	1d23      	adds	r3, r4, #4
 8001e70:	f020 0007 	bic.w	r0, r0, #7
 8001e74:	1ac3      	subs	r3, r0, r3
 8001e76:	d01b      	beq.n	8001eb0 <_malloc_r+0xb0>
 8001e78:	425a      	negs	r2, r3
 8001e7a:	50e2      	str	r2, [r4, r3]
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	428c      	cmp	r4, r1
 8001e80:	bf0b      	itete	eq
 8001e82:	6863      	ldreq	r3, [r4, #4]
 8001e84:	684b      	ldrne	r3, [r1, #4]
 8001e86:	6013      	streq	r3, [r2, #0]
 8001e88:	6063      	strne	r3, [r4, #4]
 8001e8a:	bf18      	it	ne
 8001e8c:	460c      	movne	r4, r1
 8001e8e:	e7e9      	b.n	8001e64 <_malloc_r+0x64>
 8001e90:	460c      	mov	r4, r1
 8001e92:	6849      	ldr	r1, [r1, #4]
 8001e94:	e7ca      	b.n	8001e2c <_malloc_r+0x2c>
 8001e96:	1cc4      	adds	r4, r0, #3
 8001e98:	f024 0403 	bic.w	r4, r4, #3
 8001e9c:	42a0      	cmp	r0, r4
 8001e9e:	d005      	beq.n	8001eac <_malloc_r+0xac>
 8001ea0:	1a21      	subs	r1, r4, r0
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f000 f830 	bl	8001f08 <_sbrk_r>
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	d0cd      	beq.n	8001e48 <_malloc_r+0x48>
 8001eac:	6025      	str	r5, [r4, #0]
 8001eae:	e7d9      	b.n	8001e64 <_malloc_r+0x64>
 8001eb0:	bd70      	pop	{r4, r5, r6, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000b4 	.word	0x200000b4
 8001eb8:	200000b8 	.word	0x200000b8

08001ebc <_realloc_r>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	4607      	mov	r7, r0
 8001ec0:	4614      	mov	r4, r2
 8001ec2:	460e      	mov	r6, r1
 8001ec4:	b921      	cbnz	r1, 8001ed0 <_realloc_r+0x14>
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ecc:	f7ff bf98 	b.w	8001e00 <_malloc_r>
 8001ed0:	b922      	cbnz	r2, 8001edc <_realloc_r+0x20>
 8001ed2:	f7ff ff49 	bl	8001d68 <_free_r>
 8001ed6:	4625      	mov	r5, r4
 8001ed8:	4628      	mov	r0, r5
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001edc:	f000 f826 	bl	8001f2c <_malloc_usable_size_r>
 8001ee0:	4284      	cmp	r4, r0
 8001ee2:	d90f      	bls.n	8001f04 <_realloc_r+0x48>
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	f7ff ff8a 	bl	8001e00 <_malloc_r>
 8001eec:	4605      	mov	r5, r0
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d0f2      	beq.n	8001ed8 <_realloc_r+0x1c>
 8001ef2:	4631      	mov	r1, r6
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	f7ff ff11 	bl	8001d1c <memcpy>
 8001efa:	4631      	mov	r1, r6
 8001efc:	4638      	mov	r0, r7
 8001efe:	f7ff ff33 	bl	8001d68 <_free_r>
 8001f02:	e7e9      	b.n	8001ed8 <_realloc_r+0x1c>
 8001f04:	4635      	mov	r5, r6
 8001f06:	e7e7      	b.n	8001ed8 <_realloc_r+0x1c>

08001f08 <_sbrk_r>:
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4c05      	ldr	r4, [pc, #20]	; (8001f24 <_sbrk_r+0x1c>)
 8001f0e:	4605      	mov	r5, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	6023      	str	r3, [r4, #0]
 8001f14:	f000 f814 	bl	8001f40 <_sbrk>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d102      	bne.n	8001f22 <_sbrk_r+0x1a>
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	b103      	cbz	r3, 8001f22 <_sbrk_r+0x1a>
 8001f20:	602b      	str	r3, [r5, #0]
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	20000188 	.word	0x20000188

08001f28 <__malloc_lock>:
 8001f28:	4770      	bx	lr

08001f2a <__malloc_unlock>:
 8001f2a:	4770      	bx	lr

08001f2c <_malloc_usable_size_r>:
 8001f2c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f1a0 0004 	sub.w	r0, r0, #4
 8001f36:	bfbc      	itt	lt
 8001f38:	580b      	ldrlt	r3, [r1, r0]
 8001f3a:	18c0      	addlt	r0, r0, r3
 8001f3c:	4770      	bx	lr
	...

08001f40 <_sbrk>:
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <_sbrk+0x14>)
 8001f42:	4602      	mov	r2, r0
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	b909      	cbnz	r1, 8001f4c <_sbrk+0xc>
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <_sbrk+0x18>)
 8001f4a:	6019      	str	r1, [r3, #0]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	4402      	add	r2, r0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	4770      	bx	lr
 8001f54:	200000bc 	.word	0x200000bc
 8001f58:	2000018c 	.word	0x2000018c

08001f5c <_init>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	bf00      	nop
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

08001f68 <_fini>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr
